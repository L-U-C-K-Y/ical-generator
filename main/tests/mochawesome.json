{
  "stats": {
    "suites": 125,
    "tests": 425,
    "passes": 425,
    "pending": 0,
    "failures": 0,
    "start": "2022-03-21T14:43:55.884Z",
    "end": "2022-03-21T14:43:56.208Z",
    "duration": 324,
    "testsRegistered": 425,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5f6025ad-bc31-49e3-b2e7-2b84b16b6726",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0979a3a8-83a9-419b-a115-b6102707bfde",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f9cb55e5-2d14-44d7-b27f-eeab7219544f",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    // @ts-ignore\n    new alarm_1.default({ type: alarm_1.ICalAlarmType.display }, null);\n}, /`event`/);",
                  "err": {},
                  "uuid": "78eabfe1-424c-4034-b196-529cc9639615",
                  "parentUUID": "f9cb55e5-2d14-44d7-b27f-eeab7219544f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    // @ts-ignore\n    unknown: true,\n    type: alarm_1.ICalAlarmType.display\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.type(), 'display');",
                  "err": {},
                  "uuid": "3019df58-046b-4daf-aad4-52202e39adee",
                  "parentUUID": "f9cb55e5-2d14-44d7-b27f-eeab7219544f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78eabfe1-424c-4034-b196-529cc9639615",
                "3019df58-046b-4daf-aad4-52202e39adee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ab81643f-aa2c-483c-9c20-42604368603d",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.type(null));\nassert_1.default.deepStrictEqual(a, a.type(alarm_1.ICalAlarmType.display));",
                  "err": {},
                  "uuid": "61cd8d50-c90c-4b52-b152-fc7514b9294e",
                  "parentUUID": "ab81643f-aa2c-483c-9c20-42604368603d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.type(), null);\na.type(alarm_1.ICalAlarmType.display);\nassert_1.default.strictEqual(a.type(), 'display');\na.type(null);\nassert_1.default.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "7c018d8f-9f48-4033-9d6e-969cb5968331",
                  "parentUUID": "ab81643f-aa2c-483c-9c20-42604368603d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.type('BANANA');\n}, /`type`/);",
                  "err": {},
                  "uuid": "6caf30b0-9625-4ea5-b82b-2c74821add94",
                  "parentUUID": "ab81643f-aa2c-483c-9c20-42604368603d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 60 * 10\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('ACTION:DISPLAY') > -1);",
                  "err": {},
                  "uuid": "571ed671-3511-4ee4-b4d1-7c6a215ba515",
                  "parentUUID": "ab81643f-aa2c-483c-9c20-42604368603d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61cd8d50-c90c-4b52-b152-fc7514b9294e",
                "7c018d8f-9f48-4033-9d6e-969cb5968331",
                "6caf30b0-9625-4ea5-b82b-2c74821add94",
                "571ed671-3511-4ee4-b4d1-7c6a215ba515"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "82fc9fdc-02e7-4880-84c7-9b76cc86f1ec",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.trigger(null));\nassert_1.default.deepStrictEqual(a, a.trigger(60 * 10));",
                  "err": {},
                  "uuid": "0a5636db-6337-4dd4-b40f-7231f1a485dd",
                  "parentUUID": "82fc9fdc-02e7-4880-84c7-9b76cc86f1ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nconst now = new Date();\nassert_1.default.strictEqual(a.trigger(), null);\nassert_1.default.strictEqual(a.triggerAfter(), null);\na.trigger(300);\nassert_1.default.strictEqual(a.trigger(), 300);\nassert_1.default.strictEqual(a.triggerAfter(), -300);\n// Date\na.trigger(now);\nconst dateResult = a.trigger();\nassert_1.default.deepStrictEqual(dateResult, now);\n// Null\na.trigger(null);\nassert_1.default.strictEqual(a.trigger(), null);\nassert_1.default.strictEqual(a.triggerAfter(), null);",
                  "err": {},
                  "uuid": "32a52b05-dddf-4729-b100-e09282e3569e",
                  "parentUUID": "82fc9fdc-02e7-4880-84c7-9b76cc86f1ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.trigger(Infinity);\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.trigger('hi');\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.trigger(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "27707ad2-ade0-4553-b8f0-8f1d41077a9c",
                  "parentUUID": "82fc9fdc-02e7-4880-84c7-9b76cc86f1ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(60 * 10);\na.trigger(null);\nassert_1.default.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "99908efe-34f6-41c7-a9c0-9a771366321d",
                  "parentUUID": "82fc9fdc-02e7-4880-84c7-9b76cc86f1ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(new Date());\nassert_1.default.ok(a.trigger() instanceof Date);",
                  "err": {},
                  "uuid": "557f7a0f-6a73-4257-b236-a7c8e691c05f",
                  "parentUUID": "82fc9fdc-02e7-4880-84c7-9b76cc86f1ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger((0, moment_timezone_1.default)());\nassert_1.default.ok(moment_timezone_1.default.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "a9697bdb-1c26-4999-916f-f5ce265d276c",
                  "parentUUID": "82fc9fdc-02e7-4880-84c7-9b76cc86f1ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(2 * 60);\nassert_1.default.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "0c7e93e7-bab5-4be6-99a2-99e3494250f2",
                  "parentUUID": "82fc9fdc-02e7-4880-84c7-9b76cc86f1ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = (0, moment_timezone_1.default)('2015-02-01T13:38:45.000Z');\nconst a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, trigger: 60 * 10 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.trigger(trigger);\nassert_1.default.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "71e12bfa-1482-4dba-ac83-990782556979",
                  "parentUUID": "82fc9fdc-02e7-4880-84c7-9b76cc86f1ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a5636db-6337-4dd4-b40f-7231f1a485dd",
                "32a52b05-dddf-4729-b100-e09282e3569e",
                "27707ad2-ade0-4553-b8f0-8f1d41077a9c",
                "99908efe-34f6-41c7-a9c0-9a771366321d",
                "557f7a0f-6a73-4257-b236-a7c8e691c05f",
                "a9697bdb-1c26-4999-916f-f5ce265d276c",
                "0c7e93e7-bab5-4be6-99a2-99e3494250f2",
                "71e12bfa-1482-4dba-ac83-990782556979"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c8a7b217-0775-44d0-9f5b-519ebb77410c",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.triggerAfter(60 * 10));",
                  "err": {},
                  "uuid": "e5dfe186-d193-444b-a37b-29f2ba2c47f9",
                  "parentUUID": "c8a7b217-0775-44d0-9f5b-519ebb77410c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default())).triggerAfter(300);\nassert_1.default.strictEqual(a.triggerAfter(), 300);\nassert_1.default.strictEqual(a.trigger(), -300);",
                  "err": {},
                  "uuid": "1f7924d2-4e0b-439c-9bea-a18c5714027e",
                  "parentUUID": "c8a7b217-0775-44d0-9f5b-519ebb77410c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerAfter(120);\nassert_1.default.strictEqual(a.trigger(), -120);",
                  "err": {},
                  "uuid": "66079b9a-8368-4242-aae4-f24bd90241cd",
                  "parentUUID": "c8a7b217-0775-44d0-9f5b-519ebb77410c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.triggerAfter(Infinity);\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerAfter('hi');\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerAfter(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "6f129c8d-c522-414d-a984-cd5d97edbe1c",
                  "parentUUID": "c8a7b217-0775-44d0-9f5b-519ebb77410c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = (0, moment_timezone_1.default)('20150201T133845Z');\nconst a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, triggerAfter: 60 * 10 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('TRIGGER;RELATED=END:PT10M') > -1);\na.triggerAfter(trigger);\nassert_1.default.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "26890716-90f3-4b4b-9fde-513d8e35090f",
                  "parentUUID": "c8a7b217-0775-44d0-9f5b-519ebb77410c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5dfe186-d193-444b-a37b-29f2ba2c47f9",
                "1f7924d2-4e0b-439c-9bea-a18c5714027e",
                "66079b9a-8368-4242-aae4-f24bd90241cd",
                "6f129c8d-c522-414d-a984-cd5d97edbe1c",
                "26890716-90f3-4b4b-9fde-513d8e35090f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d17d96ab-9e24-499f-9bdf-8e8537ec4f3c",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.triggerBefore(null));\nassert_1.default.deepStrictEqual(a, a.triggerBefore(60 * 10));",
                  "err": {},
                  "uuid": "9442fb13-5119-482b-9a99-86e280e9a578",
                  "parentUUID": "d17d96ab-9e24-499f-9bdf-8e8537ec4f3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nconst now = new Date();\nassert_1.default.strictEqual(a.triggerBefore(), null);\na.trigger(300);\nassert_1.default.strictEqual(a.triggerBefore(), 300);\n// Date\na.trigger(now);\nconst dateResult = a.triggerBefore();\nassert_1.default.deepStrictEqual(dateResult, now);\n// Null\na.trigger(null);\nassert_1.default.strictEqual(a.triggerBefore(), null);",
                  "err": {},
                  "uuid": "539440a3-9238-48be-a8d6-792c8f9747ee",
                  "parentUUID": "d17d96ab-9e24-499f-9bdf-8e8537ec4f3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.triggerBefore(Infinity);\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerBefore('hi');\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerBefore(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "766e8b1f-099b-4396-97cd-026e4e1cdff0",
                  "parentUUID": "d17d96ab-9e24-499f-9bdf-8e8537ec4f3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore(60 * 10);\na.triggerBefore(null);\nassert_1.default.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "4611b863-7fea-48e2-bfb7-d8dc5a47954a",
                  "parentUUID": "d17d96ab-9e24-499f-9bdf-8e8537ec4f3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nconst now = new Date();\na.triggerBefore(now);\nassert_1.default.deepStrictEqual(a.trigger(), now);",
                  "err": {},
                  "uuid": "6a9932e1-efe5-4c6e-8d02-b2f0313a7b52",
                  "parentUUID": "d17d96ab-9e24-499f-9bdf-8e8537ec4f3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore((0, moment_timezone_1.default)());\nassert_1.default.ok(moment_timezone_1.default.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "87000bbb-cadf-4765-9a4f-e2862f6f4eb1",
                  "parentUUID": "d17d96ab-9e24-499f-9bdf-8e8537ec4f3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore(2 * 60);\nassert_1.default.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "1cd51f5c-3928-41a3-aa3e-e6f73f13fa9a",
                  "parentUUID": "d17d96ab-9e24-499f-9bdf-8e8537ec4f3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = (0, moment_timezone_1.default)('2015-02-01T13:38:45.000Z');\nconst a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, triggerBefore: 60 * 10 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.triggerBefore(trigger);\nassert_1.default.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "5f4e6725-b51d-47cb-97f6-818b78a50aa7",
                  "parentUUID": "d17d96ab-9e24-499f-9bdf-8e8537ec4f3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9442fb13-5119-482b-9a99-86e280e9a578",
                "539440a3-9238-48be-a8d6-792c8f9747ee",
                "766e8b1f-099b-4396-97cd-026e4e1cdff0",
                "4611b863-7fea-48e2-bfb7-d8dc5a47954a",
                "6a9932e1-efe5-4c6e-8d02-b2f0313a7b52",
                "87000bbb-cadf-4765-9a4f-e2862f6f4eb1",
                "1cd51f5c-3928-41a3-aa3e-e6f73f13fa9a",
                "5f4e6725-b51d-47cb-97f6-818b78a50aa7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1eefde13-7b5f-49ba-8817-09eb89e7e4e7",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.repeat(null));\nassert_1.default.deepStrictEqual(a, a.repeat(4));",
                  "err": {},
                  "uuid": "ab375c6b-12bc-430c-844e-2e675bdcafe0",
                  "parentUUID": "1eefde13-7b5f-49ba-8817-09eb89e7e4e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.repeat(), null);\na.repeat(100);\nassert_1.default.strictEqual(a.repeat(), 100);\na.repeat(null);\nassert_1.default.strictEqual(a.repeat(), null);",
                  "err": {},
                  "uuid": "67776ed6-53e5-4b5d-8c6a-1a71aba5f739",
                  "parentUUID": "1eefde13-7b5f-49ba-8817-09eb89e7e4e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.repeat(Infinity);\n}, /`repeat`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.repeat('hi');\n}, /`repeat`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.repeat(true);\n}, /`repeat`/);",
                  "err": {},
                  "uuid": "8804c330-f151-4752-b2e2-f64f72b13e6b",
                  "parentUUID": "1eefde13-7b5f-49ba-8817-09eb89e7e4e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 60\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('REPEAT:42') > -1);",
                  "err": {},
                  "uuid": "d1279945-871b-4fcf-8a93-513ce5602f11",
                  "parentUUID": "1eefde13-7b5f-49ba-8817-09eb89e7e4e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab375c6b-12bc-430c-844e-2e675bdcafe0",
                "67776ed6-53e5-4b5d-8c6a-1a71aba5f739",
                "8804c330-f151-4752-b2e2-f64f72b13e6b",
                "d1279945-871b-4fcf-8a93-513ce5602f11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "51e50123-f1d4-45a0-845b-93133eb41e87",
              "title": "interval()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm interval() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.interval(null));\nassert_1.default.deepStrictEqual(a, a.interval(60));",
                  "err": {},
                  "uuid": "0d0f7ef0-7da3-433b-a878-532fff21b332",
                  "parentUUID": "51e50123-f1d4-45a0-845b-93133eb41e87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm interval() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.interval(), null);\na.interval(30);\nassert_1.default.strictEqual(a.interval(), 30);\na.interval(null);\nassert_1.default.strictEqual(a.interval(), null);",
                  "err": {},
                  "uuid": "42b2434c-0493-4acc-92ff-8cf549f058ca",
                  "parentUUID": "51e50123-f1d4-45a0-845b-93133eb41e87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm interval() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.interval(Infinity);\n}, /`interval`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.interval('hi');\n}, /`interval`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.interval(true);\n}, /`interval`/);",
                  "err": {},
                  "uuid": "a6760668-a520-4d5e-97a3-8d2fd42ab865",
                  "parentUUID": "51e50123-f1d4-45a0-845b-93133eb41e87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm interval() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 90\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('DURATION:PT1M30S') > -1);",
                  "err": {},
                  "uuid": "2195ee97-23aa-4cd5-9e73-6371ea747efd",
                  "parentUUID": "51e50123-f1d4-45a0-845b-93133eb41e87",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d0f7ef0-7da3-433b-a878-532fff21b332",
                "42b2434c-0493-4acc-92ff-8cf549f058ca",
                "a6760668-a520-4d5e-97a3-8d2fd42ab865",
                "2195ee97-23aa-4cd5-9e73-6371ea747efd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a458e328-e399-4cfd-81de-55d394d00b0e",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.attach(null));\nassert_1.default.deepStrictEqual(a, a.attach('https://sebbo.net/beep.aud'));",
                  "err": {},
                  "uuid": "0f2b011c-46a4-4c03-aeef-df74a2ee950e",
                  "parentUUID": "a458e328-e399-4cfd-81de-55d394d00b0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t = { uri: 'https://example.com/alarm.aud', mime: 'audio/basic' };\nconst a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.attach(), null);\na.attach(t);\nassert_1.default.deepStrictEqual(a.attach(), t);\na.attach('https://www.example.com/beep.aud');\nassert_1.default.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach({\n    uri: 'https://www.example.com/beep.aud'\n});\nassert_1.default.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach(null);\nassert_1.default.strictEqual(a.attach(), null);",
                  "err": {},
                  "uuid": "1498ec92-e838-402a-84f7-3fe310559d96",
                  "parentUUID": "a458e328-e399-4cfd-81de-55d394d00b0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.attach({ mime: 'audio/basic' });\n}, /`attach.uri`/);",
                  "err": {},
                  "uuid": "08503662-4a34-4aa0-8c65-928a6d92986d",
                  "parentUUID": "a458e328-e399-4cfd-81de-55d394d00b0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.attach(Infinity);\n}, /`attachment`/);",
                  "err": {},
                  "uuid": "886b1c0f-dcce-4186-9b3a-12df1d089320",
                  "parentUUID": "a458e328-e399-4cfd-81de-55d394d00b0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.audio,\n    trigger: 300\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:Basso') > -1);\na.attach('https://example.com/beep.aud');\nassert_1.default.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud') > -1);\na.attach({\n    uri: 'https://example.com/beep.aud',\n    mime: 'audio/basic'\n});\nassert_1.default.ok(a.toString().indexOf('\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud') > -1);",
                  "err": {},
                  "uuid": "4aa53776-9371-4e4d-823e-f65f208ca3b4",
                  "parentUUID": "a458e328-e399-4cfd-81de-55d394d00b0e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f2b011c-46a4-4c03-aeef-df74a2ee950e",
                "1498ec92-e838-402a-84f7-3fe310559d96",
                "08503662-4a34-4aa0-8c65-928a6d92986d",
                "886b1c0f-dcce-4186-9b3a-12df1d089320",
                "4aa53776-9371-4e4d-823e-f65f208ca3b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a7f4961f-63d6-4ffd-a084-4949711e9fae",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.description(null));\nassert_1.default.deepStrictEqual(a, a.description('Hey Ho!'));",
                  "err": {},
                  "uuid": "52df0723-b7fa-4934-a0eb-6816e837dd9c",
                  "parentUUID": "a7f4961f-63d6-4ffd-a084-4949711e9fae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a.description(), null);\na.description('blablabla');\nassert_1.default.deepStrictEqual(a.description(), 'blablabla');\na.description(null);\nassert_1.default.deepStrictEqual(a.description(), null);",
                  "err": {},
                  "uuid": "88a7612d-2986-491e-8a7c-77c84c4f184c",
                  "parentUUID": "a7f4961f-63d6-4ffd-a084-4949711e9fae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    description: 'Huibuh!'\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Huibuh') > -1);",
                  "err": {},
                  "uuid": "caf982c1-fd17-46d2-a8b9-4e965ac24c92",
                  "parentUUID": "a7f4961f-63d6-4ffd-a084-4949711e9fae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300\n}, new event_1.default({\n    summary: 'Example Event'\n}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Example Event') > -1);",
                  "err": {},
                  "uuid": "3cc44d6c-5d16-4046-8c9b-d781e6fd57d5",
                  "parentUUID": "a7f4961f-63d6-4ffd-a084-4949711e9fae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52df0723-b7fa-4934-a0eb-6816e837dd9c",
                "88a7612d-2986-491e-8a7c-77c84c4f184c",
                "caf982c1-fd17-46d2-a8b9-4e965ac24c92",
                "3cc44d6c-5d16-4046-8c9b-d781e6fd57d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a636c10-267b-4514-a7f1-5715c7b970e6",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "a273bb36-710e-4495-9691-b24e0df24ef1",
                  "parentUUID": "3a636c10-267b-4514-a7f1-5715c7b970e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a273bb36-710e-4495-9691-b24e0df24ef1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f083234e-fe6c-4d4a-bfef-2817add85ffe",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.type(alarm_1.ICalAlarmType.display);\na.trigger(120);\nassert_1.default.deepStrictEqual(a.toJSON(), {\n    attach: null,\n    description: null,\n    interval: null,\n    repeat: null,\n    trigger: 120,\n    type: 'display',\n    x: []\n});",
                  "err": {},
                  "uuid": "32622d87-3ab8-44ac-b036-3a78ab92e524",
                  "parentUUID": "f083234e-fe6c-4d4a-bfef-2817add85ffe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Alarm toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nnew alarm_1.default(a.toJSON(), new event_1.default({}, new calendar_1.default()));",
                  "err": {},
                  "uuid": "b1daae2c-d22a-4d9f-bbc9-bbce1469e728",
                  "parentUUID": "f083234e-fe6c-4d4a-bfef-2817add85ffe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32622d87-3ab8-44ac-b036-3a78ab92e524",
                "b1daae2c-d22a-4d9f-bbc9-bbce1469e728"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5adac39c-5403-4d2c-8d5e-a540785d7b7c",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without type",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({ trigger: 300 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /`type`/);",
                  "err": {},
                  "uuid": "171d2d84-a860-431c-adcf-be990c5d74fc",
                  "parentUUID": "5adac39c-5403-4d2c-8d5e-a540785d7b7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without trigger",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without trigger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "11f1055f-1628-4ec8-a708-c18bec3ae69b",
                  "parentUUID": "5adac39c-5403-4d2c-8d5e-a540785d7b7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, trigger: 300, repeat: 4 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /for `interval`/);",
                  "err": {},
                  "uuid": "4cc1155e-307d-474d-ae79-9f8ea3cf6e2c",
                  "parentUUID": "5adac39c-5403-4d2c-8d5e-a540785d7b7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    interval: 60\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /for `repeat`/);",
                  "err": {},
                  "uuid": "c7181d4e-7702-48af-9861-87af101fe2e9",
                  "parentUUID": "5adac39c-5403-4d2c-8d5e-a540785d7b7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "171d2d84-a860-431c-adcf-be990c5d74fc",
                "11f1055f-1628-4ec8-a708-c18bec3ae69b",
                "4cc1155e-307d-474d-ae79-9f8ea3cf6e2c",
                "c7181d4e-7702-48af-9861-87af101fe2e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4e394f03-bf77-4f37-a2af-b548216b67f8",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "df6dc79c-d9d9-4a4b-b7d8-6cee7be8c15d",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Attendee constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    name: 'John Doe',\n    email: 'john@example.org',\n    mailto: 'john+calendar@example.org',\n    sentBy: null,\n    status: attendee_1.ICalAttendeeStatus.ACCEPTED,\n    role: attendee_1.ICalAttendeeRole.REQ,\n    rsvp: false,\n    type: attendee_1.ICalAttendeeType.INDIVIDUAL,\n    delegatedTo: null,\n    delegatedFrom: null,\n    x: []\n};\nconst event = new attendee_1.default(data, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "4babe74a-8e23-4580-815e-a0ab3869502c",
                  "parentUUID": "df6dc79c-d9d9-4a4b-b7d8-6cee7be8c15d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    // @ts-ignore\n    new attendee_1.default({ email: 'foo@bar.com' });\n}, /`event`/);",
                  "err": {},
                  "uuid": "dffe6878-bcde-4a13-b58f-3cfd14bd89e9",
                  "parentUUID": "df6dc79c-d9d9-4a4b-b7d8-6cee7be8c15d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4babe74a-8e23-4580-815e-a0ab3869502c",
                "dffe6878-bcde-4a13-b58f-3cfd14bd89e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3fff3987-2600-4cab-8cbe-7dcb4ae48130",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.name(), null);\na.name('Sebastian');\nassert_1.default.strictEqual(a.name(), 'Sebastian');",
                  "err": {},
                  "uuid": "51bdae1b-05ee-4da5-b74d-d2bd4b2355bd",
                  "parentUUID": "3fff3987-2600-4cab-8cbe-7dcb4ae48130",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.name(null));\nassert_1.default.deepStrictEqual(a, a.name('Sebastian'));",
                  "err": {},
                  "uuid": "f38bbbc1-4ee8-4323-9aad-82182c331d25",
                  "parentUUID": "3fff3987-2600-4cab-8cbe-7dcb4ae48130",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\na.name('Sebastian');\nassert_1.default.strictEqual(a.name(), 'Sebastian');\na.name(null);\nassert_1.default.strictEqual(a.name(), null);",
                  "err": {},
                  "uuid": "2abf0208-ef58-4b9d-8091-9b4e22559787",
                  "parentUUID": "3fff3987-2600-4cab-8cbe-7dcb4ae48130",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51bdae1b-05ee-4da5-b74d-d2bd4b2355bd",
                "f38bbbc1-4ee8-4323-9aad-82182c331d25",
                "2abf0208-ef58-4b9d-8091-9b4e22559787"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e88e859-6a80-4ca0-8515-e5bf02ae9c0f",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default())).email('foo@example.com');\nassert_1.default.strictEqual(a.email(), 'foo@example.com');",
                  "err": {},
                  "uuid": "fe689a3e-3d8e-4929-ab4a-e4e3a420396e",
                  "parentUUID": "3e88e859-6a80-4ca0-8515-e5bf02ae9c0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.email('foo@example.com'));",
                  "err": {},
                  "uuid": "1e15c28d-d0f0-46e9-9589-ceb35cce3c19",
                  "parentUUID": "3e88e859-6a80-4ca0-8515-e5bf02ae9c0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('mail@example.com') > -1);",
                  "err": {},
                  "uuid": "f8de712f-7c6d-442e-b104-10679d7c70a4",
                  "parentUUID": "3e88e859-6a80-4ca0-8515-e5bf02ae9c0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe689a3e-3d8e-4929-ab4a-e4e3a420396e",
                "1e15c28d-d0f0-46e9-9589-ceb35cce3c19",
                "f8de712f-7c6d-442e-b104-10679d7c70a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a557a666-10c9-46f6-98bf-8bbc9a95476e",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.mailto(), null);\na.mailto('foo@example.com');\nassert_1.default.strictEqual(a.mailto(), 'foo@example.com');",
                  "err": {},
                  "uuid": "cb4f15c1-f594-4d18-a45b-35fe40c06a71",
                  "parentUUID": "a557a666-10c9-46f6-98bf-8bbc9a95476e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.mailto(null));\nassert_1.default.deepStrictEqual(a, a.mailto('foo@example.com'));",
                  "err": {},
                  "uuid": "cd30f0fb-a3f8-40a5-ad04-f7a5358c8611",
                  "parentUUID": "a557a666-10c9-46f6-98bf-8bbc9a95476e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com' }, new event_1.default({}, new calendar_1.default()));\na.mailto('mail2@example2.com');\nassert_1.default.ok(a.toString().indexOf('EMAIL=mail@example.com') > -1 &&\n    a.toString().indexOf('MAILTO:mail2@example2.com') > -1);",
                  "err": {},
                  "uuid": "810c1e1b-b4f6-4de4-94ca-78caad34b4ee",
                  "parentUUID": "a557a666-10c9-46f6-98bf-8bbc9a95476e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb4f15c1-f594-4d18-a45b-35fe40c06a71",
                "cd30f0fb-a3f8-40a5-ad04-f7a5358c8611",
                "810c1e1b-b4f6-4de4-94ca-78caad34b4ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ee2a34c2-42a4-42ed-9fd1-15e1fc60919c",
              "title": "sentBy()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee sentBy() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default())).sentBy('foo@example.com');\nassert_1.default.strictEqual(a.sentBy(), 'foo@example.com');",
                  "err": {},
                  "uuid": "bc91ac5a-b972-425e-a0d2-fc2a4f4a5f3a",
                  "parentUUID": "ee2a34c2-42a4-42ed-9fd1-15e1fc60919c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee sentBy() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.sentBy('foo@example.com'));",
                  "err": {},
                  "uuid": "e9844c6f-2627-4ac2-863b-868f9a2ec724",
                  "parentUUID": "ee2a34c2-42a4-42ed-9fd1-15e1fc60919c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee sentBy() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'foo@example.com', sentBy: 'bar@example.com' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().includes('bar@example.com'));",
                  "err": {},
                  "uuid": "de945cf5-791b-4ced-af28-6281ba492131",
                  "parentUUID": "ee2a34c2-42a4-42ed-9fd1-15e1fc60919c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc91ac5a-b972-425e-a0d2-fc2a4f4a5f3a",
                "e9844c6f-2627-4ac2-863b-868f9a2ec724",
                "de945cf5-791b-4ced-af28-6281ba492131"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "266c39ee-6b3c-43ec-b9b6-ab1faebcb953",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.role(attendee_1.ICalAttendeeRole.REQ));",
                  "err": {},
                  "uuid": "223f1ef6-9259-4b19-8ec6-ac75d5a2e276",
                  "parentUUID": "266c39ee-6b3c-43ec-b9b6-ab1faebcb953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default())).role(attendee_1.ICalAttendeeRole.REQ);\nassert_1.default.strictEqual(a.role(), 'REQ-PARTICIPANT');",
                  "err": {},
                  "uuid": "45837322-853d-48d0-8358-3483931eb1ef",
                  "parentUUID": "266c39ee-6b3c-43ec-b9b6-ab1faebcb953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.role('');\n}, /Input must be one of the following: CHAIR, REQ-PARTICIPANT, OPT-PARTICIPANT, NON-PARTICIPANT/);",
                  "err": {},
                  "uuid": "f5eaab27-8326-4daf-b910-5e319efbc200",
                  "parentUUID": "266c39ee-6b3c-43ec-b9b6-ab1faebcb953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.role('COOKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "633f02c2-c894-411f-ad53-ed8fc81f2dda",
                  "parentUUID": "266c39ee-6b3c-43ec-b9b6-ab1faebcb953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mail@example.com',\n    role: attendee_1.ICalAttendeeRole.NON\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('NON-PARTICIPANT') > -1);",
                  "err": {},
                  "uuid": "af67ef1e-0817-41d0-a156-fbd30690eb92",
                  "parentUUID": "266c39ee-6b3c-43ec-b9b6-ab1faebcb953",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "223f1ef6-9259-4b19-8ec6-ac75d5a2e276",
                "45837322-853d-48d0-8358-3483931eb1ef",
                "f5eaab27-8326-4daf-b910-5e319efbc200",
                "633f02c2-c894-411f-ad53-ed8fc81f2dda",
                "af67ef1e-0817-41d0-a156-fbd30690eb92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "316a41d4-28f9-4d52-b76e-aad406ca6a53",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.rsvp(null));\nassert_1.default.deepStrictEqual(a, a.rsvp(true));",
                  "err": {},
                  "uuid": "9635985a-8237-4ac6-94eb-035d01b9c59a",
                  "parentUUID": "316a41d4-28f9-4d52-b76e-aad406ca6a53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\na.rsvp(true);\nassert_1.default.strictEqual(a.rsvp(), true);\na.rsvp(false);\nassert_1.default.strictEqual(a.rsvp(), false);",
                  "err": {},
                  "uuid": "f964ef92-5523-4bd2-9403-17b2decd1700",
                  "parentUUID": "316a41d4-28f9-4d52-b76e-aad406ca6a53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.rsvp(), null);\na.rsvp(false);\nassert_1.default.strictEqual(a.rsvp(), false);\na.rsvp(null);\nassert_1.default.strictEqual(a.rsvp(), null);",
                  "err": {},
                  "uuid": "d861b42e-d60f-4938-929c-bbf6367f6b35",
                  "parentUUID": "316a41d4-28f9-4d52-b76e-aad406ca6a53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mail@example.com',\n    rsvp: true\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf(';RSVP=TRUE') > -1);",
                  "err": {},
                  "uuid": "6ec17492-9708-4bf7-911a-bd7d9daa48ff",
                  "parentUUID": "316a41d4-28f9-4d52-b76e-aad406ca6a53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9635985a-8237-4ac6-94eb-035d01b9c59a",
                "f964ef92-5523-4bd2-9403-17b2decd1700",
                "d861b42e-d60f-4938-929c-bbf6367f6b35",
                "6ec17492-9708-4bf7-911a-bd7d9daa48ff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eabd6e2f-7969-422c-aaeb-5a1d65050cd9",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.status(null));\nassert_1.default.deepStrictEqual(a, a.status(attendee_1.ICalAttendeeStatus.ACCEPTED));",
                  "err": {},
                  "uuid": "415fefd7-c88e-4b59-bc4b-854b47a15f63",
                  "parentUUID": "eabd6e2f-7969-422c-aaeb-5a1d65050cd9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.status(), null);\na.status(attendee_1.ICalAttendeeStatus.ACCEPTED);\nassert_1.default.strictEqual(a.status(), 'ACCEPTED');\na.status(null);\nassert_1.default.strictEqual(a.status(), null);",
                  "err": {},
                  "uuid": "b61adccc-b8e1-427d-ac65-cf481735e880",
                  "parentUUID": "eabd6e2f-7969-422c-aaeb-5a1d65050cd9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.status('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "0fe09c44-e74f-4dd0-8bb3-0367aa965466",
                  "parentUUID": "eabd6e2f-7969-422c-aaeb-5a1d65050cd9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com', status: attendee_1.ICalAttendeeStatus.DECLINED }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('DECLINED') > -1);",
                  "err": {},
                  "uuid": "8e05fe1f-f0ca-4a1b-bbc9-4500e255f43a",
                  "parentUUID": "eabd6e2f-7969-422c-aaeb-5a1d65050cd9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com', status: attendee_1.ICalAttendeeStatus.NEEDSACTION }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('NEEDS-ACTION') > -1);",
                  "err": {},
                  "uuid": "5f7babe1-b58f-4581-a572-8e8c0161c39f",
                  "parentUUID": "eabd6e2f-7969-422c-aaeb-5a1d65050cd9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "415fefd7-c88e-4b59-bc4b-854b47a15f63",
                "b61adccc-b8e1-427d-ac65-cf481735e880",
                "0fe09c44-e74f-4dd0-8bb3-0367aa965466",
                "8e05fe1f-f0ca-4a1b-bbc9-4500e255f43a",
                "5f7babe1-b58f-4581-a572-8e8c0161c39f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5660fb18-4872-42d0-bb59-a0f4d3ba6845",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a.type(null), a);\nassert_1.default.deepStrictEqual(a.type(attendee_1.ICalAttendeeType.INDIVIDUAL), a);",
                  "err": {},
                  "uuid": "deaacfec-f4c8-40fb-9aa4-3d8765c1025e",
                  "parentUUID": "5660fb18-4872-42d0-bb59-a0f4d3ba6845",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.type(), null);\na.type(attendee_1.ICalAttendeeType.ROOM);\nassert_1.default.strictEqual(a.type(), 'ROOM');\na.type(null);\nassert_1.default.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "dec611dd-b6fb-4980-911b-ee4ea5b11483",
                  "parentUUID": "5660fb18-4872-42d0-bb59-a0f4d3ba6845",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.type('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "132b2cc6-9ef8-45cb-8b88-e71793a3224f",
                  "parentUUID": "5660fb18-4872-42d0-bb59-a0f4d3ba6845",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mailing-list@example.com',\n    type: attendee_1.ICalAttendeeType.GROUP\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('GROUP') > -1);",
                  "err": {},
                  "uuid": "1a3c949c-c61c-4fdb-8005-14d3da32eac8",
                  "parentUUID": "5660fb18-4872-42d0-bb59-a0f4d3ba6845",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "deaacfec-f4c8-40fb-9aa4-3d8765c1025e",
                "dec611dd-b6fb-4980-911b-ee4ea5b11483",
                "132b2cc6-9ef8-45cb-8b88-e71793a3224f",
                "1a3c949c-c61c-4fdb-8005-14d3da32eac8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dab93c26-9bcb-4f1f-80d1-2b629824ef82",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.delegatedTo(null));\nassert_1.default.deepStrictEqual(a, a.delegatedTo('foo@example.com'));",
                  "err": {},
                  "uuid": "972ae045-98e7-4b29-9428-a3bd075bd7a9",
                  "parentUUID": "dab93c26-9bcb-4f1f-80d1-2b629824ef82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.delegatedTo(), null);\na.delegatedTo('foo@example.com');\nconst result = a.delegatedTo();\nassert_1.default.ok(result);\nassert_1.default.strictEqual(result.email(), 'foo@example.com');\na.delegatedTo(null);\nassert_1.default.strictEqual(a.delegatedTo(), null);",
                  "err": {},
                  "uuid": "b00da58a-2238-4ba8-917a-b6254b08fbae",
                  "parentUUID": "dab93c26-9bcb-4f1f-80d1-2b629824ef82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mail@example.com',\n    delegatedTo: 'foo@example.com'\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('foo@example') > -1);",
                  "err": {},
                  "uuid": "c4c6c930-b635-41f5-bdb6-a875a52a1db5",
                  "parentUUID": "dab93c26-9bcb-4f1f-80d1-2b629824ef82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "972ae045-98e7-4b29-9428-a3bd075bd7a9",
                "b00da58a-2238-4ba8-917a-b6254b08fbae",
                "c4c6c930-b635-41f5-bdb6-a875a52a1db5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "797617ad-45a0-41a3-a5e3-fd02d0d0d69f",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.delegatedFrom(null));\nassert_1.default.deepStrictEqual(a, a.delegatedFrom('foo@example.com'));",
                  "err": {},
                  "uuid": "a7711f32-fc52-4c00-8ff3-d0b50ad6263d",
                  "parentUUID": "797617ad-45a0-41a3-a5e3-fd02d0d0d69f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.delegatedFrom(), null);\na.delegatedFrom('foo@example.com');\nconst result = a.delegatedFrom();\nassert_1.default.ok(result);\nassert_1.default.strictEqual(result.email(), 'foo@example.com');\na.delegatedFrom(null);\nassert_1.default.strictEqual(a.delegatedFrom(), null);",
                  "err": {},
                  "uuid": "e21d6585-3405-41e8-b0d9-5b1ce09ada43",
                  "parentUUID": "797617ad-45a0-41a3-a5e3-fd02d0d0d69f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mail@example.com',\n    delegatedFrom: 'foo@example.com'\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('foo@example.com') > -1);",
                  "err": {},
                  "uuid": "a6ec25a7-c4d5-4cee-ae72-8feb76353232",
                  "parentUUID": "797617ad-45a0-41a3-a5e3-fd02d0d0d69f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7711f32-fc52-4c00-8ff3-d0b50ad6263d",
                "e21d6585-3405-41e8-b0d9-5b1ce09ada43",
                "a6ec25a7-c4d5-4cee-ae72-8feb76353232"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "461a4bbe-5058-4bb4-a927-5dfc56fb090a",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.delegatesTo({}) instanceof attendee_1.default);",
                  "err": {},
                  "uuid": "ad4e4e08-b60e-4d06-b128-b7fcb00d7b5d",
                  "parentUUID": "461a4bbe-5058-4bb4-a927-5dfc56fb090a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = new attendee_1.default({ name: 'Muh' }, event);\nassert_1.default.deepStrictEqual(new attendee_1.default({}, event).delegatesTo(attendee), attendee);",
                  "err": {},
                  "uuid": "0e158597-a642-43a4-937a-daebbb16dd78",
                  "parentUUID": "461a4bbe-5058-4bb4-a927-5dfc56fb090a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee = new attendee_1.default({ name: 'Zac' }, new event_1.default({}, new calendar_1.default()))\n    .delegatesTo({ name: 'Cody' });\nassert_1.default.strictEqual(attendee.name(), 'Cody');",
                  "err": {},
                  "uuid": "0154fb45-0f92-4cb4-95ea-3b8fe4940fff",
                  "parentUUID": "461a4bbe-5058-4bb4-a927-5dfc56fb090a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad4e4e08-b60e-4d06-b128-b7fcb00d7b5d",
                "0e158597-a642-43a4-937a-daebbb16dd78",
                "0154fb45-0f92-4cb4-95ea-3b8fe4940fff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ab12d5dc-a4a3-4f6f-b9e9-ce9b00c7351d",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.delegatesFrom({}) instanceof attendee_1.default);",
                  "err": {},
                  "uuid": "3a48270d-d4d8-4ff6-97db-6dd5bbe6e6b1",
                  "parentUUID": "ab12d5dc-a4a3-4f6f-b9e9-ce9b00c7351d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = new attendee_1.default({ name: 'Muh' }, event);\nassert_1.default.deepStrictEqual(new attendee_1.default({}, event).delegatesFrom(attendee), attendee);",
                  "err": {},
                  "uuid": "789d5762-ffc5-4cc7-b4a1-a99bc58b5920",
                  "parentUUID": "ab12d5dc-a4a3-4f6f-b9e9-ce9b00c7351d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ name: 'Zac' }, new event_1.default({}, new calendar_1.default())).delegatesFrom({ name: 'Cody' });\nassert_1.default.strictEqual(a.name(), 'Cody');",
                  "err": {},
                  "uuid": "6b03ed02-7752-46e2-84b8-64182773044a",
                  "parentUUID": "ab12d5dc-a4a3-4f6f-b9e9-ce9b00c7351d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a48270d-d4d8-4ff6-97db-6dd5bbe6e6b1",
                "789d5762-ffc5-4cc7-b4a1-a99bc58b5920",
                "6b03ed02-7752-46e2-84b8-64182773044a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "731cbca4-85b4-4f6c-ac2c-8c43e36481b0",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works as expected",
                  "fullTitle": "ical-generator Attendee x() works as expected",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'foo@example.org' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.x('X-NUM-GUESTS', '5'));\nassert_1.default.ok(a.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;X-NUM-GUESTS=5:MAILTO:foo@example.org'));",
                  "err": {},
                  "uuid": "0d82c240-59bb-425a-9cf0-7fd54a96822f",
                  "parentUUID": "731cbca4-85b4-4f6c-ac2c-8c43e36481b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d82c240-59bb-425a-9cf0-7fd54a96822f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "42e2f191-5e8a-4e49-b9e1-b871b4c66d4a",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\na.name('Max Mustermann');\na.delegatesTo('Moritz <moritz@example.com>');\nassert_1.default.deepStrictEqual(a.toJSON(), {\n    delegatedFrom: null,\n    delegatedTo: 'moritz@example.com',\n    email: null,\n    mailto: null,\n    sentBy: null,\n    name: 'Max Mustermann',\n    role: 'REQ-PARTICIPANT',\n    rsvp: null,\n    status: 'DELEGATED',\n    type: null,\n    x: []\n});",
                  "err": {},
                  "uuid": "5403836f-42af-4bf7-bbe4-d2e6c3b0ab59",
                  "parentUUID": "42e2f191-5e8a-4e49-b9e1-b871b4c66d4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Attendee toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nnew attendee_1.default(a.toJSON(), new event_1.default({}, new calendar_1.default()));",
                  "err": {},
                  "uuid": "97c34d51-fb23-4b6b-9a44-076fc437cd7d",
                  "parentUUID": "42e2f191-5e8a-4e49-b9e1-b871b4c66d4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5403836f-42af-4bf7-bbe4-d2e6c3b0ab59",
                "97c34d51-fb23-4b6b-9a44-076fc437cd7d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "09209530-dacd-4696-ac52-0588ca72c921",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee generate() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ name: 'Testuser' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /`email`/);",
                  "err": {},
                  "uuid": "39795fe9-a304-4197-86ec-1156e84d1ed6",
                  "parentUUID": "09209530-dacd-4696-ac52-0588ca72c921",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39795fe9-a304-4197-86ec-1156e84d1ed6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0e742666-0e93-433d-a531-1c1517ce66e1",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bd8c4522-1941-46e6-9c98-027eb3da6a34",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    prodId: '//sebbo.net//ical-generator//EN',\n    method: calendar_1.ICalCalendarMethod.PUBLISH,\n    name: 'Test Calendar',\n    description: 'Hi, I am the description.',\n    timezone: null,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    source: 'http://example.com/my/original_source.ical',\n    scale: null,\n    ttl: null,\n    events: [],\n    x: []\n};\nconst cal = new calendar_1.default(data);\nassert_1.default.deepStrictEqual(cal.toJSON(), data);",
                  "err": {},
                  "uuid": "da7f4a12-4709-4435-a2f9-65cf7b984374",
                  "parentUUID": "bd8c4522-1941-46e6-9c98-027eb3da6a34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da7f4a12-4709-4435-a2f9-65cf7b984374"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9f0f2f6c-92b6-4196-b449-5bc72131d600",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.prodId('//loremipsum.de//ical-tests//EN');\nassert_1.default.strictEqual(cal.prodId(), '//loremipsum.de//ical-tests//EN');",
                  "err": {},
                  "uuid": "8a6f3049-427b-4406-b2f5-f72c215d9179",
                  "parentUUID": "9f0f2f6c-92b6-4196-b449-5bc72131d600",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.prodId('//loremipsum.de//ical-tests//EN'));",
                  "err": {},
                  "uuid": "9c928d68-a62c-46f2-a87e-69803a2d3dfb",
                  "parentUUID": "9f0f2f6c-92b6-4196-b449-5bc72131d600",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformed",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when string misformed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    cal.prodId('enemenemuh!');\n}, /`prodId`/);",
                  "err": {},
                  "uuid": "cdf61133-a9cf-4e46-99e6-39d29ddcb7dc",
                  "parentUUID": "9f0f2f6c-92b6-4196-b449-5bc72131d600",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    cal.prodId(256);\n}, /`prodid`/);",
                  "err": {},
                  "uuid": "754c5575-4589-4b3f-a44c-7583f22bac60",
                  "parentUUID": "9f0f2f6c-92b6-4196-b449-5bc72131d600",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        product: 'ical-tests'\n    });\n}, /`prodid\\.company`/);",
                  "err": {},
                  "uuid": "31f1eec1-3498-40cd-979d-4bedf6266143",
                  "parentUUID": "9f0f2f6c-92b6-4196-b449-5bc72131d600",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        company: 'sebbo.net'\n    });\n}, /`prodid\\.product`/);",
                  "err": {},
                  "uuid": "5e64ed20-ddd8-4f8a-9aa5-e19bf60eb65e",
                  "parentUUID": "9f0f2f6c-92b6-4196-b449-5bc72131d600",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests'\n});\nassert_1.default.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//EN');",
                  "err": {},
                  "uuid": "4169da5b-a2f4-4a46-98f6-324f1c01a284",
                  "parentUUID": "9f0f2f6c-92b6-4196-b449-5bc72131d600",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests',\n    language: 'DE'\n});\nassert_1.default.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//DE');",
                  "err": {},
                  "uuid": "ca2c0b1b-0829-447d-bab0-010ddf56546b",
                  "parentUUID": "9f0f2f6c-92b6-4196-b449-5bc72131d600",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a6f3049-427b-4406-b2f5-f72c215d9179",
                "9c928d68-a62c-46f2-a87e-69803a2d3dfb",
                "cdf61133-a9cf-4e46-99e6-39d29ddcb7dc",
                "754c5575-4589-4b3f-a44c-7583f22bac60",
                "31f1eec1-3498-40cd-979d-4bedf6266143",
                "5e64ed20-ddd8-4f8a-9aa5-e19bf60eb65e",
                "4169da5b-a2f4-4a46-98f6-324f1c01a284",
                "ca2c0b1b-0829-447d-bab0-010ddf56546b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "44acaca5-4dcf-4289-88af-daf62f127213",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default();\nassert_1.default.deepStrictEqual(c, c.method(null), 'method(null)');\nassert_1.default.deepStrictEqual(c, c.method(calendar_1.ICalCalendarMethod.PUBLISH), 'method(enum)');",
                  "err": {},
                  "uuid": "d6fc77d4-ec41-4822-a651-6efeb0dfa2c6",
                  "parentUUID": "44acaca5-4dcf-4289-88af-daf62f127213",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default();\nassert_1.default.strictEqual(c.method(), null);\nc.method(null);\nassert_1.default.strictEqual(c.method(), null);\nc.method(calendar_1.ICalCalendarMethod.PUBLISH);\nassert_1.default.strictEqual(c.method(), 'PUBLISH');\nc.method(null);\nassert_1.default.strictEqual(c.method(), null);",
                  "err": {},
                  "uuid": "ebed18fc-d030-4aab-b1db-a83972c8bbe0",
                  "parentUUID": "44acaca5-4dcf-4289-88af-daf62f127213",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    c.method('KICK ASS');\n}, /Input must be one of the following: PUBLISH, REQUEST, REPLY, ADD, CANCEL, REFRESH, COUNTER, DECLINECOUNTER/);",
                  "err": {},
                  "uuid": "8db12d90-964b-4c6b-8a4a-771b4efef2cb",
                  "parentUUID": "44acaca5-4dcf-4289-88af-daf62f127213",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default({ method: calendar_1.ICalCalendarMethod.PUBLISH });\nassert_1.default.strictEqual(c.method(), 'PUBLISH');\nc.method(calendar_1.ICalCalendarMethod.ADD);\nassert_1.default.strictEqual(c.method(), 'ADD');",
                  "err": {},
                  "uuid": "8a964899-c22b-46c7-aecc-4285ee34aecd",
                  "parentUUID": "44acaca5-4dcf-4289-88af-daf62f127213",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6fc77d4-ec41-4822-a651-6efeb0dfa2c6",
                "ebed18fc-d030-4aab-b1db-a83972c8bbe0",
                "8db12d90-964b-4c6b-8a4a-771b4efef2cb",
                "8a964899-c22b-46c7-aecc-4285ee34aecd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "08330510-f58e-4c1b-9769-7e93d2c2d069",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.name(null));\nassert_1.default.deepStrictEqual(cal, cal.name('Testevents'));",
                  "err": {},
                  "uuid": "a5f0619e-8f7f-465d-b951-6c70529d3190",
                  "parentUUID": "08330510-f58e-4c1b-9769-7e93d2c2d069",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.name(), null);\ncal.name('Testevents');\nassert_1.default.strictEqual(cal.name(), 'Testevents');\ncal.name(null);\nassert_1.default.strictEqual(cal.name(), null);",
                  "err": {},
                  "uuid": "637db523-4208-42a4-8734-1f858656d4ad",
                  "parentUUID": "08330510-f58e-4c1b-9769-7e93d2c2d069",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().name('Testevents');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert_1.default.strictEqual(cal.name(), 'Testevents');",
                  "err": {},
                  "uuid": "d6d0f470-9aa4-4fed-be20-ecd7c40bb2fa",
                  "parentUUID": "08330510-f58e-4c1b-9769-7e93d2c2d069",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5f0619e-8f7f-465d-b951-6c70529d3190",
                "637db523-4208-42a4-8734-1f858656d4ad",
                "d6d0f470-9aa4-4fed-be20-ecd7c40bb2fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "70cfba01-b735-4185-8680-06dcbf174dd7",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.description(null));\nassert_1.default.deepStrictEqual(cal, cal.description('Testbeschreibung'));",
                  "err": {},
                  "uuid": "84ce58fa-26a7-4b59-9f47-38d19835b98d",
                  "parentUUID": "70cfba01-b735-4185-8680-06dcbf174dd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.description(), null);\ncal.description('Testbeschreibung');\nassert_1.default.strictEqual(cal.description(), 'Testbeschreibung');\ncal.description(null);\nassert_1.default.strictEqual(cal.description(), null);",
                  "err": {},
                  "uuid": "7d784356-6c2f-4820-b0b5-f391b984c521",
                  "parentUUID": "70cfba01-b735-4185-8680-06dcbf174dd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().description('Testbeschreibung');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.description(), 'Testbeschreibung');",
                  "err": {},
                  "uuid": "49c3b8a5-ba07-414f-95f6-3a637fbacc22",
                  "parentUUID": "70cfba01-b735-4185-8680-06dcbf174dd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84ce58fa-26a7-4b59-9f47-38d19835b98d",
                "7d784356-6c2f-4820-b0b5-f391b984c521",
                "49c3b8a5-ba07-414f-95f6-3a637fbacc22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c572bfc4-7f6d-4da0-9b3b-030f2655a9e5",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.timezone('Europe/Berlin'));\nassert_1.default.deepStrictEqual(cal, cal.timezone(null));\nassert_1.default.deepStrictEqual(cal, cal.timezone({\n    name: 'Europe/Berlin',\n    generator: ical_timezones_1.getVtimezoneComponent\n}));",
                  "err": {},
                  "uuid": "a7a58f67-38d7-4992-b0de-2653d24ab85a",
                  "parentUUID": "c572bfc4-7f6d-4da0-9b3b-030f2655a9e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().timezone('Europe/Berlin');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert_1.default.strictEqual(cal.timezone(), null);\ncal.timezone({ name: 'Europe/Berlin' });\nassert_1.default.strictEqual(cal.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "b6ab4929-c847-46ab-a777-91924f80a903",
                  "parentUUID": "c572bfc4-7f6d-4da0-9b3b-030f2655a9e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Calendar timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().timezone('Europe/Berlin');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone('UTC');\nassert_1.default.strictEqual(cal.timezone(), null);",
                  "err": {},
                  "uuid": "110751e1-40f6-4f49-aed5-7e94830ae37b",
                  "parentUUID": "c572bfc4-7f6d-4da0-9b3b-030f2655a9e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7a58f67-38d7-4992-b0de-2653d24ab85a",
                "b6ab4929-c847-46ab-a777-91924f80a903",
                "110751e1-40f6-4f49-aed5-7e94830ae37b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5be54b03-5edb-496c-b14a-097479878a51",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal.ttl(60 * 60 * 24), cal);\nassert_1.default.deepStrictEqual(cal.ttl(moment_1.default.duration(2, 'days')), cal);\nassert_1.default.deepStrictEqual(cal.ttl(null), cal);",
                  "err": {},
                  "uuid": "5723d9c1-b929-4f56-ac8b-88b5cbf2b19a",
                  "parentUUID": "5be54b03-5edb-496c-b14a-097479878a51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.ttl(), null);\ncal.ttl(86400);\nassert_1.default.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "14cb537a-a4ae-430e-978f-5986e0470b38",
                  "parentUUID": "5be54b03-5edb-496c-b14a-097479878a51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().ttl(86400);\nassert_1.default.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "3ebbea40-0051-4a6c-8024-8c6c2c7c537e",
                  "parentUUID": "5be54b03-5edb-496c-b14a-097479878a51",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5723d9c1-b929-4f56-ac8b-88b5cbf2b19a",
                "14cb537a-a4ae-430e-978f-5986e0470b38",
                "3ebbea40-0051-4a6c-8024-8c6c2c7c537e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "70a6985f-7ad8-4f96-855d-6f2cb94fef02",
              "title": "source()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar source() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.source('http://example.com/my/original_source.ical'));",
                  "err": {},
                  "uuid": "303f8436-20f8-403a-90a9-467ead59097f",
                  "parentUUID": "70a6985f-7ad8-4f96-855d-6f2cb94fef02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar source() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.source(), null);\ncal.source('http://example.com/my/original_source.ical');\nassert_1.default.strictEqual(cal.source(), 'http://example.com/my/original_source.ical');\ncal.url(null);\nassert_1.default.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "f589de28-a76c-4afb-af13-8e33851fcde7",
                  "parentUUID": "70a6985f-7ad8-4f96-855d-6f2cb94fef02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "303f8436-20f8-403a-90a9-467ead59097f",
                "f589de28-a76c-4afb-af13-8e33851fcde7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "958f67d7-dba2-4f2c-9d1d-e665b1c9d82b",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.url('https://example.com/calendar.ical'));",
                  "err": {},
                  "uuid": "431772e3-7880-43f2-beb8-82f28ed9dfa9",
                  "parentUUID": "958f67d7-dba2-4f2c-9d1d-e665b1c9d82b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.url(), null);\ncal.url('https://example.com/calendar.ical');\nassert_1.default.strictEqual(cal.url(), 'https://example.com/calendar.ical');\ncal.url(null);\nassert_1.default.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "bbeac095-0884-4ba3-b859-f0d6d603bf5f",
                  "parentUUID": "958f67d7-dba2-4f2c-9d1d-e665b1c9d82b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().url('https://example.com/calendar.ical');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.url(), 'https://example.com/calendar.ical');",
                  "err": {},
                  "uuid": "a63a0a57-5f77-405d-9e20-56725612f187",
                  "parentUUID": "958f67d7-dba2-4f2c-9d1d-e665b1c9d82b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "431772e3-7880-43f2-beb8-82f28ed9dfa9",
                "bbeac095-0884-4ba3-b859-f0d6d603bf5f",
                "a63a0a57-5f77-405d-9e20-56725612f187"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "64808c08-2a84-4a98-9bdd-15d5bb476461",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.scale('gregorian'));",
                  "err": {},
                  "uuid": "977ab7fd-add2-49a0-9ac1-17de8b98e418",
                  "parentUUID": "64808c08-2a84-4a98-9bdd-15d5bb476461",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.scale(), null);\ncal.scale('GREGORIAN');\nassert_1.default.strictEqual(cal.scale(), 'GREGORIAN');\ncal.scale(null);\nassert_1.default.strictEqual(cal.scale(), null);",
                  "err": {},
                  "uuid": "cd01241f-4fda-49b4-be8b-da386bfa5aac",
                  "parentUUID": "64808c08-2a84-4a98-9bdd-15d5bb476461",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().scale('gregorian');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.scale(), 'GREGORIAN');",
                  "err": {},
                  "uuid": "6fda500c-f853-4077-a86e-6d4dd74bced3",
                  "parentUUID": "64808c08-2a84-4a98-9bdd-15d5bb476461",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "977ab7fd-add2-49a0-9ac1-17de8b98e418",
                "cd01241f-4fda-49b4-be8b-da386bfa5aac",
                "6fda500c-f853-4077-a86e-6d4dd74bced3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a1a8e72-df75-4c1e-9369-821c1800b0ff",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.ok(cal.createEvent({}) instanceof event_1.default);",
                  "err": {},
                  "uuid": "41382952-31d6-49b1-b923-8f4386d376bb",
                  "parentUUID": "1a1a8e72-df75-4c1e-9369-821c1800b0ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nconst event = cal.createEvent({ summary: 'Patch-Day' });\nassert_1.default.strictEqual(event.summary(), 'Patch-Day');",
                  "err": {},
                  "uuid": "9d928f29-308f-4700-be0d-3317e11c15dd",
                  "parentUUID": "1a1a8e72-df75-4c1e-9369-821c1800b0ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.doesNotThrow(function () {\n    new calendar_1.default().createEvent({\n        start: new Date(),\n        summary: 'Patch-Day'\n    });\n}, Error);",
                  "err": {},
                  "uuid": "26f809e3-4759-43fa-a507-d7e936a9f997",
                  "parentUUID": "1a1a8e72-df75-4c1e-9369-821c1800b0ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41382952-31d6-49b1-b923-8f4386d376bb",
                "9d928f29-308f-4700-be0d-3317e11c15dd",
                "26f809e3-4759-43fa-a507-d7e936a9f997"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "79a87c17-2587-4104-abbb-fe65dbd8aee1",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.events().length, 0);\nconst event = cal.createEvent({});\nassert_1.default.strictEqual(cal.events().length, 1);\nassert_1.default.deepStrictEqual(cal.events()[0], event);",
                  "err": {},
                  "uuid": "803b97f1-f5ec-4c5b-bc94-9a1041abaa47",
                  "parentUUID": "79a87c17-2587-4104-abbb-fe65dbd8aee1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.length(), 0);\nconst cal2 = cal.events([{ summary: 'Event A' }, { summary: 'Event B' }]);\nassert_1.default.strictEqual(cal.length(), 2);\nassert_1.default.deepStrictEqual(cal2, cal);",
                  "err": {},
                  "uuid": "d81f4436-f0b6-4cfa-9d6e-7f02d4c4b249",
                  "parentUUID": "79a87c17-2587-4104-abbb-fe65dbd8aee1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "803b97f1-f5ec-4c5b-bc94-9a1041abaa47",
                "d81f4436-f0b6-4cfa-9d6e-7f02d4c4b249"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ba772cbd-8247-4d6d-ab46-3816a5f90526",
              "title": "clear()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do the job",
                  "fullTitle": "ical-generator Calendar clear() should do the job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.createEvent({});\nassert_1.default.strictEqual(cal.events().length, 1);\nassert_1.default.deepStrictEqual(cal.clear(), cal);\nassert_1.default.strictEqual(cal.events().length, 0);",
                  "err": {},
                  "uuid": "c988590e-17b8-44ef-8d9c-1032fb8ea8b0",
                  "parentUUID": "ba772cbd-8247-4d6d-ab46-3816a5f90526",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c988590e-17b8-44ef-8d9c-1032fb8ea8b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "43a54bd2-40fc-44a9-82ec-feea89992ec4",
              "title": "save()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all public methods and save it",
                  "fullTitle": "ical-generator Calendar save() should return all public methods and save it",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = (0, path_1.join)(__dirname, 'save.ical');\nconst cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.save(file, function () {\n    assert_1.default.ok((0, fs_1.existsSync)(file));\n    (0, fs_1.unlinkSync)(file);\n    assert_1.default.deepStrictEqual(cal, cal.save(file, function () {\n        assert_1.default.ok((0, fs_1.existsSync)(file));\n        (0, fs_1.unlinkSync)(file);\n        done();\n    }));\n}));",
                  "err": {},
                  "uuid": "06919f5f-9cd3-456d-ad81-b1da122d4b4b",
                  "parentUUID": "43a54bd2-40fc-44a9-82ec-feea89992ec4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be usable with promises",
                  "fullTitle": "ical-generator Calendar save() should be usable with promises",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const file = (0, path_1.join)(__dirname, 'save.ical');\n    const cal = new calendar_1.default();\n    yield cal.save(file);\n    assert_1.default.ok((0, fs_1.existsSync)(file));\n    (0, fs_1.unlinkSync)(file);\n});",
                  "err": {},
                  "uuid": "25bc4ed4-fe66-4e2a-b6a1-c8497da23688",
                  "parentUUID": "43a54bd2-40fc-44a9-82ec-feea89992ec4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar save() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = (0, path_1.join)(__dirname, 'save.ical');\nconst cal = new calendar_1.default();\ncal.createEvent({});\nassert_1.default.throws(function () {\n    cal.save(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "4fbc1ec5-c9a5-441d-9601-5c1b256bc017",
                  "parentUUID": "43a54bd2-40fc-44a9-82ec-feea89992ec4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06919f5f-9cd3-456d-ad81-b1da122d4b4b",
                "25bc4ed4-fe66-4e2a-b6a1-c8497da23688",
                "4fbc1ec5-c9a5-441d-9601-5c1b256bc017"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1fac0ebd-0d89-4781-a221-3c4811fd9669",
              "title": "saveSync()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should save it",
                  "fullTitle": "ical-generator Calendar saveSync() should save it",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = (0, path_1.join)(__dirname, 'save_sync.ical');\nconst cal = new calendar_1.default();\ncal.saveSync(file);\nassert_1.default.ok((0, fs_1.existsSync)(file));\n(0, fs_1.unlinkSync)(file);\ncal.saveSync(file);\nassert_1.default.ok((0, fs_1.existsSync)(file));\n(0, fs_1.unlinkSync)(file);",
                  "err": {},
                  "uuid": "02130365-223d-43d7-a044-a041c3f0ebbc",
                  "parentUUID": "1fac0ebd-0d89-4781-a221-3c4811fd9669",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar saveSync() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = (0, path_1.join)(__dirname, 'save_sync.ical');\nconst cal = new calendar_1.default();\ncal.createEvent({});\nassert_1.default.throws(function () {\n    cal.saveSync(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "1b6e2c59-b46c-42c1-95c5-82b25b913727",
                  "parentUUID": "1fac0ebd-0d89-4781-a221-3c4811fd9669",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02130365-223d-43d7-a044-a041c3f0ebbc",
                "1b6e2c59-b46c-42c1-95c5-82b25b913727"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36a15db6-0a80-4d12-ac42-de6a9e0474ec",
              "title": "serve()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar serve() should work",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = new calendar_1.default();\n    cal.createEvent({\n        start: new Date(),\n        end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n        summary: 'HTTP Calendar Event'\n    });\n    const port = yield (0, portfinder_1.getPortPromise)();\n    return new Promise(done => {\n        const server = http.createServer((req, res) => {\n            cal.serve(res);\n        }).listen(port, function () {\n            function request(cb) {\n                // make request\n                const req = http.request({ port }, function (res) {\n                    let file = '';\n                    assert_1.default.strictEqual(res.headers['content-type'], 'text/calendar; charset=utf-8', 'Header: text/calendar; charset=utf-8');\n                    assert_1.default.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"calendar.ics\"', 'Content-Disposition');\n                    res.setEncoding('utf8');\n                    res.on('data', function (chunk) {\n                        file += chunk;\n                    });\n                    res.on('end', function () {\n                        assert_1.default.strictEqual(file, cal.toString());\n                        cb();\n                    });\n                });\n                req.on('error', function (err) {\n                    assert_1.default.fail(err);\n                });\n                req.end();\n            }\n            request(() => {\n                request(() => {\n                    server.close(() => done());\n                });\n            });\n        });\n    });\n});",
                  "err": {},
                  "uuid": "b86ae465-09ff-4d80-9595-f7e4870d5a0d",
                  "parentUUID": "36a15db6-0a80-4d12-ac42-de6a9e0474ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b86ae465-09ff-4d80-9595-f7e4870d5a0d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 27,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1553b60b-f0dd-41f1-bd32-b32b45bf92f0",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "57d529d5-34d0-46c6-b8b2-9418f6da1aa5",
                  "parentUUID": "1553b60b-f0dd-41f1-bd32-b32b45bf92f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));\nassert_1.default.deepEqual(cal.x(), [{\n        key: 'X-FOO',\n        value: 'bar'\n    }]);\nassert_1.default.deepStrictEqual(cal, cal.x('X-LOREM', 'ipsum'));\nassert_1.default.deepEqual(cal.x(), [\n    { key: 'X-FOO', value: 'bar' },\n    { key: 'X-LOREM', value: 'ipsum' }\n]);\nassert_1.default.throws(() => {\n    cal.x('LOREM', 'ipsum');\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x('X-LOREM', 1337);\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x(5, 'ipsum');\n});",
                  "err": {},
                  "uuid": "1fe403cf-554c-4547-adb9-26c0c923f7e0",
                  "parentUUID": "1553b60b-f0dd-41f1-bd32-b32b45bf92f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x([{ key: 'X-FOO', value: 'bar' }]));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert_1.default.deepStrictEqual(cal, cal.x([{ key: 'X-LOREM', value: 'ipsum' }]));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert_1.default.throws(() => {\n    cal.x([{ key: 'LOREM', value: 'ipsum' }]);\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 'X-LOREM', value: 1337 }]);\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 5, value: 'ipsum' }]);\n});",
                  "err": {},
                  "uuid": "9e4af6ac-2907-43a6-9c9e-4e14bb3e2778",
                  "parentUUID": "1553b60b-f0dd-41f1-bd32-b32b45bf92f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x({ 'X-FOO': 'bar' }));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert_1.default.deepStrictEqual(cal, cal.x({ 'X-LOREM': 'ipsum' }));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert_1.default.throws(() => {\n    cal.x({ 'LOREM': 'ipsum' });\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x({ 'X-LOREM': 1337 });\n});\nassert_1.default.throws(() => {\n    cal.x({ 5: 'ipsum' });\n});",
                  "err": {},
                  "uuid": "aefaf241-f440-4731-9208-040037581f14",
                  "parentUUID": "1553b60b-f0dd-41f1-bd32-b32b45bf92f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepEqual(cal.x(), []);\ncal.x('X-FOO', 'BAR');\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'BAR' }]);\ncal.x({});\nassert_1.default.deepEqual(cal.x().length, 0);",
                  "err": {},
                  "uuid": "065c1060-08e5-4e62-a6bc-77703d2d6334",
                  "parentUUID": "1553b60b-f0dd-41f1-bd32-b32b45bf92f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().x('X-FOO', 'BAR');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.toString().includes('X-FOO'));",
                  "err": {},
                  "uuid": "602f3814-7370-4efc-90e0-803f47527c1a",
                  "parentUUID": "1553b60b-f0dd-41f1-bd32-b32b45bf92f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "57d529d5-34d0-46c6-b8b2-9418f6da1aa5",
                "1fe403cf-554c-4547-adb9-26c0c923f7e0",
                "9e4af6ac-2907-43a6-9c9e-4e14bb3e2778",
                "aefaf241-f440-4731-9208-040037581f14",
                "065c1060-08e5-4e62-a6bc-77703d2d6334",
                "602f3814-7370-4efc-90e0-803f47527c1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cacc1462-a748-4826-a964-af06920220c5",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst cal = new calendar_1.default();\nconst prodId = cal.toJSON().prodId;\nassert_1.default.strictEqual(typeof prodId, 'string');\nassert_1.default.ok(prodId.length > 0);\nassert_1.default.strictEqual((_a = cal.toJSON().events) === null || _a === void 0 ? void 0 : _a.length, 0);",
                  "err": {},
                  "uuid": "6a876a55-a34e-4de6-a6b6-78e7e0faf08f",
                  "parentUUID": "cacc1462-a748-4826-a964-af06920220c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n    summary: 'HTTP Calendar Event',\n    x: [\n        { key: 'X-FOO', value: 'bar' },\n        { key: 'X-LOREM', value: 'ipsum' }\n    ]\n});\nconst prodId = cal.toJSON().prodId;\nassert_1.default.strictEqual(typeof prodId, 'string');\nassert_1.default.ok(prodId.length > 0);\nconst events = cal.toJSON().events;\nassert_1.default.strictEqual(events === null || events === void 0 ? void 0 : events.length, 1);\nassert_1.default.deepEqual(events[0].x, [\n    { 'key': 'X-FOO', 'value': 'bar' },\n    { 'key': 'X-LOREM', 'value': 'ipsum' }\n]);",
                  "err": {},
                  "uuid": "520a8559-1dae-4dd7-9632-6964009ea60c",
                  "parentUUID": "cacc1462-a748-4826-a964-af06920220c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Calendar toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new calendar_1.default();\nnew calendar_1.default(a.toJSON());",
                  "err": {},
                  "uuid": "183cc6e9-1a71-4324-83fd-1a9678e9b741",
                  "parentUUID": "cacc1462-a748-4826-a964-af06920220c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a876a55-a34e-4de6-a6b6-78e7e0faf08f",
                "520a8559-1dae-4dd7-9632-6964009ea60c",
                "183cc6e9-1a71-4324-83fd-1a9678e9b741"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d6eae5de-d190-4993-9208-0a876627c388",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.length(), 0);\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.strictEqual(cal.length(), 1);",
                  "err": {},
                  "uuid": "9115baab-87aa-4c5d-bb77-7db25bc8fb8d",
                  "parentUUID": "d6eae5de-d190-4993-9208-0a876627c388",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9115baab-87aa-4c5d-bb77-7db25bc8fb8d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22776388-d54c-4842-98a8-7f0f7484237b",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.url('https://sebbo.net/foo');\nassert_1.default.ok(cal.toString().indexOf('URL:https://sebbo.net/foo') > -1);",
                  "err": {},
                  "uuid": "b419bacd-531e-4a9a-8a9f-db592b5e501e",
                  "parentUUID": "22776388-d54c-4842-98a8-7f0f7484237b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.method(calendar_1.ICalCalendarMethod.REFRESH);\nassert_1.default.ok(cal.toString().indexOf('METHOD:REFRESH') > -1);",
                  "err": {},
                  "uuid": "09582833-64e9-4205-8eda-6a20c255ac1f",
                  "parentUUID": "22776388-d54c-4842-98a8-7f0f7484237b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.name('TEST');\nassert_1.default.ok(cal.toString().indexOf('NAME:TEST') > -1);\nassert_1.default.ok(cal.toString().indexOf('X-WR-CALNAME:TEST') > -1);",
                  "err": {},
                  "uuid": "e6ce6cde-5931-4340-a34b-8cb4cddbde91",
                  "parentUUID": "22776388-d54c-4842-98a8-7f0f7484237b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.description('TEST');\nassert_1.default.ok(cal.toString().indexOf('X-WR-CALDESC:TEST') > -1);",
                  "err": {},
                  "uuid": "9f31fd58-f5e9-48b3-b16f-37f6e2b9df3f",
                  "parentUUID": "22776388-d54c-4842-98a8-7f0f7484237b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.timezone('TEST');\nassert_1.default.ok(cal.toString().indexOf('TIMEZONE-ID:TEST') > -1);\nassert_1.default.ok(cal.toString().indexOf('X-WR-TIMEZONE:TEST') > -1);",
                  "err": {},
                  "uuid": "7e05a63d-83ff-4b03-b42e-855235191d50",
                  "parentUUID": "22776388-d54c-4842-98a8-7f0f7484237b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the source",
                  "fullTitle": "ical-generator Calendar toString() should include the source",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.source('http://foo.bar.example.com/ical.cal');\nassert_1.default.ok(cal.toString().includes('http://foo.bar.example.com/ical.cal'));",
                  "err": {},
                  "uuid": "70f1bb96-150d-4c76-801e-1c54e78c3828",
                  "parentUUID": "22776388-d54c-4842-98a8-7f0f7484237b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include VTimezone objects if generator was supplied",
                  "fullTitle": "ical-generator Calendar toString() should include VTimezone objects if generator was supplied",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.timezone({ name: 'Europe/Berlin', generator: ical_timezones_1.getVtimezoneComponent });\ncal.createEvent({\n    start: new Date(),\n    timezone: 'Europe/London'\n});\nassert_1.default.ok(cal.toString().includes('BEGIN:VTIMEZONE\\r\\n'), 'BEGIN:VTIMEZONE');\nassert_1.default.ok(cal.toString().includes('TZID:Europe/Berlin\\r\\n'), 'TZID:Europe/Berlin');\nassert_1.default.ok(cal.toString().includes('TZID:Europe/London\\r\\n'), 'TZID:Europe/London');",
                  "err": {},
                  "uuid": "c9edd3f8-719e-45ea-a053-f3197622fe28",
                  "parentUUID": "22776388-d54c-4842-98a8-7f0f7484237b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if VTimezone was not found",
                  "fullTitle": "ical-generator Calendar toString() should also work if VTimezone was not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.timezone({ name: 'FOO', generator: ical_timezones_1.getVtimezoneComponent });\nassert_1.default.ok(!cal.toString().includes('TZID:Foo\\r\\n'));",
                  "err": {},
                  "uuid": "034b1999-3726-4848-8ae5-45ba3b048de8",
                  "parentUUID": "22776388-d54c-4842-98a8-7f0f7484237b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore global timezone ids",
                  "fullTitle": "ical-generator Calendar toString() should ignore global timezone ids",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.timezone({ name: '/Europe/Berlin', generator: ical_timezones_1.getVtimezoneComponent });\nassert_1.default.ok(!cal.toString().includes('TZID:/Europe/Berlin\\r\\n'));",
                  "err": {},
                  "uuid": "6fcdd45b-86f1-40bf-b24a-7c42a197c1cd",
                  "parentUUID": "22776388-d54c-4842-98a8-7f0f7484237b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the ttl",
                  "fullTitle": "ical-generator Calendar toString() should include the ttl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.ttl(moment_1.default.duration(3, 'days'));\nassert_1.default.ok(cal.toString().indexOf('REFRESH-INTERVAL;VALUE=DURATION:P3D') > -1);\nassert_1.default.ok(cal.toString().indexOf('X-PUBLISHED-TTL:P3D') > -1);",
                  "err": {},
                  "uuid": "17264ef2-3fd1-401d-acc4-7372b2a8863f",
                  "parentUUID": "22776388-d54c-4842-98a8-7f0f7484237b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b419bacd-531e-4a9a-8a9f-db592b5e501e",
                "09582833-64e9-4205-8eda-6a20c255ac1f",
                "e6ce6cde-5931-4340-a34b-8cb4cddbde91",
                "9f31fd58-f5e9-48b3-b16f-37f6e2b9df3f",
                "7e05a63d-83ff-4b03-b42e-855235191d50",
                "70f1bb96-150d-4c76-801e-1c54e78c3828",
                "c9edd3f8-719e-45ea-a053-f3197622fe28",
                "034b1999-3726-4848-8ae5-45ba3b048de8",
                "6fcdd45b-86f1-40bf-b24a-7c42a197c1cd",
                "17264ef2-3fd1-401d-acc4-7372b2a8863f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "91978ac2-80c2-48a6-90aa-4bc2727f9af2",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event'\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_01.ics', 'utf8'));\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "14c4c82b-2cd9-4481-8e21-8f03377ee9d0",
              "parentUUID": "91978ac2-80c2-48a6-90aa-4bc2727f9af2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: 'localhost',\n        transparency: src_1.ICalEventTransparency.OPAQUE,\n        description: {\n            plain: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop',\n            html: '<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>'\n        }\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_02.ics', 'utf8'));\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "a9542ada-63d2-40f3-bdb0-5356f6d77308",
              "parentUUID": "91978ac2-80c2-48a6-90aa-4bc2727f9af2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({\n        method: calendar_1.ICalCalendarMethod.ADD,\n        prodId: '//sebbo.net//ical-generator.tests//EN'\n    });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: {\n            title: 'Apple Store Kurfürstendamm',\n            address: 'Kurfürstendamm 26, 10719 Berlin, Deutschland',\n            radius: 141.1751386318387,\n            geo: { lat: 52.503630, lon: 13.328650 }\n        },\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        status: event_1.ICalEventStatus.CONFIRMED,\n        categories: [{ name: 'WORK' }],\n        url: 'http://sebbo.net/',\n        attachments: [\n            'https://files.sebbo.net/calendar/attachments/foo'\n        ]\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_03.ics', 'utf8'), 'toString');\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "f5d9592c-1654-4a60-9f95-6c182c5e4a46",
              "parentUUID": "91978ac2-80c2-48a6-90aa-4bc2727f9af2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.timezone({ name: null, generator: ical_timezones_1.getVtimezoneComponent });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                exclude: new Date('Fr Oct 06 2013 23:15:00 UTC')\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30'),\n            end: new Date('Fr Oct 06 2013 23:15:00'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            timezone: 'Europe/Berlin',\n            summary: 'repeating by day, twice',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.DAILY,\n                count: 2\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by 3 weeks, until 2014',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.WEEKLY,\n                interval: 3,\n                until: new Date('We Jan 01 2014 00:00:00 UTC')\n            }\n        }\n    ]);\n    assert_1.default.strictEqual(cal.toString(), yield fs_1.promises.readFile(__dirname + '/results/generate_04.ics', 'utf8'), 'first check');\n    // Wount be same, as reference to VTimezone generator is not exported\n    // assert.strictEqual(ical(cal.toJSON()).toString(), string);\n    cal.timezone(null);\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), cal.toString(), 'second check');\n});",
              "err": {},
              "uuid": "42d338ff-64e8-4fd1-aebf-24bf0a219ea7",
              "parentUUID": "91978ac2-80c2-48a6-90aa-4bc2727f9af2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '1',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'floating',\n        floating: true\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_05.ics', 'utf8'));\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "042ad245-6477-45f2-914d-1a94b9ddb587",
              "parentUUID": "91978ac2-80c2-48a6-90aa-4bc2727f9af2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN', method: calendar_1.ICalCalendarMethod.PUBLISH });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        attendees: [\n            {\n                name: 'Matt',\n                email: 'matt@example.com',\n                delegatesTo: {\n                    name: 'John',\n                    email: 'john@example.com',\n                    status: attendee_1.ICalAttendeeStatus.ACCEPTED\n                }\n            }\n        ],\n        alarms: [\n            {\n                type: alarm_1.ICalAlarmType.display,\n                trigger: 60 * 10,\n                repeat: 2,\n                interval: 60\n            },\n            {\n                type: alarm_1.ICalAlarmType.display,\n                trigger: 60 * 60,\n                description: 'I\\'m a reminder :)'\n            }\n        ],\n        status: event_1.ICalEventStatus.CONFIRMED,\n        url: 'http://sebbo.net/'\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_06.ics', 'utf8'));\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "1fecd446-04b4-4b0a-967a-00588796523e",
              "parentUUID": "91978ac2-80c2-48a6-90aa-4bc2727f9af2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                byMonth: [1, 4, 7, 10]\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on Mo/We/Fr, twice',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.DAILY,\n                count: 2,\n                byDay: [types_1.ICalWeekday.MO, types_1.ICalWeekday.WE, types_1.ICalWeekday.FR]\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on 1st and 15th',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.DAILY,\n                interval: 1,\n                byMonthDay: [1, 15]\n            }\n        }\n    ]);\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_07.ics', 'utf8'));\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "b10634ba-be02-4878-af76-67e9bf23e539",
              "parentUUID": "91978ac2-80c2-48a6-90aa-4bc2727f9af2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event',\n        attendees: [{\n                type: attendee_1.ICalAttendeeType.INDIVIDUAL,\n                role: attendee_1.ICalAttendeeRole.REQ,\n                status: attendee_1.ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_08.ics', 'utf8'));\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "8ad5d761-36b1-4f11-a0b0-b809a3c9c913",
              "parentUUID": "91978ac2-80c2-48a6-90aa-4bc2727f9af2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ method: calendar_1.ICalCalendarMethod.REQUEST, prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: {\n            name: 'Sebastian Pekarek',\n            email: 'mail@sebbo.net',\n            mailto: 'mail2@example2.com'\n        },\n        attendees: [{\n                type: attendee_1.ICalAttendeeType.INDIVIDUAL,\n                role: attendee_1.ICalAttendeeRole.REQ,\n                status: attendee_1.ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_09.ics', 'utf8'), 'toString');\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "e8b5fd3c-f469-4867-b4a7-3b1a6417d484",
              "parentUUID": "91978ac2-80c2-48a6-90aa-4bc2727f9af2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14c4c82b-2cd9-4481-8e21-8f03377ee9d0",
            "a9542ada-63d2-40f3-bdb0-5356f6d77308",
            "f5d9592c-1654-4a60-9f95-6c182c5e4a46",
            "42d338ff-64e8-4fd1-aebf-24bf0a219ea7",
            "042ad245-6477-45f2-914d-1a94b9ddb587",
            "1fecd446-04b4-4b0a-967a-00588796523e",
            "b10634ba-be02-4878-af76-67e9bf23e539",
            "8ad5d761-36b1-4f11-a0b0-b809a3c9c913",
            "e8b5fd3c-f469-4867-b4a7-3b1a6417d484"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e16d2fc9-426d-439f-a23e-fedbba199d91",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bbb377d8-19d1-43a2-9a82-709b071b001d",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new category_1.default({\n    // @ts-ignore\n    unknown: true,\n    name: 'FOO'\n});\nassert_1.default.strictEqual(a.name(), 'FOO');",
                  "err": {},
                  "uuid": "053d93a6-7317-460a-8655-26341fa5d28d",
                  "parentUUID": "bbb377d8-19d1-43a2-9a82-709b071b001d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "053d93a6-7317-460a-8655-26341fa5d28d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "668e178a-e8e1-48ec-a1eb-029b0406025a",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({});\nassert_1.default.deepStrictEqual(c, c.name('FOO'));\nassert_1.default.deepStrictEqual(c, c.name(null));",
                  "err": {},
                  "uuid": "920f7acc-f446-4716-be85-ceac86145a85",
                  "parentUUID": "668e178a-e8e1-48ec-a1eb-029b0406025a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({});\nassert_1.default.strictEqual(c.name(), null);\nc.name('HELLO-WORLD');\nassert_1.default.strictEqual(c.name(), 'HELLO-WORLD');",
                  "err": {},
                  "uuid": "712aff2a-3b2b-4316-b56e-10e4fc373eb4",
                  "parentUUID": "668e178a-e8e1-48ec-a1eb-029b0406025a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({ name: 'BANANA' });\nassert_1.default.ok(c.toString().indexOf('BANANA') > -1);",
                  "err": {},
                  "uuid": "bc24b75a-2b2a-4fbd-a9d2-a742e6448ae6",
                  "parentUUID": "668e178a-e8e1-48ec-a1eb-029b0406025a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "920f7acc-f446-4716-be85-ceac86145a85",
                "712aff2a-3b2b-4316-b56e-10e4fc373eb4",
                "bc24b75a-2b2a-4fbd-a9d2-a742e6448ae6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9a5a5348-5511-4ff0-ac96-a977b2f43623",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({ name: 'FOOBAR' });\nassert_1.default.deepStrictEqual(c.toJSON(), { name: 'FOOBAR' });",
                  "err": {},
                  "uuid": "3e5d639e-c882-4847-9e32-f9efbb50ed40",
                  "parentUUID": "9a5a5348-5511-4ff0-ac96-a977b2f43623",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e5d639e-c882-4847-9e32-f9efbb50ed40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4889608d-c36d-46c9-ab30-fa465942415a",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category toString() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({});\nassert_1.default.throws(function () {\n    c.toString();\n}, /`name`/);",
                  "err": {},
                  "uuid": "1377dd5f-38af-4dda-89b4-abac5c3c144e",
                  "parentUUID": "4889608d-c36d-46c9-ab30-fa465942415a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1377dd5f-38af-4dda-89b4-abac5c3c144e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6c359363-5ebb-4ee1-b9fb-71f38033a9a0",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a5673542-d77c-4807-8b5d-7cc9878f5a70",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Event constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    id: 'FOO',\n    sequence: 1,\n    start: new Date().toJSON(),\n    end: new Date().toJSON(),\n    recurrenceId: new Date().toJSON(),\n    timezone: 'Europe/Berlin',\n    stamp: new Date().toJSON(),\n    allDay: true,\n    floating: false,\n    repeating: null,\n    summary: 'Hello.',\n    location: null,\n    description: null,\n    organizer: null,\n    attendees: [],\n    alarms: [],\n    categories: [],\n    status: null,\n    busystatus: event_1.ICalEventBusyStatus.BUSY,\n    priority: 5,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    attachments: [\n        'https://files.sebbo.net/calendar/attachments/foo'\n    ],\n    transparency: event_1.ICalEventTransparency.TRANSPARENT,\n    created: new Date().toJSON(),\n    lastModified: new Date().toJSON(),\n    class: null,\n    x: []\n};\nconst event = new event_1.default(data, new calendar_1.default());\nassert_1.default.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "7e32e26b-0b1d-407e-af7a-2060d459966a",
                  "parentUUID": "a5673542-d77c-4807-8b5d-7cc9878f5a70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    // @ts-ignore\n    new event_1.default({ summary: 'Testevent' }, null);\n}, /`calendar`/);",
                  "err": {},
                  "uuid": "79f1f968-9b49-4c71-92b7-6c32ee5c9bb7",
                  "parentUUID": "a5673542-d77c-4807-8b5d-7cc9878f5a70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e32e26b-0b1d-407e-af7a-2060d459966a",
                "79f1f968-9b49-4c71-92b7-6c32ee5c9bb7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7035957-3619-4bd7-85cd-f38555c6571a",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.id(1048));",
                  "err": {},
                  "uuid": "41bca091-5fc0-4329-a6a6-69ff7ab4afb2",
                  "parentUUID": "b7035957-3619-4bd7-85cd-f38555c6571a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).id(512);\nassert_1.default.strictEqual(event.id(), '512');\nevent.id('xyz');\nassert_1.default.strictEqual(event.id(), 'xyz');",
                  "err": {},
                  "uuid": "975aeefd-856a-4a88-8875-c578b7c872ca",
                  "parentUUID": "b7035957-3619-4bd7-85cd-f38555c6571a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41bca091-5fc0-4329-a6a6-69ff7ab4afb2",
                "975aeefd-856a-4a88-8875-c578b7c872ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d389ef78-3a14-4009-b17e-0a80c98314eb",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.uid(1048));",
                  "err": {},
                  "uuid": "95e917ef-381d-43da-a465-15f039cc9f03",
                  "parentUUID": "d389ef78-3a14-4009-b17e-0a80c98314eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).uid(512);\nassert_1.default.strictEqual(event.uid(), '512');\nevent.id('xyz');\nassert_1.default.strictEqual(event.uid(), 'xyz');",
                  "err": {},
                  "uuid": "b2a1a8ec-8fad-4941-8a8e-7df65d58baa5",
                  "parentUUID": "d389ef78-3a14-4009-b17e-0a80c98314eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95e917ef-381d-43da-a465-15f039cc9f03",
                "b2a1a8ec-8fad-4941-8a8e-7df65d58baa5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "697686e9-479f-4504-87b2-159761f4e0b4",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.sequence(1));",
                  "err": {},
                  "uuid": "58417906-6e53-4245-bf7e-32d238a86cb6",
                  "parentUUID": "697686e9-479f-4504-87b2-159761f4e0b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).sequence(1048);\nassert_1.default.strictEqual(event.sequence(), 1048);",
                  "err": {},
                  "uuid": "7c651bc7-ab2e-4a41-881b-6f918a0a2220",
                  "parentUUID": "697686e9-479f-4504-87b2-159761f4e0b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.sequence('hello');\n}, /`sequence`/);",
                  "err": {},
                  "uuid": "2ac85591-a45b-4b71-b6bb-f442ea9c03e0",
                  "parentUUID": "697686e9-479f-4504-87b2-159761f4e0b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).sequence(12);\nassert_1.default.strictEqual(event.sequence(), 12);\nevent.sequence(0);\nassert_1.default.strictEqual(event.sequence(), 0);",
                  "err": {},
                  "uuid": "3e700b8a-b379-4c08-91cf-08eae9e03873",
                  "parentUUID": "697686e9-479f-4504-87b2-159761f4e0b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58417906-6e53-4245-bf7e-32d238a86cb6",
                "7c651bc7-ab2e-4a41-881b-6f918a0a2220",
                "2ac85591-a45b-4b71-b6bb-f442ea9c03e0",
                "3e700b8a-b379-4c08-91cf-08eae9e03873"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9c1c9404-60e1-478a-8b47-6e9dbc38b372",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = (0, moment_timezone_1.default)();\nconst event = new event_1.default({}, new calendar_1.default());\nevent.start(now);\nassert_1.default.strictEqual(event.start(), now);",
                  "err": {},
                  "uuid": "1f62ed14-2617-42e7-a223-c65497e9d5e8",
                  "parentUUID": "9c1c9404-60e1-478a-8b47-6e9dbc38b372",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.start(date));\nassert_1.default.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "7d299d06-516a-4af0-8778-83896a62cabd",
                  "parentUUID": "9c1c9404-60e1-478a-8b47-6e9dbc38b372",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.start(date));\nassert_1.default.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "a85e4128-ed39-44a5-aa6d-45fd73d28ec8",
                  "parentUUID": "9c1c9404-60e1-478a-8b47-6e9dbc38b372",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.start(3);\n}, /`start`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.start(null);\n}, /`start`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.start(NaN);\n}, /`start`/, 'NaN');\nassert_1.default.throws(function () {\n    event.start(new Date('hallo'));\n}, /`start`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "cef35602-8492-45d1-b5c3-a99e980211d4",
                  "parentUUID": "9c1c9404-60e1-478a-8b47-6e9dbc38b372",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = (0, moment_timezone_1.default)().add(5, 'minutes');\nconst end = (0, moment_timezone_1.default)();\nconst event = new event_1.default({}, new calendar_1.default())\n    .end(end)\n    .start(start);\nassert_1.default.deepStrictEqual(event.start(), end);\nassert_1.default.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "e944b64d-05cb-4d81-aff1-4aa2999f3669",
                  "parentUUID": "9c1c9404-60e1-478a-8b47-6e9dbc38b372",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.start((0, moment_timezone_1.default)()));\nassert_1.default.deepStrictEqual(event, event.start(new Date()));",
                  "err": {},
                  "uuid": "713e3929-b1c8-4941-b396-75b6c0d39286",
                  "parentUUID": "9c1c9404-60e1-478a-8b47-6e9dbc38b372",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f62ed14-2617-42e7-a223-c65497e9d5e8",
                "7d299d06-516a-4af0-8778-83896a62cabd",
                "a85e4128-ed39-44a5-aa6d-45fd73d28ec8",
                "cef35602-8492-45d1-b5c3-a99e980211d4",
                "e944b64d-05cb-4d81-aff1-4aa2999f3669",
                "713e3929-b1c8-4941-b396-75b6c0d39286"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3ec3d767-0144-4997-9cb6-afaaa7111fcb",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = (0, moment_timezone_1.default)();\nconst event = new event_1.default({}, new calendar_1.default());\nevent.end(now);\nassert_1.default.deepStrictEqual(event.end(), now);",
                  "err": {},
                  "uuid": "8b0c07b6-ecff-498e-bb0b-67bb7ecfb360",
                  "parentUUID": "3ec3d767-0144-4997-9cb6-afaaa7111fcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.end(date));\nassert_1.default.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "5c6a26e1-7e1a-4f13-824a-629c3b5b36fb",
                  "parentUUID": "3ec3d767-0144-4997-9cb6-afaaa7111fcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.end(date));\nassert_1.default.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "f451641c-0e27-4e8d-9be8-44d69655b5de",
                  "parentUUID": "3ec3d767-0144-4997-9cb6-afaaa7111fcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.end(3);\n}, /`end`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.end(NaN);\n}, /`end`/, 'NaN');\nassert_1.default.throws(function () {\n    event.end(new Date('hallo'));\n}, /`end`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "a81f2ca0-e91e-4bad-886f-55d36064250c",
                  "parentUUID": "3ec3d767-0144-4997-9cb6-afaaa7111fcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = (0, moment_timezone_1.default)().add(5, 'minutes');\nconst end = (0, moment_timezone_1.default)();\nconst event = new event_1.default({}, new calendar_1.default())\n    .start(start)\n    .end(end);\nassert_1.default.deepStrictEqual(event.start(), end);\nassert_1.default.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "d7476954-03f5-4a25-84fd-42c48d576d07",
                  "parentUUID": "3ec3d767-0144-4997-9cb6-afaaa7111fcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.end((0, moment_timezone_1.default)()));\nassert_1.default.deepStrictEqual(event, event.end(new Date()));",
                  "err": {},
                  "uuid": "b6e9e419-b84c-420d-a204-0984c248be05",
                  "parentUUID": "3ec3d767-0144-4997-9cb6-afaaa7111fcb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b0c07b6-ecff-498e-bb0b-67bb7ecfb360",
                "5c6a26e1-7e1a-4f13-824a-629c3b5b36fb",
                "f451641c-0e27-4e8d-9be8-44d69655b5de",
                "a81f2ca0-e91e-4bad-886f-55d36064250c",
                "d7476954-03f5-4a25-84fd-42c48d576d07",
                "b6e9e419-b84c-420d-a204-0984c248be05"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83e86aa4-0a7b-4ba8-8c0d-26773684acb1",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = (0, moment_timezone_1.default)();\nconst event = new event_1.default({}, new calendar_1.default());\nevent.recurrenceId(now);\nassert_1.default.deepStrictEqual(event.recurrenceId(), now);",
                  "err": {},
                  "uuid": "9dddf072-3a3a-4bf5-a26c-42906cc6de1c",
                  "parentUUID": "83e86aa4-0a7b-4ba8-8c0d-26773684acb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.recurrenceId(date));\nassert_1.default.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "4815e436-f141-4e5d-9393-ccf326ba90ed",
                  "parentUUID": "83e86aa4-0a7b-4ba8-8c0d-26773684acb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.recurrenceId(date));\nassert_1.default.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "8a27b244-3477-4421-a3fe-a26f10077785",
                  "parentUUID": "83e86aa4-0a7b-4ba8-8c0d-26773684acb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(3);\n}, /`recurrenceId`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(NaN);\n}, /`recurrenceId`/, 'NaN');\nassert_1.default.throws(function () {\n    event.recurrenceId(new Date('hallo'));\n}, /`recurrenceId`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "675a5538-a012-47d0-96b8-39e20c63cd49",
                  "parentUUID": "83e86aa4-0a7b-4ba8-8c0d-26773684acb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.recurrenceId((0, moment_timezone_1.default)()));\nassert_1.default.deepStrictEqual(event, event.recurrenceId(new Date()));",
                  "err": {},
                  "uuid": "d6d676c6-1444-4053-b8a9-9eef7a424f57",
                  "parentUUID": "83e86aa4-0a7b-4ba8-8c0d-26773684acb1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9dddf072-3a3a-4bf5-a26c-42906cc6de1c",
                "4815e436-f141-4e5d-9393-ccf326ba90ed",
                "8a27b244-3477-4421-a3fe-a26f10077785",
                "675a5538-a012-47d0-96b8-39e20c63cd49",
                "d6d676c6-1444-4053-b8a9-9eef7a424f57"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0f645376-e4dc-4079-974f-b275ad9610f8",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default()).timezone('Europe/Berlin');\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "4de4005c-0c6b-4d78-bc75-4512bab28b3b",
                  "parentUUID": "0f645376-e4dc-4079-974f-b275ad9610f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nconst e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, cal);\nassert_1.default.strictEqual(cal.timezone(), null);\nassert_1.default.strictEqual(e.timezone(), null);\ncal.timezone('Europe/London');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/London');\nassert_1.default.strictEqual(e.timezone(), 'Europe/London');\ne.timezone('Europe/Berlin');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/London');\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert_1.default.strictEqual(cal.timezone(), null);\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone(null);\nassert_1.default.strictEqual(cal.timezone(), null);\nassert_1.default.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "216af16f-4142-4f86-a752-940d77d45917",
                  "parentUUID": "0f645376-e4dc-4079-974f-b275ad9610f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.timezone('Europe/Berlin'));",
                  "err": {},
                  "uuid": "8fc3da62-d011-4db6-a86b-0af85edf924c",
                  "parentUUID": "0f645376-e4dc-4079-974f-b275ad9610f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.timezone('Europe/London');\nassert_1.default.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "5414c819-a56d-4a18-883b-b1d6ac17c58c",
                  "parentUUID": "0f645376-e4dc-4079-974f-b275ad9610f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.floating(true);\ne.timezone('Europe/London');\nassert_1.default.strictEqual(e.floating(), false);",
                  "err": {},
                  "uuid": "7ce40337-cd21-4dc1-8bc5-b093a1760c00",
                  "parentUUID": "0f645376-e4dc-4079-974f-b275ad9610f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.floating(true);\ne.timezone(null);\nassert_1.default.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "5339f7e5-c65c-4f6e-9f89-681bbaf2109a",
                  "parentUUID": "0f645376-e4dc-4079-974f-b275ad9610f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Event timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    timezone: 'Europe/Berlin',\n    summary: 'Example Event'\n}, new calendar_1.default());\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone('UTC');\nassert_1.default.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "841e97d2-9b78-4943-9ff9-49b7efaed41b",
                  "parentUUID": "0f645376-e4dc-4079-974f-b275ad9610f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4de4005c-0c6b-4d78-bc75-4512bab28b3b",
                "216af16f-4142-4f86-a752-940d77d45917",
                "8fc3da62-d011-4db6-a86b-0af85edf924c",
                "5414c819-a56d-4a18-883b-b1d6ac17c58c",
                "7ce40337-cd21-4dc1-8bc5-b093a1760c00",
                "5339f7e5-c65c-4f6e-9f89-681bbaf2109a",
                "841e97d2-9b78-4943-9ff9-49b7efaed41b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "caa2a96b-17a4-42e7-a00c-aada8e766013",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = (0, moment_timezone_1.default)().add(1, 'day');\nconst e = new event_1.default({}, new calendar_1.default()).stamp(now);\nassert_1.default.deepStrictEqual(e.stamp(), now);",
                  "err": {},
                  "uuid": "f900e767-cf69-4068-8f58-b81e42c712b4",
                  "parentUUID": "caa2a96b-17a4-42e7-a00c-aada8e766013",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.stamp(date));\nassert_1.default.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "f9becdf2-0014-496f-9e93-536346dc23a7",
                  "parentUUID": "caa2a96b-17a4-42e7-a00c-aada8e766013",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.stamp(date));\nassert_1.default.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "33251514-76f2-480e-b24d-9f53a9d49135",
                  "parentUUID": "caa2a96b-17a4-42e7-a00c-aada8e766013",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.stamp(3);\n}, /`stamp`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.stamp(null);\n}, /`stamp`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.stamp(NaN);\n}, /`stamp`/, 'NaN');\nassert_1.default.throws(function () {\n    event.stamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "868de5e0-8204-42e2-8711-9cfe5eb9c54c",
                  "parentUUID": "caa2a96b-17a4-42e7-a00c-aada8e766013",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.stamp(new Date()));",
                  "err": {},
                  "uuid": "b9c36a7a-85ad-4756-9f51-306a2849c6e5",
                  "parentUUID": "caa2a96b-17a4-42e7-a00c-aada8e766013",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f900e767-cf69-4068-8f58-b81e42c712b4",
                "f9becdf2-0014-496f-9e93-536346dc23a7",
                "33251514-76f2-480e-b24d-9f53a9d49135",
                "868de5e0-8204-42e2-8711-9cfe5eb9c54c",
                "b9c36a7a-85ad-4756-9f51-306a2849c6e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5850b587-47ae-4fa9-9107-365a67deb181",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = (0, moment_timezone_1.default)().add(1, 'day');\nconst e = new event_1.default({}, new calendar_1.default()).timestamp(now);\nassert_1.default.deepStrictEqual(e.timestamp(), now);",
                  "err": {},
                  "uuid": "6754691a-64bd-4417-8998-71e260eabde3",
                  "parentUUID": "5850b587-47ae-4fa9-9107-365a67deb181",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.timestamp(date));\nassert_1.default.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "2abb82ba-1a72-4883-aeb3-78beff0ece4e",
                  "parentUUID": "5850b587-47ae-4fa9-9107-365a67deb181",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.timestamp(date));\nassert_1.default.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "2eea418d-c16b-4480-896f-680a62c04edf",
                  "parentUUID": "5850b587-47ae-4fa9-9107-365a67deb181",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.timestamp(3);\n}, /`stamp`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.timestamp(null);\n}, /`stamp`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.timestamp(NaN);\n}, /`stamp`/, 'NaN');\nassert_1.default.throws(function () {\n    event.timestamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "3206845f-430c-418f-8004-0432ed7f9d40",
                  "parentUUID": "5850b587-47ae-4fa9-9107-365a67deb181",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.timestamp(new Date()));",
                  "err": {},
                  "uuid": "89149963-1b6e-4e71-aaab-036d6abdb543",
                  "parentUUID": "5850b587-47ae-4fa9-9107-365a67deb181",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6754691a-64bd-4417-8998-71e260eabde3",
                "2abb82ba-1a72-4883-aeb3-78beff0ece4e",
                "2eea418d-c16b-4480-896f-680a62c04edf",
                "3206845f-430c-418f-8004-0432ed7f9d40",
                "89149963-1b6e-4e71-aaab-036d6abdb543"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5035e2c4-d1c3-46f6-a84f-0773b5ca94ad",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.allDay(true);\nassert_1.default.strictEqual(e.allDay(), true);",
                  "err": {},
                  "uuid": "a54fa81f-ea68-4bda-a21c-040c2fb08d2f",
                  "parentUUID": "5035e2c4-d1c3-46f6-a84f-0773b5ca94ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.allDay(true));",
                  "err": {},
                  "uuid": "dad80235-76c4-4400-8544-fb6f977526fd",
                  "parentUUID": "5035e2c4-d1c3-46f6-a84f-0773b5ca94ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.allDay(true);\nassert_1.default.strictEqual(event.allDay(), true);",
                  "err": {},
                  "uuid": "01a24bca-f5bf-4092-ba89-f099a79ef6ee",
                  "parentUUID": "5035e2c4-d1c3-46f6-a84f-0773b5ca94ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a54fa81f-ea68-4bda-a21c-040c2fb08d2f",
                "dad80235-76c4-4400-8544-fb6f977526fd",
                "01a24bca-f5bf-4092-ba89-f099a79ef6ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f7124726-bd80-40c2-beda-9dba7ce36a65",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default()).floating(true);\nassert_1.default.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "d8853fc5-db12-42b3-801c-a1b9283305d4",
                  "parentUUID": "f7124726-bd80-40c2-beda-9dba7ce36a65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.floating(false));\nassert_1.default.deepStrictEqual(e, e.floating(true));",
                  "err": {},
                  "uuid": "2b26dfd0-2ad0-4927-a6af-23d5c5bb69c5",
                  "parentUUID": "f7124726-bd80-40c2-beda-9dba7ce36a65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.floating(true);\nassert_1.default.strictEqual(event.floating(), true);",
                  "err": {},
                  "uuid": "8056498d-311b-46ac-811a-adb073ad74ca",
                  "parentUUID": "f7124726-bd80-40c2-beda-9dba7ce36a65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.timezone('Europe/London');\ne.floating(true);\nassert_1.default.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "3ea3ef39-9367-472b-bb14-4bd8c068e72e",
                  "parentUUID": "f7124726-bd80-40c2-beda-9dba7ce36a65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.timezone('Europe/London');\ne.floating(false);\nassert_1.default.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "fd485ee1-ea21-4f56-b0c0-22418e728f58",
                  "parentUUID": "f7124726-bd80-40c2-beda-9dba7ce36a65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8853fc5-db12-42b3-801c-a1b9283305d4",
                "2b26dfd0-2ad0-4927-a6af-23d5c5bb69c5",
                "8056498d-311b-46ac-811a-adb073ad74ca",
                "3ea3ef39-9367-472b-bb14-4bd8c068e72e",
                "fd485ee1-ea21-4f56-b0c0-22418e728f58"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options = {\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    count: 5,\n    interval: 2,\n    until: (0, moment_timezone_1.default)(),\n    exclude: [(0, moment_timezone_1.default)()]\n};\nconst e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e.repeating(), null);\ne.repeating(options);\nassert_1.default.strictEqual(JSON.stringify(e.repeating(), null, '  '), JSON.stringify(options, null, '  '));\ne.repeating(null);\nassert_1.default.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "c92ada3c-b503-4858-846b-1ea3d30813d5",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.repeating(null));\nassert_1.default.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "874c920c-3b5c-44c5-b2bd-b0262eaf380a",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.repeating(null), 'repeating(null)');\nassert_1.default.deepStrictEqual(e, e.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY\n}), 'repeating({freq: \\'MONTHLY\\'})');",
                  "err": {},
                  "uuid": "a7879833-9b43-4dcb-b981-8d01198199bf",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        // @ts-ignore\n        repeating: {}\n    }, new calendar_1.default());\n}, /Input must be one of the following: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY/);",
                  "err": {},
                  "uuid": "6b013d6b-abdc-4ca3-ba39-99ae564e5365",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            // @ts-ignore\n            freq: 'hello'\n        }\n    }, new calendar_1.default());\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "f8001597-d9e4-45f9-80f1-ed54badf1d46",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY });\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.strictEqual(result.freq, 'MONTHLY');",
                  "err": {},
                  "uuid": "1f3e2cee-eb55-4a74-924a-e206064a2ec2",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            count: Infinity\n        }\n    }, new calendar_1.default());\n}, /`repeating.count` must be a finite number!/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            count: 'abc'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.count` must be a finite number!/);",
                  "err": {},
                  "uuid": "3320bf86-bdc6-48aa-82c3-32a8d75b64a9",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, count: 5 });\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.strictEqual(result.count, 5);",
                  "err": {},
                  "uuid": "530fce32-9809-4393-8034-ad7da4f44466",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: Infinity\n        }\n    }, new calendar_1.default());\n}, /`repeating.interval` must be a finite number!/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            interval: 'abc'\n        }\n    }, new calendar_1.default());\n}, /`repeating.interval` must be a finite number!/);",
                  "err": {},
                  "uuid": "f036b5bb-590b-4838-adc8-9cdcaac29460",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, interval: 5 });\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.strictEqual(result.interval, 5);",
                  "err": {},
                  "uuid": "b7435150-309c-45d8-8c44-37361c68d20a",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            until: null\n        }\n    }, new calendar_1.default());\n}, /Error: `repeating\\.until` has to be a valid date!/);",
                  "err": {},
                  "uuid": "91c874a1-ae2b-40f0-8a98-897515b5dcb7",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toJSON();\nevent.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "439db766-97d0-45fd-9fe8-d55f3c9bb2a5",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toDate();\nevent.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "c373d41f-83a2-4844-b9bb-62f2ee982728",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week');\nevent.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "355a95ce-7271-423c-a50e-5e323cbacd4a",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: 3 });\n}, /`repeating.until`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: null });\n}, /`repeating.until`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: NaN });\n}, /`repeating.until`/, 'NaN');\nassert_1.default.throws(function () {\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: new Date('foo') });\n}, /`repeating.until`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "1a3d83e7-1510-407d-ad6a-92219fe74240",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', 'BAR', 'th']\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', Infinity, 'th']\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "cac62d36-6a5f-4f7e-a9ba-3b68ca21270f",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    byDay: [types_1.ICalWeekday.SU, types_1.ICalWeekday.WE, types_1.ICalWeekday.TH]\n});\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.byDay, ['SU', 'WE', 'TH']);",
                  "err": {},
                  "uuid": "1ceb2736-7e24-40fc-9d2a-2844f5922a2b",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonth: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonth` contains invalid value `FOO`/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonth: [1, 14, 7]\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonth` contains invalid value `14`/);",
                  "err": {},
                  "uuid": "6ca5f514-0e5b-466e-ab61-3859173cbbe2",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, byMonth: [1, 12, 7] });\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.byMonth, [1, 12, 7]);",
                  "err": {},
                  "uuid": "681a51e4-4033-46bc-b6ab-7065967a5afd",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonthDay: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonthDay` contains invalid value `FOO`/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 32, 15]\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonthDay` contains invalid value `32`/);",
                  "err": {},
                  "uuid": "85a8e822-e7d1-48e8-a2ab-c9dc05d5db09",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, byMonthDay: [1, 15] });\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.byMonthDay, [1, 15]);",
                  "err": {},
                  "uuid": "34b415c7-453d-4e50-bf7a-d61b62527258",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            bySetPos: 6\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.bySetPos` contains invalid value `6`/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            // @ts-ignore\n            bySetPos: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.bySetPos` contains invalid value `FOO`/);",
                  "err": {},
                  "uuid": "948e13a5-06fe-442d-a5e8-c9340535fcf9",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            bySetPos: 6\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/);",
                  "err": {},
                  "uuid": "a772c0a5-3fc2-4d33-8ea4-7837d1ebe239",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst e = new event_1.default({}, new calendar_1.default());\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    byDay: [types_1.ICalWeekday.SU],\n    bySetPos: 2\n});\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.strictEqual((_a = result.byDay) === null || _a === void 0 ? void 0 : _a.length, 1);\nassert_1.default.strictEqual(result.bySetPos, 2);",
                  "err": {},
                  "uuid": "773b3d5a-aaf0-49f0-833c-66eef0feef32",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            exclude: new Date('FOO')\n        }\n    }, new calendar_1.default());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "92a4d62a-85f3-4303-8010-55836d113058",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            exclude: [(0, moment_timezone_1.default)(), new Date('BAR'), 'FOO']\n        }\n    }, new calendar_1.default());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "750a17e0-021f-4904-85df-2c67c7dd9a59",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            // @ts-ignore\n            exclude: 42\n        }\n    }, new calendar_1.default());\n}, /`repeating.exclude\\[0\\]` has to be a valid date!/);",
                  "err": {},
                  "uuid": "a91357d3-18e3-42f1-af72-26ef90467398",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week');\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    exclude: [\n        date.toJSON(),\n        date.toDate(),\n        date\n    ]\n});\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.ok(Array.isArray(result.exclude));\nassert_1.default.strictEqual(result.exclude.length, 3);\nassert_1.default.deepStrictEqual(result.exclude[0], date.toJSON(), 'String');\nassert_1.default.deepStrictEqual(result.exclude[1], date.toDate(), 'Date');\nassert_1.default.deepStrictEqual(result.exclude[2], date, 'Moment');",
                  "err": {},
                  "uuid": "88581068-5347-43f3-be58-25fbdc414c71",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            startOfWeek: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "c2d9f358-1218-40c9-9b03-4c081ff90e23",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    startOfWeek: types_1.ICalWeekday.SU\n});\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.startOfWeek, 'SU');",
                  "err": {},
                  "uuid": "00cd633a-737c-43eb-aa9d-f37b41845c97",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support RRules",
                  "fullTitle": "ical-generator Event repeating() should support RRules",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = new Date(Date.UTC(2012, 1, 1, 10, 30));\nconst e = new event_1.default({ start }, new calendar_1.default());\nconst rule = new rrule_1.RRule({\n    freq: rrule_1.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule_1.RRule.MO, rrule_1.RRule.FR],\n    dtstart: start,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\ne.repeating(rule);\nconst result = e.repeating();\nassert_1.default.ok((0, tools_1.isRRule)(result));\nassert_1.default.deepStrictEqual(result, rule);\nassert_1.default.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "c00f044e-5f89-4f9d-9c58-9943dd9704f6",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support strings",
                  "fullTitle": "ical-generator Event repeating() should support strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({ start: new Date() }, new calendar_1.default());\nconst rule = 'RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z';\ne.repeating(rule);\nconst result = e.repeating();\nassert_1.default.deepStrictEqual(result, rule);\nassert_1.default.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "14c9c9af-f880-4f96-beca-c4e839aa5825",
                  "parentUUID": "55e0c348-03fc-42c2-916d-ce31c5e7a0d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c92ada3c-b503-4858-846b-1ea3d30813d5",
                "874c920c-3b5c-44c5-b2bd-b0262eaf380a",
                "a7879833-9b43-4dcb-b981-8d01198199bf",
                "6b013d6b-abdc-4ca3-ba39-99ae564e5365",
                "f8001597-d9e4-45f9-80f1-ed54badf1d46",
                "1f3e2cee-eb55-4a74-924a-e206064a2ec2",
                "3320bf86-bdc6-48aa-82c3-32a8d75b64a9",
                "530fce32-9809-4393-8034-ad7da4f44466",
                "f036b5bb-590b-4838-adc8-9cdcaac29460",
                "b7435150-309c-45d8-8c44-37361c68d20a",
                "91c874a1-ae2b-40f0-8a98-897515b5dcb7",
                "439db766-97d0-45fd-9fe8-d55f3c9bb2a5",
                "c373d41f-83a2-4844-b9bb-62f2ee982728",
                "355a95ce-7271-423c-a50e-5e323cbacd4a",
                "1a3d83e7-1510-407d-ad6a-92219fe74240",
                "cac62d36-6a5f-4f7e-a9ba-3b68ca21270f",
                "1ceb2736-7e24-40fc-9d2a-2844f5922a2b",
                "6ca5f514-0e5b-466e-ab61-3859173cbbe2",
                "681a51e4-4033-46bc-b6ab-7065967a5afd",
                "85a8e822-e7d1-48e8-a2ab-c9dc05d5db09",
                "34b415c7-453d-4e50-bf7a-d61b62527258",
                "948e13a5-06fe-442d-a5e8-c9340535fcf9",
                "a772c0a5-3fc2-4d33-8ea4-7837d1ebe239",
                "773b3d5a-aaf0-49f0-833c-66eef0feef32",
                "92a4d62a-85f3-4303-8010-55836d113058",
                "750a17e0-021f-4904-85df-2c67c7dd9a59",
                "a91357d3-18e3-42f1-af72-26ef90467398",
                "88581068-5347-43f3-be58-25fbdc414c71",
                "c2d9f358-1218-40c9-9b03-4c081ff90e23",
                "00cd633a-737c-43eb-aa9d-f37b41845c97",
                "c00f044e-5f89-4f9d-9c58-9943dd9704f6",
                "14c9c9af-f880-4f96-beca-c4e839aa5825"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3c1b1928-920b-4c86-b8ea-653a67ab761b",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.summary(), '');\ne.summary('Testevent');\nassert_1.default.strictEqual(e.summary(), 'Testevent');",
                  "err": {},
                  "uuid": "8fecdb4f-3b35-4ffe-8dd5-2096b8a04385",
                  "parentUUID": "3c1b1928-920b-4c86-b8ea-653a67ab761b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.summary(''));\nassert_1.default.deepStrictEqual(e, e.summary('Testevent'));",
                  "err": {},
                  "uuid": "c0a12a8f-c781-4b07-ad95-0e11f09a6674",
                  "parentUUID": "3c1b1928-920b-4c86-b8ea-653a67ab761b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.summary('Example Event II');\nassert_1.default.strictEqual(event.summary(), 'Example Event II');\nevent.summary('');\nassert_1.default.strictEqual(event.summary(), '');",
                  "err": {},
                  "uuid": "fb00e4ca-14bb-49ae-b90e-5034997ca8d5",
                  "parentUUID": "3c1b1928-920b-4c86-b8ea-653a67ab761b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8fecdb4f-3b35-4ffe-8dd5-2096b8a04385",
                "c0a12a8f-c781-4b07-ad95-0e11f09a6674",
                "fb00e4ca-14bb-49ae-b90e-5034997ca8d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d8ffa3b3-7bfd-4cff-9433-bc287318fc7c",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value (string)",
                  "fullTitle": "ical-generator Event location() getter should return value (string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.location(), null);\ne.location('Test Location');\nassert_1.default.deepStrictEqual(e.location(), { title: 'Test Location' });\ne.location(null);\nassert_1.default.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "c0ebce04-6af1-4138-8dd2-fc9ae6470974",
                  "parentUUID": "d8ffa3b3-7bfd-4cff-9433-bc287318fc7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value (obj)",
                  "fullTitle": "ical-generator Event location() getter should return value (obj)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.location(), null);\ne.location({\n    title: 'Foo',\n    geo: { lat: 44.5, lon: -3.4 }\n});\nassert_1.default.deepStrictEqual((_a = e.location()) === null || _a === void 0 ? void 0 : _a.title, 'Foo');\nassert_1.default.deepStrictEqual((_b = e.location()) === null || _b === void 0 ? void 0 : _b.geo, { lat: 44.5, lon: -3.4 });\ne.location(null);\nassert_1.default.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "60be88fa-9076-4b45-bf7a-4e222ba5c77c",
                  "parentUUID": "d8ffa3b3-7bfd-4cff-9433-bc287318fc7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.location(null));\nassert_1.default.deepStrictEqual(e, e.location('Test Location'));",
                  "err": {},
                  "uuid": "14c208e4-5117-47ee-802e-fad65286dba2",
                  "parentUUID": "d8ffa3b3-7bfd-4cff-9433-bc287318fc7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.location('Europa-Park');\nassert_1.default.strictEqual((_a = event.location()) === null || _a === void 0 ? void 0 : _a.title, 'Europa-Park');",
                  "err": {},
                  "uuid": "c7552ace-dd7a-4a02-817b-1051de8dd187",
                  "parentUUID": "d8ffa3b3-7bfd-4cff-9433-bc287318fc7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when location is not valid",
                  "fullTitle": "ical-generator Event location() should throw error when location is not valid",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\n// @ts-ignore\nassert_1.default.throws(() => event.location({ geo: 3 }), /`location` isn't formatted correctly/i);\n// @ts-ignore\nassert_1.default.throws(() => event.location({}), /`location` isn't formatted correctly/i);",
                  "err": {},
                  "uuid": "9882ca35-c1db-4cb6-bb9d-18443d8251db",
                  "parentUUID": "d8ffa3b3-7bfd-4cff-9433-bc287318fc7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0ebce04-6af1-4138-8dd2-fc9ae6470974",
                "60be88fa-9076-4b45-bf7a-4e222ba5c77c",
                "14c208e4-5117-47ee-802e-fad65286dba2",
                "c7552ace-dd7a-4a02-817b-1051de8dd187",
                "9882ca35-c1db-4cb6-bb9d-18443d8251db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "836facd9-7a48-4cbc-a957-7f97ea0ff051",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.description(), null);\ne.description('I don\\'t need a description. I\\'m far to awesome for descriptions…');\nassert_1.default.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…'\n});\ne.description({\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\nassert_1.default.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\ne.description(null);\nassert_1.default.strictEqual(e.description(), null);",
                  "err": {},
                  "uuid": "076801ca-4ba9-4543-8502-d6a75861c3a8",
                  "parentUUID": "836facd9-7a48-4cbc-a957-7f97ea0ff051",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.description(null));\nassert_1.default.deepStrictEqual(e, e.description('I don\\'t need a description. I\\'m far to awesome for descriptions…'));",
                  "err": {},
                  "uuid": "be2f54fa-62ad-44a0-bfe6-f702f1a673ca",
                  "parentUUID": "836facd9-7a48-4cbc-a957-7f97ea0ff051",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.description('Well. But other people need descriptions… :/');\nassert_1.default.deepStrictEqual(event.description(), {\n    plain: 'Well. But other people need descriptions… :/'\n});\nevent.description({\n    plain: 'I am uncool text.',\n    html: '<marquee>I\\'m the best HTML tag in this universe!</marquee>'\n});\nassert_1.default.ok(event.toString().includes('<marquee>I\\'m the best HTML tag in this universe!</marquee>'));",
                  "err": {},
                  "uuid": "be5b80f5-3f59-414e-aa7f-bb62b3fee779",
                  "parentUUID": "836facd9-7a48-4cbc-a957-7f97ea0ff051",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "076801ca-4ba9-4543-8502-d6a75861c3a8",
                "be2f54fa-62ad-44a0-bfe6-f702f1a673ca",
                "be5b80f5-3f59-414e-aa7f-bb62b3fee779"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f4cc58b5-2150-4071-83b5-5c694c3374e6",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b, _c, _d, _e;\nconst e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.organizer(), null);\ne.organizer(null);\nassert_1.default.strictEqual(e.organizer(), null);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert_1.default.strictEqual('Sebastian Pekarek', (_a = e.organizer()) === null || _a === void 0 ? void 0 : _a.name);\nassert_1.default.strictEqual('mail@example.com', (_b = e.organizer()) === null || _b === void 0 ? void 0 : _b.email);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert_1.default.strictEqual('Sebastian Pekarek', (_c = e.organizer()) === null || _c === void 0 ? void 0 : _c.name);\nassert_1.default.strictEqual('mail@example.com', (_d = e.organizer()) === null || _d === void 0 ? void 0 : _d.email);\nassert_1.default.strictEqual('mail2@example2.com', (_e = e.organizer()) === null || _e === void 0 ? void 0 : _e.mailto);",
                  "err": {},
                  "uuid": "aa29b7e8-a7d5-4be9-a251-89d8e1c4a4a2",
                  "parentUUID": "f4cc58b5-2150-4071-83b5-5c694c3374e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.organizer(null));\nassert_1.default.deepStrictEqual(e, e.organizer('Sebastian Pekarek <mail@example.com>'));",
                  "err": {},
                  "uuid": "222d5901-e671-4c61-b73a-480e80042f50",
                  "parentUUID": "f4cc58b5-2150-4071-83b5-5c694c3374e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert_1.default.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: undefined\n});\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert_1.default.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: 'mail2@example2.com',\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "b0053d1f-379f-47a0-9120-199eb6e88307",
                  "parentUUID": "f4cc58b5-2150-4071-83b5-5c694c3374e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support sent by when using object",
                  "fullTitle": "ical-generator Event organizer() should support sent by when using object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', sentBy: 'bot@example.com' });\nassert_1.default.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: 'bot@example.com'\n});",
                  "err": {},
                  "uuid": "5653f6a7-a7aa-4e63-b9c0-81e2c2cf2453",
                  "parentUUID": "f4cc58b5-2150-4071-83b5-5c694c3374e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.organizer('Sebastian Pekarek <mail@example.com>');\nassert_1.default.deepStrictEqual(event.organizer(), { name: 'Sebastian Pekarek', email: 'mail@example.com' });",
                  "err": {},
                  "uuid": "491a49f5-98a2-42dc-b12a-19041ab3c55e",
                  "parentUUID": "f4cc58b5-2150-4071-83b5-5c694c3374e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.organizer('foo bar');\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "994208f9-a9e6-4103-83f6-119ba32a9b06",
                  "parentUUID": "f4cc58b5-2150-4071-83b5-5c694c3374e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.organizer({ email: 'foo' });\n}, /`organizer\\.name`/);",
                  "err": {},
                  "uuid": "d73ae88d-681c-47f7-b0df-6b4db207c3d7",
                  "parentUUID": "f4cc58b5-2150-4071-83b5-5c694c3374e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.organizer(Infinity);\n}, /`organizer`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.organizer(NaN);\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "44f90a24-4806-492a-8ceb-3ffbda93bcc1",
                  "parentUUID": "f4cc58b5-2150-4071-83b5-5c694c3374e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without an email",
                  "fullTitle": "ical-generator Event organizer() should work without an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.organizer({ name: 'Sebastian Pekarek' });\nassert_1.default.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: undefined,\n    mailto: undefined,\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "2a3bc05e-cca2-4e03-b915-0d90e3e5c51a",
                  "parentUUID": "f4cc58b5-2150-4071-83b5-5c694c3374e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa29b7e8-a7d5-4be9-a251-89d8e1c4a4a2",
                "222d5901-e671-4c61-b73a-480e80042f50",
                "b0053d1f-379f-47a0-9120-199eb6e88307",
                "5653f6a7-a7aa-4e63-b9c0-81e2c2cf2453",
                "491a49f5-98a2-42dc-b12a-19041ab3c55e",
                "994208f9-a9e6-4103-83f6-119ba32a9b06",
                "d73ae88d-681c-47f7-b0df-6b4db207c3d7",
                "44f90a24-4806-492a-8ceb-3ffbda93bcc1",
                "2a3bc05e-cca2-4e03-b915-0d90e3e5c51a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ce27898d-897c-4db1-8f08-b2fe190f4fb9",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = new attendee_1.default({}, event);\nassert_1.default.strictEqual(event.createAttendee(attendee), attendee, 'createAttendee returns attendee');\nassert_1.default.deepStrictEqual(event.attendees()[0], attendee, 'attendee pushed');",
                  "err": {},
                  "uuid": "981192fe-91d6-431f-9d43-4d1073ee7e46",
                  "parentUUID": "ce27898d-897c-4db1-8f08-b2fe190f4fb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.ok(event.createAttendee({}) instanceof attendee_1.default);\nassert_1.default.strictEqual(event.attendees.length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "af60b237-8e42-4758-9c85-05de32663a77",
                  "parentUUID": "ce27898d-897c-4db1-8f08-b2fe190f4fb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = event.createAttendee('Zac <zac@example.com>');\nassert_1.default.strictEqual(attendee.name(), 'Zac');\nassert_1.default.strictEqual(attendee.email(), 'zac@example.com');\nassert_1.default.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "0956a4f7-28c1-4a7f-b1ee-5a6d4a0acf0a",
                  "parentUUID": "ce27898d-897c-4db1-8f08-b2fe190f4fb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.createAttendee('foo bar');\n}, /isn't formated correctly/);",
                  "err": {},
                  "uuid": "66147807-9eca-4e70-81a3-86f8ed7bb3d0",
                  "parentUUID": "ce27898d-897c-4db1-8f08-b2fe190f4fb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = event.createAttendee({ name: 'Zac', email: 'zac@example.com' });\nassert_1.default.strictEqual(attendee.name(), 'Zac');\nassert_1.default.strictEqual(attendee.email(), 'zac@example.com');\nassert_1.default.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "a6c1397d-20a9-4156-b96b-94f5c2a65bf6",
                  "parentUUID": "ce27898d-897c-4db1-8f08-b2fe190f4fb9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "981192fe-91d6-431f-9d43-4d1073ee7e46",
                "af60b237-8e42-4758-9c85-05de32663a77",
                "0956a4f7-28c1-4a7f-b1ee-5a6d4a0acf0a",
                "66147807-9eca-4e70-81a3-86f8ed7bb3d0",
                "a6c1397d-20a9-4156-b96b-94f5c2a65bf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e852a391-1d6d-4e97-8f3e-a7bedaa46253",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.attendees().length, 0);\nconst attendee = event.createAttendee();\nassert_1.default.strictEqual(event.attendees().length, 1);\nassert_1.default.deepStrictEqual(event.attendees()[0], attendee);",
                  "err": {},
                  "uuid": "0e07271f-90cd-4f4f-8b27-19ce0d835fce",
                  "parentUUID": "e852a391-1d6d-4e97-8f3e-a7bedaa46253",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.attendees([{ name: 'Person A' }, { name: 'Person B' }]);\nassert_1.default.strictEqual(event.attendees().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "bfe6b7ea-c041-4a95-a67b-34d835ebb6bb",
                  "parentUUID": "e852a391-1d6d-4e97-8f3e-a7bedaa46253",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e07271f-90cd-4f4f-8b27-19ce0d835fce",
                "bfe6b7ea-c041-4a95-a67b-34d835ebb6bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "13e07781-f7d7-4158-ad52-6c8099c430b2",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.ok(event.createAlarm() instanceof alarm_1.default);",
                  "err": {},
                  "uuid": "1f4e97af-511c-432e-96cb-b52951b9e796",
                  "parentUUID": "13e07781-f7d7-4158-ad52-6c8099c430b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst alarm = event.createAlarm({ type: alarm_1.ICalAlarmType.audio });\nassert_1.default.strictEqual(alarm.type(), 'audio');",
                  "err": {},
                  "uuid": "d04456fd-9758-4b42-b93a-067dc8a1157b",
                  "parentUUID": "13e07781-f7d7-4158-ad52-6c8099c430b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f4e97af-511c-432e-96cb-b52951b9e796",
                "d04456fd-9758-4b42-b93a-067dc8a1157b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "59ee54e1-6655-4831-a4c5-3015020d5429",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.alarms().length, 0);\nconst alarm = event.createAlarm();\nassert_1.default.strictEqual(event.alarms().length, 1);\nassert_1.default.deepStrictEqual(event.alarms()[0], alarm);",
                  "err": {},
                  "uuid": "9874814c-2621-47db-a322-d4791902a20b",
                  "parentUUID": "59ee54e1-6655-4831-a4c5-3015020d5429",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.alarms([\n    { type: alarm_1.ICalAlarmType.audio },\n    { type: alarm_1.ICalAlarmType.display }\n]);\nassert_1.default.strictEqual(event.alarms().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "968a2827-2df7-4513-a5c2-376dd697c321",
                  "parentUUID": "59ee54e1-6655-4831-a4c5-3015020d5429",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9874814c-2621-47db-a322-d4791902a20b",
                "968a2827-2df7-4513-a5c2-376dd697c321"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "24a82374-ae8f-4416-960b-60e040f19ae4",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.ok(event.createCategory() instanceof category_1.default);",
                  "err": {},
                  "uuid": "e3dd2507-a5d9-43cb-bc19-47c1b1ad4854",
                  "parentUUID": "24a82374-ae8f-4416-960b-60e040f19ae4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst category = event.createCategory({ name: 'foo' });\nassert_1.default.strictEqual(category.name(), 'foo');",
                  "err": {},
                  "uuid": "3baf9073-30cc-4a8e-80ea-fc38862a0447",
                  "parentUUID": "24a82374-ae8f-4416-960b-60e040f19ae4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3dd2507-a5d9-43cb-bc19-47c1b1ad4854",
                "3baf9073-30cc-4a8e-80ea-fc38862a0447"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "15b7ac41-3ae9-4449-b982-515f1a8cfda0",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.categories().length, 0);\nconst category = event.createCategory();\nassert_1.default.strictEqual(event.categories().length, 1);\nassert_1.default.deepStrictEqual(event.categories()[0], category);",
                  "err": {},
                  "uuid": "7488506b-8f27-4e79-8845-c6a41212dee6",
                  "parentUUID": "15b7ac41-3ae9-4449-b982-515f1a8cfda0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.categories([\n    { name: 'foo' },\n    { name: 'bar' }\n]);\nassert_1.default.strictEqual(event.categories().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "45165366-2b91-4b52-9ede-0adcbb4994ef",
                  "parentUUID": "15b7ac41-3ae9-4449-b982-515f1a8cfda0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7488506b-8f27-4e79-8845-c6a41212dee6",
                "45165366-2b91-4b52-9ede-0adcbb4994ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9f2390fc-2810-4251-99ad-17636bb558de",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.status(), null);\nevent.status(event_1.ICalEventStatus.CONFIRMED);\nassert_1.default.strictEqual(event.status(), 'CONFIRMED');\nevent.status(null);\nassert_1.default.strictEqual(event.status(), null);",
                  "err": {},
                  "uuid": "b894d4a1-e4e3-46d5-ab5e-388f847cea06",
                  "parentUUID": "9f2390fc-2810-4251-99ad-17636bb558de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.status(null));\nassert_1.default.deepStrictEqual(e, e.status(event_1.ICalEventStatus.CONFIRMED));",
                  "err": {},
                  "uuid": "6d33c591-0f58-49ce-a2c7-ef54b5bbf034",
                  "parentUUID": "9f2390fc-2810-4251-99ad-17636bb558de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.status(event_1.ICalEventStatus.CONFIRMED);\ne.status(null);\nassert_1.default.strictEqual(e.status(), null);",
                  "err": {},
                  "uuid": "bfc29fe3-bed9-4908-a391-685a8d26c5d1",
                  "parentUUID": "9f2390fc-2810-4251-99ad-17636bb558de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.status(event_1.ICalEventStatus.CONFIRMED);\nassert_1.default.strictEqual(e.status(), 'CONFIRMED');\nassert_1.default.strictEqual(e.status(), event_1.ICalEventStatus.CONFIRMED);",
                  "err": {},
                  "uuid": "6e5b0f6d-89ce-4e4a-a1fd-131503082367",
                  "parentUUID": "9f2390fc-2810-4251-99ad-17636bb558de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status('COOKING');\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status(Infinity);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status(NaN);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status(-1);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);",
                  "err": {},
                  "uuid": "d30fe61d-fea2-45ac-9d84-cb52fc7df6b3",
                  "parentUUID": "9f2390fc-2810-4251-99ad-17636bb558de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b894d4a1-e4e3-46d5-ab5e-388f847cea06",
                "6d33c591-0f58-49ce-a2c7-ef54b5bbf034",
                "bfc29fe3-bed9-4908-a391-685a8d26c5d1",
                "6e5b0f6d-89ce-4e4a-a1fd-131503082367",
                "d30fe61d-fea2-45ac-9d84-cb52fc7df6b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5ca8db03-cfec-41b4-bb58-d488fa434378",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.busystatus(), null);\nevent.busystatus(event_1.ICalEventBusyStatus.BUSY);\nassert_1.default.strictEqual(event.busystatus(), 'BUSY');\nevent.busystatus(null);\nassert_1.default.strictEqual(event.busystatus(), null);",
                  "err": {},
                  "uuid": "f0a946c3-fa99-402a-a4b0-2d9ed28bbb90",
                  "parentUUID": "5ca8db03-cfec-41b4-bb58-d488fa434378",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.busystatus(null));\nassert_1.default.deepStrictEqual(e, e.busystatus(event_1.ICalEventBusyStatus.BUSY));",
                  "err": {},
                  "uuid": "a4ff5d76-07d1-4cc1-9ddb-e91a5fec22a5",
                  "parentUUID": "5ca8db03-cfec-41b4-bb58-d488fa434378",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.busystatus(event_1.ICalEventBusyStatus.BUSY);\ne.busystatus(null);\nassert_1.default.strictEqual(e.busystatus(), null);",
                  "err": {},
                  "uuid": "17794c58-e7a5-4d00-860d-4881b1a4013f",
                  "parentUUID": "5ca8db03-cfec-41b4-bb58-d488fa434378",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.busystatus(event_1.ICalEventBusyStatus.BUSY);\nassert_1.default.strictEqual(e.busystatus(), 'BUSY');",
                  "err": {},
                  "uuid": "4fcf2fe5-b550-4b8b-aedc-962f4c133367",
                  "parentUUID": "5ca8db03-cfec-41b4-bb58-d488fa434378",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus('COOKING');\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus(Infinity);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus(NaN);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus(-1);\n}, /FREE, TENTATIVE, BUSY, OOF/);",
                  "err": {},
                  "uuid": "1900fc8d-f5e1-4a66-8b9b-3bc71531fb7a",
                  "parentUUID": "5ca8db03-cfec-41b4-bb58-d488fa434378",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0a946c3-fa99-402a-a4b0-2d9ed28bbb90",
                "a4ff5d76-07d1-4cc1-9ddb-e91a5fec22a5",
                "17794c58-e7a5-4d00-860d-4881b1a4013f",
                "4fcf2fe5-b550-4b8b-aedc-962f4c133367",
                "1900fc8d-f5e1-4a66-8b9b-3bc71531fb7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "257e7d78-667d-46e7-986f-3d4c2998c456",
              "title": "priority()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event priority() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.priority(), null);\ne.priority(5);\nassert_1.default.strictEqual(e.priority(), 5);",
                  "err": {},
                  "uuid": "a215e4d4-bbe8-440e-8a8d-2c2fa37ed6cb",
                  "parentUUID": "257e7d78-667d-46e7-986f-3d4c2998c456",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event priority() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.priority(null));\nassert_1.default.deepStrictEqual(e, e.priority(5));",
                  "err": {},
                  "uuid": "c51b2cb7-2327-4cde-ba4b-af4daf4aebdf",
                  "parentUUID": "257e7d78-667d-46e7-986f-3d4c2998c456",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event priority() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.priority(5);\nassert_1.default.strictEqual(event.priority(), 5);\nassert_1.default.ok(event.toString().includes('PRIORITY:5'));",
                  "err": {},
                  "uuid": "78d14bbd-25eb-434a-8831-0a2002e97635",
                  "parentUUID": "257e7d78-667d-46e7-986f-3d4c2998c456",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a215e4d4-bbe8-440e-8a8d-2c2fa37ed6cb",
                "c51b2cb7-2327-4cde-ba4b-af4daf4aebdf",
                "78d14bbd-25eb-434a-8831-0a2002e97635"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b0bcae8-4a8f-42ad-b9e7-713e94a46cb8",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.url(), null);\ne.url('http://sebbo.net/');\nassert_1.default.strictEqual(e.url(), 'http://sebbo.net/');",
                  "err": {},
                  "uuid": "e5480297-ba52-49be-8d05-0312e24fa899",
                  "parentUUID": "8b0bcae8-4a8f-42ad-b9e7-713e94a46cb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.url(null));\nassert_1.default.deepStrictEqual(e, e.url('http://sebbo.net/'));",
                  "err": {},
                  "uuid": "3f9139f9-0421-4adf-9577-4d5f852d5b90",
                  "parentUUID": "8b0bcae8-4a8f-42ad-b9e7-713e94a46cb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.url('http://github.com/sebbo2002/ical-generator');\nassert_1.default.strictEqual(event.url(), 'http://github.com/sebbo2002/ical-generator');",
                  "err": {},
                  "uuid": "482df6a2-9af2-4199-bca0-18ae9b95b850",
                  "parentUUID": "8b0bcae8-4a8f-42ad-b9e7-713e94a46cb8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5480297-ba52-49be-8d05-0312e24fa899",
                "3f9139f9-0421-4adf-9577-4d5f852d5b90",
                "482df6a2-9af2-4199-bca0-18ae9b95b850"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "796aa013-6b1b-43c4-95c9-bf5f8316de4c",
              "title": "createAttachment()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return this",
                  "fullTitle": "ical-generator Event createAttachment() should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event.createAttachment('https://files.sebbo.net/calendar/attachments/foo'), event);",
                  "err": {},
                  "uuid": "a44bf175-6f2e-477a-983b-3adb1415f4bf",
                  "parentUUID": "796aa013-6b1b-43c4-95c9-bf5f8316de4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a44bf175-6f2e-477a-983b-3adb1415f4bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1994ca84-6248-46c4-bc08-5e860468b90d",
              "title": "attachments()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of strings…",
                  "fullTitle": "ical-generator Event attachments() getter should return an array of strings…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.attachments().length, 0);\nevent.createAttachment('https://files.sebbo.net/calendar/attachments/foo');\nassert_1.default.strictEqual(event.attachments().length, 1);\nassert_1.default.deepStrictEqual(typeof event.attachments()[0], 'string');",
                  "err": {},
                  "uuid": "c13c539b-d7e7-4efc-ad6b-a4a837b6e37a",
                  "parentUUID": "1994ca84-6248-46c4-bc08-5e860468b90d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add url and return this",
                  "fullTitle": "ical-generator Event attachments() setter should add url and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.attachments([\n    'https://files.sebbo.net/calendar/attachments/foo',\n    'https://files.sebbo.net/calendar/attachments/bar'\n]);\nassert_1.default.strictEqual(event.attachments().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "6d4bc776-836f-47d0-a7e6-346aab2e0ba5",
                  "parentUUID": "1994ca84-6248-46c4-bc08-5e860468b90d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c13c539b-d7e7-4efc-ad6b-a4a837b6e37a",
                "6d4bc776-836f-47d0-a7e6-346aab2e0ba5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "da78e39a-98f2-412f-948e-7f67d57ec367",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.created(new Date()));",
                  "err": {},
                  "uuid": "4c1cf47c-4d9c-4adc-808a-e69731c6b7c8",
                  "parentUUID": "da78e39a-98f2-412f-948e-7f67d57ec367",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created((0, moment_timezone_1.default)());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.created()));",
                  "err": {},
                  "uuid": "aaf96766-e881-422c-9d66-9311d38b53ac",
                  "parentUUID": "da78e39a-98f2-412f-948e-7f67d57ec367",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created(new Date());\nassert_1.default.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "f1209843-7759-4eec-8976-17b59b96540c",
                  "parentUUID": "da78e39a-98f2-412f-948e-7f67d57ec367",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created((0, moment_timezone_1.default)().toJSON());\nassert_1.default.strictEqual(typeof e.created(), 'string');",
                  "err": {},
                  "uuid": "3313a6c1-b4c8-4b93-bcc1-66ad2a424a12",
                  "parentUUID": "da78e39a-98f2-412f-948e-7f67d57ec367",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created(new Date());\nassert_1.default.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "3add742c-ff30-4ab1-ac22-b9cc7fcdbd22",
                  "parentUUID": "da78e39a-98f2-412f-948e-7f67d57ec367",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new event_1.default({}, new calendar_1.default()).created(now);\nassert_1.default.deepStrictEqual((_a = e.created()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "a113904f-f1ba-4d18-a572-5bac5d5d0edd",
                  "parentUUID": "da78e39a-98f2-412f-948e-7f67d57ec367",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.created('hallo'); // this will produce a \"Deprecation warning\", sorry 😇\n}, /`created`/);",
                  "err": {},
                  "uuid": "ebedb839-5e5d-4377-a797-3075d9c3146e",
                  "parentUUID": "da78e39a-98f2-412f-948e-7f67d57ec367",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c1cf47c-4d9c-4adc-808a-e69731c6b7c8",
                "aaf96766-e881-422c-9d66-9311d38b53ac",
                "f1209843-7759-4eec-8976-17b59b96540c",
                "3313a6c1-b4c8-4b93-bcc1-66ad2a424a12",
                "3add742c-ff30-4ab1-ac22-b9cc7fcdbd22",
                "a113904f-f1ba-4d18-a572-5bac5d5d0edd",
                "ebedb839-5e5d-4377-a797-3075d9c3146e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "469c5f97-fa9a-4485-ad17-8965fbf91c5c",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.lastModified(new Date()));",
                  "err": {},
                  "uuid": "04922fab-92c0-4d05-862f-41a83eb81af1",
                  "parentUUID": "469c5f97-fa9a-4485-ad17-8965fbf91c5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.lastModified((0, moment_timezone_1.default)());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.lastModified()));",
                  "err": {},
                  "uuid": "e159631d-8e39-4531-9869-9a02ea3fb436",
                  "parentUUID": "469c5f97-fa9a-4485-ad17-8965fbf91c5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.lastModified(new Date());\nassert_1.default.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "00da6c14-6c79-4b26-bd2f-c9487a627740",
                  "parentUUID": "469c5f97-fa9a-4485-ad17-8965fbf91c5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().toJSON();\ne.lastModified(date);\nassert_1.default.strictEqual(e.lastModified(), date);",
                  "err": {},
                  "uuid": "30846241-dd22-4635-8c4c-2858c5f15c81",
                  "parentUUID": "469c5f97-fa9a-4485-ad17-8965fbf91c5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.lastModified(new Date());\nassert_1.default.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "6f8b71df-58d9-4df1-b791-2bac3c3eb0e8",
                  "parentUUID": "469c5f97-fa9a-4485-ad17-8965fbf91c5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new event_1.default({}, new calendar_1.default()).lastModified(now);\nassert_1.default.deepStrictEqual((_a = e.lastModified()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "f739ba08-575e-469e-a73e-4ce2e45d7796",
                  "parentUUID": "469c5f97-fa9a-4485-ad17-8965fbf91c5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.lastModified('hallo');\n}, /`lastModified`/);",
                  "err": {},
                  "uuid": "2fc2fada-1110-4d5d-8000-7fe33b9a26f0",
                  "parentUUID": "469c5f97-fa9a-4485-ad17-8965fbf91c5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04922fab-92c0-4d05-862f-41a83eb81af1",
                "e159631d-8e39-4531-9869-9a02ea3fb436",
                "00da6c14-6c79-4b26-bd2f-c9487a627740",
                "30846241-dd22-4635-8c4c-2858c5f15c81",
                "6f8b71df-58d9-4df1-b791-2bac3c3eb0e8",
                "f739ba08-575e-469e-a73e-4ce2e45d7796",
                "2fc2fada-1110-4d5d-8000-7fe33b9a26f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bec1de57-d842-48f8-b9f7-6b601878a446",
              "title": "class()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event class() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.class(), null);\nevent.class(event_1.ICalEventClass.PRIVATE);\nassert_1.default.strictEqual(event.class(), 'PRIVATE');\nevent.class(null);\nassert_1.default.strictEqual(event.class(), null);",
                  "err": {},
                  "uuid": "9bdbe193-58fe-48d2-87b6-e0591a69dd0d",
                  "parentUUID": "bec1de57-d842-48f8-b9f7-6b601878a446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event class() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.class(null));\nassert_1.default.deepStrictEqual(e, e.class(event_1.ICalEventClass.PRIVATE));",
                  "err": {},
                  "uuid": "8e9691b1-27dd-4e2f-b7f8-198720eb9e35",
                  "parentUUID": "bec1de57-d842-48f8-b9f7-6b601878a446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event class() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.class(event_1.ICalEventClass.PRIVATE);\ne.class(null);\nassert_1.default.strictEqual(e.class(), null);",
                  "err": {},
                  "uuid": "36afd2f9-c80e-4e6d-964e-526b9a398a4e",
                  "parentUUID": "bec1de57-d842-48f8-b9f7-6b601878a446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event class() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.class(event_1.ICalEventClass.PRIVATE);\nassert_1.default.strictEqual(e.class(), 'PRIVATE');\nassert_1.default.strictEqual(e.class(), event_1.ICalEventClass.PRIVATE);",
                  "err": {},
                  "uuid": "0932f16a-30a5-427e-ad05-f957accceebe",
                  "parentUUID": "bec1de57-d842-48f8-b9f7-6b601878a446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event class() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.class('COOKING');\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.class(Infinity);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.class(NaN);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.class(-1);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);",
                  "err": {},
                  "uuid": "4eec5740-ae9a-4325-b1e8-ef69b0362cbf",
                  "parentUUID": "bec1de57-d842-48f8-b9f7-6b601878a446",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9bdbe193-58fe-48d2-87b6-e0591a69dd0d",
                "8e9691b1-27dd-4e2f-b7f8-198720eb9e35",
                "36afd2f9-c80e-4e6d-964e-526b9a398a4e",
                "0932f16a-30a5-427e-ad05-f957accceebe",
                "4eec5740-ae9a-4325-b1e8-ef69b0362cbf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d86f46d-7934-4d7c-bb1d-84b37fabf463",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "906a72cc-e674-4f31-a9e7-e9e28be53746",
                  "parentUUID": "0d86f46d-7934-4d7c-bb1d-84b37fabf463",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "906a72cc-e674-4f31-a9e7-e9e28be53746"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d5827fff-fe74-4ad8-9f3a-1dd40a928cad",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = (0, moment_timezone_1.default)().add(1, 'month');\nconst event = new event_1.default({}, new calendar_1.default()).summary('foo').start(date);\nassert_1.default.strictEqual(event.toJSON().summary, 'foo', 'summary is okay');\nassert_1.default.deepStrictEqual(event.toJSON().start, date.toJSON(), 'start is okay');\nassert_1.default.strictEqual(typeof event.toJSON().start, 'string', 'start is string');",
                  "err": {},
                  "uuid": "8f30754e-9010-47b7-a023-459ced7adaf9",
                  "parentUUID": "d5827fff-fe74-4ad8-9f3a-1dd40a928cad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should stringify RRule objects",
                  "fullTitle": "ical-generator Event toJSON() should stringify RRule objects",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nconst rule = new rrule_1.RRule({\n    freq: rrule_1.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule_1.RRule.MO, rrule_1.RRule.FR],\n    dtstart: date,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\nconst event = new event_1.default({}, new calendar_1.default()).summary('foo').start(date).repeating(rule);\nconst json = event.toJSON();\nconst before = event.toString();\nassert_1.default.ok(typeof json.repeating === 'string');\nconst event2 = new event_1.default(event.toJSON(), new calendar_1.default());\nconst after = event2.toString();\nassert_1.default.strictEqual(after, before);",
                  "err": {},
                  "uuid": "1ae70dde-3b79-40ef-a979-4008e64f69b6",
                  "parentUUID": "d5827fff-fe74-4ad8-9f3a-1dd40a928cad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Event toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new event_1.default({}, new calendar_1.default());\nnew event_1.default(a.toJSON(), new calendar_1.default());",
                  "err": {},
                  "uuid": "4db1fefe-af74-4d5f-98f6-1c110feca1ad",
                  "parentUUID": "d5827fff-fe74-4ad8-9f3a-1dd40a928cad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f30754e-9010-47b7-a023-459ced7adaf9",
                "1ae70dde-3b79-40ef-a979-4008e64f69b6",
                "4db1fefe-af74-4d5f-98f6-1c110feca1ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb4642e2-8c1c-434e-86d6-5ef70e53d3fa",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.transparency(), null);\nevent.transparency(event_1.ICalEventTransparency.OPAQUE);\nassert_1.default.strictEqual(event.transparency(), 'OPAQUE');\nevent.transparency(null);\nassert_1.default.strictEqual(event.transparency(), null);",
                  "err": {},
                  "uuid": "ba1d0e92-1054-44e9-add0-dc91edcccc86",
                  "parentUUID": "bb4642e2-8c1c-434e-86d6-5ef70e53d3fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.transparency(null));\nassert_1.default.deepStrictEqual(e, e.transparency(event_1.ICalEventTransparency.TRANSPARENT));",
                  "err": {},
                  "uuid": "dee3740e-675e-4238-99d3-dacbe68cb6f8",
                  "parentUUID": "bb4642e2-8c1c-434e-86d6-5ef70e53d3fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.transparency(event_1.ICalEventTransparency.OPAQUE);\ne.transparency(null);\nassert_1.default.strictEqual(e.transparency(), null);",
                  "err": {},
                  "uuid": "3deb636d-262f-4dc2-89fb-85386e9f0567",
                  "parentUUID": "bb4642e2-8c1c-434e-86d6-5ef70e53d3fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.transparency(event_1.ICalEventTransparency.OPAQUE);\nassert_1.default.strictEqual(e.transparency(), 'OPAQUE');",
                  "err": {},
                  "uuid": "b7d27277-76b8-49b3-8cd9-1ab92632fa77",
                  "parentUUID": "bb4642e2-8c1c-434e-86d6-5ef70e53d3fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.transparency('COOKING');\n}, /TRANSPARENT, OPAQUE/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.transparency(Infinity);\n}, /TRANSPARENT, OPAQUE/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.transparency(-1);\n}, /TRANSPARENT, OPAQUE/);",
                  "err": {},
                  "uuid": "c6d9873e-4e6f-436c-8ec3-257f51c84ef3",
                  "parentUUID": "bb4642e2-8c1c-434e-86d6-5ef70e53d3fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba1d0e92-1054-44e9-add0-dc91edcccc86",
                "dee3740e-675e-4238-99d3-dacbe68cb6f8",
                "3deb636d-262f-4dc2-89fb-85386e9f0567",
                "b7d27277-76b8-49b3-8cd9-1ab92632fa77",
                "c6d9873e-4e6f-436c-8ec3-257f51c84ef3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "02937a68-691c-4493-a147-4a1b0ea95855",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without start",
                  "fullTitle": "ical-generator Event toString() shoult throw an error without start",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    summary: 'Example Event'\n}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.toString();\n}, /`start`/);",
                  "err": {},
                  "uuid": "d33a6c21-891b-4447-88c4-586d1209c4cb",
                  "parentUUID": "02937a68-691c-4493-a147-4a1b0ea95855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event toString() should make use of escaping",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Hel\\\\\\\\lo\\nW;orl,d'\n}, new calendar_1.default());\nassert_1.default.ok(e.toString().indexOf('Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d') > -1);",
                  "err": {},
                  "uuid": "c7fb0da2-2dc4-4f75-a8b3-83b53737f75f",
                  "parentUUID": "02937a68-691c-4493-a147-4a1b0ea95855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event toString() should render correct UIDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nconst event = new event_1.default({\n    id: 42,\n    start: (0, moment_timezone_1.default)(),\n    summary: ':)'\n}, cal);\nassert_1.default.ok(event.toString().indexOf('UID:42\\r') > -1);",
                  "err": {},
                  "uuid": "5295a33b-8045-46b9-ac20-d2c5607e4779",
                  "parentUUID": "02937a68-691c-4493-a147-4a1b0ea95855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event toString() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nlet event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    end: (0, moment_timezone_1.default)(),\n    repeating: {\n        freq: types_1.ICalEventRepeatingFreq.WEEKLY\n    }\n}, cal);\nassert_1.default.ok(!event.toString().includes('WKST'), 'without WKST');\nevent = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    end: (0, moment_timezone_1.default)(),\n    repeating: {\n        freq: types_1.ICalEventRepeatingFreq.WEEKLY,\n        startOfWeek: types_1.ICalWeekday.SU\n    }\n}, cal);\nassert_1.default.ok(event.toString().includes('WKST'), 'with WKST');",
                  "err": {},
                  "uuid": "2a4038d1-22e2-4096-ac8d-a79d7517a262",
                  "parentUUID": "02937a68-691c-4493-a147-4a1b0ea95855",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d33a6c21-891b-4447-88c4-586d1209c4cb",
                "c7fb0da2-2dc4-4f75-a8b3-83b53737f75f",
                "5295a33b-8045-46b9-ac20-d2c5607e4779",
                "2a4038d1-22e2-4096-ac8d-a79d7517a262"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "32108fe1-a5f2-4101-bee3-19f227067cde",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "32a50650-55c9-4b7e-9b20-c9ed72f2a9d1",
              "title": "default",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be a function",
                  "fullTitle": "ical-generator Index default should be a function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(typeof src_1.default, 'function');",
                  "err": {},
                  "uuid": "d81065fb-ea6f-4b8f-9891-9d98b69c5410",
                  "parentUUID": "32a50650-55c9-4b7e-9b20-c9ed72f2a9d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalCalendar",
                  "fullTitle": "ical-generator Index default should return a ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok((0, src_1.default)() instanceof src_1.ICalCalendar);",
                  "err": {},
                  "uuid": "a6970bbb-d3d7-4b34-8bc5-1b2c887aa4a8",
                  "parentUUID": "32a50650-55c9-4b7e-9b20-c9ed72f2a9d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d81065fb-ea6f-4b8f-9891-9d98b69c5410",
                "a6970bbb-d3d7-4b34-8bc5-1b2c887aa4a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "31e8f8f0-54e5-41a8-8392-75e7a473c1d7",
              "title": "Alarm",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAlarm",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarm",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAlarm);",
                  "err": {},
                  "uuid": "f7956187-2a4c-4908-a9da-29796ba6cf9b",
                  "parentUUID": "31e8f8f0-54e5-41a8-8392-75e7a473c1d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAlarmType",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarmType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAlarmType);",
                  "err": {},
                  "uuid": "d66c3a75-7e17-4c3c-a247-73f3da9be543",
                  "parentUUID": "31e8f8f0-54e5-41a8-8392-75e7a473c1d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7956187-2a4c-4908-a9da-29796ba6cf9b",
                "d66c3a75-7e17-4c3c-a247-73f3da9be543"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c652cd5f-d95b-4b5d-aac0-70bd33060e29",
              "title": "Attendee",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAttendee",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendee",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAttendee);",
                  "err": {},
                  "uuid": "f16c6604-27fa-4d62-baa1-90db2e8870f0",
                  "parentUUID": "c652cd5f-d95b-4b5d-aac0-70bd33060e29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeType",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAttendeeType);",
                  "err": {},
                  "uuid": "7d824973-05ae-408d-b3b0-8d4963e742e8",
                  "parentUUID": "c652cd5f-d95b-4b5d-aac0-70bd33060e29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeRole",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeRole",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAttendeeRole);",
                  "err": {},
                  "uuid": "1e8c4641-e039-4763-a3e7-c229cea7ec62",
                  "parentUUID": "c652cd5f-d95b-4b5d-aac0-70bd33060e29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeStatus",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAttendeeStatus);",
                  "err": {},
                  "uuid": "39be2faa-4cb4-435c-b33d-0a4bfe353738",
                  "parentUUID": "c652cd5f-d95b-4b5d-aac0-70bd33060e29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f16c6604-27fa-4d62-baa1-90db2e8870f0",
                "7d824973-05ae-408d-b3b0-8d4963e742e8",
                "1e8c4641-e039-4763-a3e7-c229cea7ec62",
                "39be2faa-4cb4-435c-b33d-0a4bfe353738"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40135fd0-76b8-454d-9ef3-7097d06110c3",
              "title": "Calendar",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCalendar",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalCalendar);",
                  "err": {},
                  "uuid": "1b17bf10-bc1d-4937-b501-4db0d01db7b4",
                  "parentUUID": "40135fd0-76b8-454d-9ef3-7097d06110c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalCalendarMethod",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendarMethod",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalCalendarMethod);",
                  "err": {},
                  "uuid": "2c6f24e3-a612-4368-acb3-1f8517778120",
                  "parentUUID": "40135fd0-76b8-454d-9ef3-7097d06110c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b17bf10-bc1d-4937-b501-4db0d01db7b4",
                "2c6f24e3-a612-4368-acb3-1f8517778120"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a25ef7c0-00c8-4258-a07a-305accff8f64",
              "title": "Category",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCategory",
                  "fullTitle": "ical-generator Index Category should export ICalCategory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalCategory);",
                  "err": {},
                  "uuid": "7d1bf89a-1422-47a2-a62c-01cc1603cb51",
                  "parentUUID": "a25ef7c0-00c8-4258-a07a-305accff8f64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d1bf89a-1422-47a2-a62c-01cc1603cb51"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "76752783-0f75-4d8e-9ee4-659784973da1",
              "title": "Event",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEvent",
                  "fullTitle": "ical-generator Index Event should export ICalEvent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEvent);",
                  "err": {},
                  "uuid": "a5248737-add3-4ed1-a6d3-6867b5c122bc",
                  "parentUUID": "76752783-0f75-4d8e-9ee4-659784973da1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEventStatus);",
                  "err": {},
                  "uuid": "89ed4098-14d2-4e9f-a796-9637681a12d4",
                  "parentUUID": "76752783-0f75-4d8e-9ee4-659784973da1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventBusyStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventBusyStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEventBusyStatus);",
                  "err": {},
                  "uuid": "1486a4ca-6900-4724-b031-c5a24420356b",
                  "parentUUID": "76752783-0f75-4d8e-9ee4-659784973da1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventTransparency",
                  "fullTitle": "ical-generator Index Event should export ICalEventTransparency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEventTransparency);",
                  "err": {},
                  "uuid": "3040bd62-7040-49af-8f71-54d778ac3749",
                  "parentUUID": "76752783-0f75-4d8e-9ee4-659784973da1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5248737-add3-4ed1-a6d3-6867b5c122bc",
                "89ed4098-14d2-4e9f-a796-9637681a12d4",
                "1486a4ca-6900-4724-b031-c5a24420356b",
                "3040bd62-7040-49af-8f71-54d778ac3749"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "08b18d68-a352-485c-82ec-c310879ac4df",
              "title": "Type",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEventRepeatingFreq",
                  "fullTitle": "ical-generator Index Type should export ICalEventRepeatingFreq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEventRepeatingFreq);",
                  "err": {},
                  "uuid": "b2117f6c-d0a5-4dd7-b756-49886c804eb7",
                  "parentUUID": "08b18d68-a352-485c-82ec-c310879ac4df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalWeekday",
                  "fullTitle": "ical-generator Index Type should export ICalWeekday",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalWeekday);",
                  "err": {},
                  "uuid": "f2aa4792-f844-4f2d-bf8e-3d5902ebfdf6",
                  "parentUUID": "08b18d68-a352-485c-82ec-c310879ac4df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2117f6c-d0a5-4dd7-b756-49886c804eb7",
                "f2aa4792-f844-4f2d-bf8e-3d5902ebfdf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e5727ba-683f-4b89-8515-48d316490ac3",
              "title": "Tools",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export formatDate",
                  "fullTitle": "ical-generator Index Tools should export formatDate",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(typeof src_1.formatDate === 'function');",
                  "err": {},
                  "uuid": "318c8e49-2a53-480d-8412-87090d67c8d9",
                  "parentUUID": "7e5727ba-683f-4b89-8515-48d316490ac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export formatDateTZ",
                  "fullTitle": "ical-generator Index Tools should export formatDateTZ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(typeof src_1.formatDateTZ === 'function');",
                  "err": {},
                  "uuid": "7195c015-046f-4276-a165-b84c0850e997",
                  "parentUUID": "7e5727ba-683f-4b89-8515-48d316490ac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export escape",
                  "fullTitle": "ical-generator Index Tools should export escape",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(typeof src_1.escape === 'function');",
                  "err": {},
                  "uuid": "0b2225a7-4d0a-4ab9-bda7-d8c6bde03def",
                  "parentUUID": "7e5727ba-683f-4b89-8515-48d316490ac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export foldLines",
                  "fullTitle": "ical-generator Index Tools should export foldLines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(typeof src_1.foldLines === 'function');",
                  "err": {},
                  "uuid": "d0c03915-9834-4b57-9a7e-0cfcd120a216",
                  "parentUUID": "7e5727ba-683f-4b89-8515-48d316490ac3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "318c8e49-2a53-480d-8412-87090d67c8d9",
                "7195c015-046f-4276-a165-b84c0850e997",
                "0b2225a7-4d0a-4ab9-bda7-d8c6bde03def",
                "d0c03915-9834-4b57-9a7e-0cfcd120a216"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d899cb04-c176-4562-a7bb-1ceb3f6a43d2",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6aae8a74-f209-4550-bfcc-d4e0239ec105",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: (0, moment_timezone_1.default)('2016-04-30T22:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "8d6a64f7-4f92-497c-8306-30e617410b67",
                  "parentUUID": "6aae8a74-f209-4550-bfcc-d4e0239ec105",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Brazil/East',\n    events: [{\n            start: (0, moment_timezone_1.default)('Sun May 01 2016 00:00:00 GMT-3'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "dcf818e6-78e0-41f1-9af3-6defdb4e7b09",
                  "parentUUID": "6aae8a74-f209-4550-bfcc-d4e0239ec105",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d6a64f7-4f92-497c-8306-30e617410b67",
                "dcf818e6-78e0-41f1-9af3-6defdb4e7b09"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "323a64d1-cdc1-4b97-ad8f-7590cfcdf4b9",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: (0, moment_timezone_1.default)('Sun May 01 2016 00:00:00 GMT+0200 (CEST)'),\n            end: (0, moment_timezone_1.default)('Sun May 01 2016 02:00:00 GMT+0200 (CEST)'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [types_1.ICalWeekday.SU],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "d14b9716-0082-4418-9422-efadbf2d017a",
                  "parentUUID": "323a64d1-cdc1-4b97-ad8f-7590cfcdf4b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking the first elemnt of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking the first elemnt of the byDay array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: (0, moment_timezone_1.default)('Sun May 01 2016 00:00:00 GMT+0200 (CEST)'),\n            end: (0, moment_timezone_1.default)('Sun May 01 2016 02:00:00 GMT+0200 (CEST)'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [types_1.ICalWeekday.MO, types_1.ICalWeekday.FR],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "3b0032ab-2254-47a3-9993-a353740c0638",
                  "parentUUID": "323a64d1-cdc1-4b97-ad8f-7590cfcdf4b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d14b9716-0082-4418-9422-efadbf2d017a",
                "3b0032ab-2254-47a3-9993-a353740c0638"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "afda3276-d6b8-4fdb-a020-8926261bd2e8",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: (0, moment_timezone_1.default)(1553219772000),\n            end: (0, moment_timezone_1.default)(1553219772000),\n            recurrenceId: (0, moment_timezone_1.default)(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "919aacf5-d2d1-469e-a2aa-0345af9934f2",
                  "parentUUID": "afda3276-d6b8-4fdb-a020-8926261bd2e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: (0, moment_timezone_1.default)(1553219772000),\n            end: (0, moment_timezone_1.default)(1553219772000),\n            recurrenceId: (0, moment_timezone_1.default)(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "9f79895d-7ec4-4295-b248-90183718ebff",
                  "parentUUID": "afda3276-d6b8-4fdb-a020-8926261bd2e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: (0, moment_timezone_1.default)(1553219772000),\n            end: (0, moment_timezone_1.default)(1553219772000),\n            recurrenceId: (0, moment_timezone_1.default)(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "9157302e-19ab-42ad-96a6-d024606a79e5",
                  "parentUUID": "afda3276-d6b8-4fdb-a020-8926261bd2e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "919aacf5-d2d1-469e-a2aa-0345af9934f2",
                "9f79895d-7ec4-4295-b248-90183718ebff",
                "9157302e-19ab-42ad-96a6-d024606a79e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b629ceb7-0856-48d2-b0f0-908f70cc1319",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: (0, moment_timezone_1.default)('2020-08-13T00:00:00+01:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: (0, moment_timezone_1.default)('2020-12-13T00:00:00+01:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('EXDATE;TZID=Europe/Berlin:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "ac6bde86-1193-44fe-9fdf-2ebc7b736e06",
                  "parentUUID": "b629ceb7-0856-48d2-b0f0-908f70cc1319",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'America/New_York',\n    events: [{\n            start: (0, moment_timezone_1.default)('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: (0, moment_timezone_1.default)('2020-12-13T00:00:00-05:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('EXDATE;TZID=America/New_York:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "e5d6aa87-6f3f-478e-b0f1-738426b921af",
                  "parentUUID": "b629ceb7-0856-48d2-b0f0-908f70cc1319",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac6bde86-1193-44fe-9fdf-2ebc7b736e06",
                "e5d6aa87-6f3f-478e-b0f1-738426b921af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a4e942f3-4b87-41d2-9409-b019bc88d2c7",
              "title": "Issue #236",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should look like in the example",
                  "fullTitle": "Issues Issue #236 should look like in the example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            location: {\n                title: 'Los Angeles, California, United States',\n                geo: {\n                    lon: -118.24368,\n                    lat: 34.05223,\n                },\n                radius: 400\n            }\n        }]\n});\nassert_1.default.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:Example Event',\n    'LOCATION:Los Angeles\\\\, California\\\\, United States',\n    'X-APPLE-STRUCTURED-LOCATION;VALUE=URI;X-APPLE-RADIUS=400;X-TITLE=Los Angel',\n    ' es\\\\, California\\\\, United States:geo:34.05223,-118.24368',\n    'GEO:34.05223;-118.24368',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "bf8916e3-2095-4a9e-b7cd-fae3d14fc7b9",
                  "parentUUID": "a4e942f3-4b87-41d2-9409-b019bc88d2c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf8916e3-2095-4a9e-b7cd-fae3d14fc7b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3e707671-4882-44dc-91fc-60c29e7ed9ff",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3373d1a5-c857-486d-8ac6-3e503b838f41",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "427d6bbf-9964-4e5a-92ef-61c9a1e146f6",
                  "title": "Date / String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, '2018-07-05T18:24:00.052Z', false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "f359f448-2b29-4a69-a2a7-1afaa9ac0d61",
                      "parentUUID": "427d6bbf-9964-4e5a-92ef-61c9a1e146f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, '2018-07-05T18:24:00.052Z', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "a2263bdc-ab39-48ff-87e9-b6b1d95b29aa",
                      "parentUUID": "427d6bbf-9964-4e5a-92ef-61c9a1e146f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, '2018-07-05T18:24:00.052Z', true, false), '20180705');",
                      "err": {},
                      "uuid": "7bbdc7b5-a020-4451-b842-b04b6bee807e",
                      "parentUUID": "427d6bbf-9964-4e5a-92ef-61c9a1e146f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, '2018-07-05T18:24:00.052Z', true, true), '20180705');",
                      "err": {},
                      "uuid": "233ab071-b3ff-48b2-a0af-63271cb6b72f",
                      "parentUUID": "427d6bbf-9964-4e5a-92ef-61c9a1e146f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Europe/Berlin', '2018-07-05T18:24:00.052', false, false), '20180705T182400');",
                      "err": {},
                      "uuid": "627c4e70-66df-4e05-add3-ac3e092f4b5f",
                      "parentUUID": "427d6bbf-9964-4e5a-92ef-61c9a1e146f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Europe/Berlin', '2018-07-05T18:24:00.052', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "005297c7-afac-4467-bfee-f324b02a1c8d",
                      "parentUUID": "427d6bbf-9964-4e5a-92ef-61c9a1e146f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Europe/Berlin', '2018-07-05T18:24:00.052', true, false), '20180705');",
                      "err": {},
                      "uuid": "5a9d4952-a251-4382-a280-b659696fc759",
                      "parentUUID": "427d6bbf-9964-4e5a-92ef-61c9a1e146f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Europe/Berlin', '2018-07-05T18:24:00.052', true, true), '20180705');",
                      "err": {},
                      "uuid": "76b322ef-aeb5-4da8-ae40-294975323a75",
                      "parentUUID": "427d6bbf-9964-4e5a-92ef-61c9a1e146f6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f359f448-2b29-4a69-a2a7-1afaa9ac0d61",
                    "a2263bdc-ab39-48ff-87e9-b6b1d95b29aa",
                    "7bbdc7b5-a020-4451-b842-b04b6bee807e",
                    "233ab071-b3ff-48b2-a0af-63271cb6b72f",
                    "627c4e70-66df-4e05-add3-ac3e092f4b5f",
                    "005297c7-afac-4467-bfee-f324b02a1c8d",
                    "5a9d4952-a251-4382-a280-b659696fc759",
                    "76b322ef-aeb5-4da8-ae40-294975323a75"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "61d5f038-ce4c-4d50-a102-8afddac25329",
                  "title": "moment.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, (0, moment_timezone_1.default)('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "797a23be-b0f0-4495-9115-d836410ad1a2",
                      "parentUUID": "61d5f038-ce4c-4d50-a102-8afddac25329",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Canada/Saskatchewan', (0, moment_timezone_1.default)('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "883e1f60-2cc7-4e09-a043-e844515b12dc",
                      "parentUUID": "61d5f038-ce4c-4d50-a102-8afddac25329",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, (0, moment_timezone_1.default)('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "2b6d950d-f43b-4048-aaf9-20f499a0f78f",
                      "parentUUID": "61d5f038-ce4c-4d50-a102-8afddac25329",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "797a23be-b0f0-4495-9115-d836410ad1a2",
                    "883e1f60-2cc7-4e09-a043-e844515b12dc",
                    "2b6d950d-f43b-4048-aaf9-20f499a0f78f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "7a5a5cf4-9b47-4707-b0a1-cf6216c39051",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work without setting a timezone",
                      "timedOut": false,
                      "duration": 43,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, luxon_1.DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "c0d08ef5-25d3-47ef-abfd-8ba2692ac76b",
                      "parentUUID": "7a5a5cf4-9b47-4707-b0a1-cf6216c39051",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Luxon should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Canada/Saskatchewan', luxon_1.DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "6fc75d6f-c1ce-4f9f-9864-8732bca51dcb",
                      "parentUUID": "7a5a5cf4-9b47-4707-b0a1-cf6216c39051",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with floating flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, luxon_1.DateTime.fromISO('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "485a3ab1-7d26-4e82-a5cc-38b764ac432c",
                      "parentUUID": "7a5a5cf4-9b47-4707-b0a1-cf6216c39051",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, luxon_1.DateTime.fromISO('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "f8612f7c-9ef7-4b06-91ef-6b4a30174eb4",
                      "parentUUID": "7a5a5cf4-9b47-4707-b0a1-cf6216c39051",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c0d08ef5-25d3-47ef-abfd-8ba2692ac76b",
                    "6fc75d6f-c1ce-4f9f-9864-8732bca51dcb",
                    "485a3ab1-7d26-4e82-a5cc-38b764ac432c",
                    "f8612f7c-9ef7-4b06-91ef-6b4a30174eb4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 47,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "53d96140-3433-46f0-8067-e0cef2896226",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Day.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, (0, dayjs_1.default)('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "fa86ee14-298e-42fb-a6da-2a9ee9e9404c",
                      "parentUUID": "53d96140-3433-46f0-8067-e0cef2896226",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Day.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Canada/Saskatchewan', (0, dayjs_1.default)('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "bc3d95ba-580a-410a-bce1-414b371847c3",
                      "parentUUID": "53d96140-3433-46f0-8067-e0cef2896226",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with floating flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, (0, dayjs_1.default)('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "4c4d22c6-cadc-4149-a2cd-23aceaeb9362",
                      "parentUUID": "53d96140-3433-46f0-8067-e0cef2896226",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, (0, dayjs_1.default)('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "bb6e3ae0-9ea1-4038-a799-b17662c55681",
                      "parentUUID": "53d96140-3433-46f0-8067-e0cef2896226",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fa86ee14-298e-42fb-a6da-2a9ee9e9404c",
                    "bc3d95ba-580a-410a-bce1-414b371847c3",
                    "4c4d22c6-cadc-4149-a2cd-23aceaeb9362",
                    "bb6e3ae0-9ea1-4038-a799-b17662c55681"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4317c539-bb55-4bd3-9305-d1c65640f671",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed = { timezone: 'Europe/Berlin' };\nassert_1.default.strictEqual((0, tools_1.formatDateTZ)('Europe/Berlin', 'DSTART', (0, moment_timezone_1.default)('2018-07-02T15:48:05.000Z'), ed), 'DSTART;TZID=Europe/Berlin:20180702T174805');",
                  "err": {},
                  "uuid": "3d8f2446-8374-4f15-be4a-703e5de1d1ea",
                  "parentUUID": "4317c539-bb55-4bd3-9305-d1c65640f671",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.formatDateTZ)(null, 'DSTART', '2018-07-02T15:48:05.000Z', {}), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "3812fdc3-b539-4b43-aa08-24054b8f698d",
                  "parentUUID": "4317c539-bb55-4bd3-9305-d1c65640f671",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without eventdata parameter",
                  "fullTitle": "ICalTools formatDateTZ() should work without eventdata parameter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.formatDateTZ)(null, 'DSTART', '2018-07-02T15:48:05.000Z'), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "c999c50e-ccb2-4c6e-951a-8cdbbc299f73",
                  "parentUUID": "4317c539-bb55-4bd3-9305-d1c65640f671",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d8f2446-8374-4f15-be4a-703e5de1d1ea",
                "3812fdc3-b539-4b43-aa08-24054b8f698d",
                "c999c50e-ccb2-4c6e-951a-8cdbbc299f73"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "57a4fdef-0cb0-4969-ae24-d43bdf17aff9",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem \\\\ipsum'), 'Lorem \\\\\\\\ipsum');",
                  "err": {},
                  "uuid": "06f1c2fe-0901-4e01-946b-83e98d36fa49",
                  "parentUUID": "57a4fdef-0cb0-4969-ae24-d43bdf17aff9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem ;ipsum'), 'Lorem \\\\;ipsum');",
                  "err": {},
                  "uuid": "18001d63-98b4-47b3-b41c-57028f1dd82e",
                  "parentUUID": "57a4fdef-0cb0-4969-ae24-d43bdf17aff9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem, ipsum'), 'Lorem\\\\, ipsum');",
                  "err": {},
                  "uuid": "d8a088ef-f71f-4470-b8f2-e1786f9208c3",
                  "parentUUID": "57a4fdef-0cb0-4969-ae24-d43bdf17aff9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem \\ripsum'), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "03e4c254-3aa3-48e5-b36d-9184372a45bd",
                  "parentUUID": "57a4fdef-0cb0-4969-ae24-d43bdf17aff9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem \\nipsum'), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "982a46cd-8bdf-45e6-af38-49f296e99f15",
                  "parentUUID": "57a4fdef-0cb0-4969-ae24-d43bdf17aff9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem \\r\\nipsum'), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "d7b1a35f-011e-45d6-8db5-816e68eecd82",
                  "parentUUID": "57a4fdef-0cb0-4969-ae24-d43bdf17aff9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06f1c2fe-0901-4e01-946b-83e98d36fa49",
                "18001d63-98b4-47b3-b41c-57028f1dd82e",
                "d8a088ef-f71f-4470-b8f2-e1786f9208c3",
                "03e4c254-3aa3-48e5-b36d-9184372a45bd",
                "982a46cd-8bdf-45e6-af38-49f296e99f15",
                "d7b1a35f-011e-45d6-8db5-816e68eecd82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9fdf46c7-57df-4980-80e0-d82153b0ec22",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.foldLines)('12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981'), '12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "43462af2-8263-4e86-8c73-8e5579d52c4a",
                  "parentUUID": "9fdf46c7-57df-4980-80e0-d82153b0ec22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.foldLines)('👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981'), '👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "df5cffc0-7766-4a30-8cc3-99fe9251820c",
                  "parentUUID": "9fdf46c7-57df-4980-80e0-d82153b0ec22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43462af2-8263-4e86-8c73-8e5579d52c4a",
                "df5cffc0-7766-4a30-8cc3-99fe9251820c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40e52063-11c9-4fdf-a8fd-8f6fa4211105",
              "title": "checkDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "ed57e5b5-672f-46ff-ba89-067e69944f1f",
                  "title": "Date",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Date",
                      "fullTitle": "ICalTools checkDate() Date should work with valid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date();\nassert_1.default.equal((0, tools_1.checkDate)(date, 'foo'), date);",
                      "err": {},
                      "uuid": "5405d999-0028-4527-abd1-d4a4a8c5ed46",
                      "parentUUID": "ed57e5b5-672f-46ff-ba89-067e69944f1f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Date",
                      "fullTitle": "ICalTools checkDate() Date should throw error for invalid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date('foo');\nassert_1.default.throws(() => {\n    (0, tools_1.checkDate)(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "2f6c25db-641d-47c7-9ec9-3ac4d3d95af7",
                      "parentUUID": "ed57e5b5-672f-46ff-ba89-067e69944f1f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5405d999-0028-4527-abd1-d4a4a8c5ed46",
                    "2f6c25db-641d-47c7-9ec9-3ac4d3d95af7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "612a4644-a360-4b1e-91ce-0512880c45e0",
                  "title": "String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid String",
                      "fullTitle": "ICalTools checkDate() String should work with valid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = '2021-03-28T13:15:23.587Z';\nassert_1.default.equal((0, tools_1.checkDate)(date, 'foo'), date);",
                      "err": {},
                      "uuid": "427e2879-ca03-4e80-950d-7b388ef2b5e4",
                      "parentUUID": "612a4644-a360-4b1e-91ce-0512880c45e0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid String",
                      "fullTitle": "ICalTools checkDate() String should throw error for invalid String",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = 'foo';\nassert_1.default.throws(() => {\n    (0, tools_1.checkDate)(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "070ea652-1e5b-4460-9d67-a13929d9e2a2",
                      "parentUUID": "612a4644-a360-4b1e-91ce-0512880c45e0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "427e2879-ca03-4e80-950d-7b388ef2b5e4",
                    "070ea652-1e5b-4460-9d67-a13929d9e2a2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "524a4769-7163-4bea-b8c7-2a59784c49c9",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should work with valid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = luxon_1.DateTime.now();\nassert_1.default.equal((0, tools_1.checkDate)(date, 'foo'), date);",
                      "err": {},
                      "uuid": "b3e8bb9b-5f3e-4875-af82-e767485cec47",
                      "parentUUID": "524a4769-7163-4bea-b8c7-2a59784c49c9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should throw error for invalid Luxon",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = luxon_1.DateTime.fromISO('foo');\nassert_1.default.throws(() => {\n    (0, tools_1.checkDate)(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "92d7a1c8-6637-4995-bf68-0a9102e9e3fd",
                      "parentUUID": "524a4769-7163-4bea-b8c7-2a59784c49c9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b3e8bb9b-5f3e-4875-af82-e767485cec47",
                    "92d7a1c8-6637-4995-bf68-0a9102e9e3fd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b229897b-af50-412f-b31e-b9366c763694",
                  "title": "Moment",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should work with valid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = (0, moment_timezone_1.default)();\nassert_1.default.equal((0, tools_1.checkDate)(date, 'foo'), date);",
                      "err": {},
                      "uuid": "2fb8c164-db15-4682-b4ed-eac5bedd0c9e",
                      "parentUUID": "b229897b-af50-412f-b31e-b9366c763694",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should throw error for invalid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = (0, moment_timezone_1.default)('foo');\nassert_1.default.throws(() => {\n    (0, tools_1.checkDate)(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "70a1b319-96c5-4c93-8bb1-078a5d05b628",
                      "parentUUID": "b229897b-af50-412f-b31e-b9366c763694",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2fb8c164-db15-4682-b4ed-eac5bedd0c9e",
                    "70a1b319-96c5-4c93-8bb1-078a5d05b628"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "5de78906-a354-40ec-a9f8-775175e0db55",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should work with valid Day.js",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = (0, dayjs_1.default)();\nassert_1.default.equal((0, tools_1.checkDate)(date, 'foo'), date);",
                      "err": {},
                      "uuid": "7228dbd4-1a30-47d4-85aa-0f6f524bba4c",
                      "parentUUID": "5de78906-a354-40ec-a9f8-775175e0db55",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should throw error for invalid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = (0, dayjs_1.default)('foo');\nassert_1.default.throws(() => {\n    (0, tools_1.checkDate)(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "637a6c0b-7c35-41ba-a28c-962efb3799cc",
                      "parentUUID": "5de78906-a354-40ec-a9f8-775175e0db55",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7228dbd4-1a30-47d4-85aa-0f6f524bba4c",
                    "637a6c0b-7c35-41ba-a28c-962efb3799cc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "551bc837-e300-489d-998b-7dbcc8201697",
              "title": "toDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with strings",
                  "fullTitle": "ICalTools toDate() should work with strings",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual((0, tools_1.toDate)(date.toJSON()), date);",
                  "err": {},
                  "uuid": "d405fde2-16b8-42fc-9cf4-4867424eb9cd",
                  "parentUUID": "551bc837-e300-489d-998b-7dbcc8201697",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with native Date",
                  "fullTitle": "ICalTools toDate() should work with native Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual((0, tools_1.toDate)(date), date);",
                  "err": {},
                  "uuid": "03c077b6-4a15-4b96-aa43-c7140dd5f90a",
                  "parentUUID": "551bc837-e300-489d-998b-7dbcc8201697",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment object",
                  "fullTitle": "ICalTools toDate() should work with moment object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual((0, tools_1.toDate)((0, moment_timezone_1.default)(date)), date);",
                  "err": {},
                  "uuid": "cba69183-cfd0-4617-a1fa-aa62c940761f",
                  "parentUUID": "551bc837-e300-489d-998b-7dbcc8201697",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Day.js object",
                  "fullTitle": "ICalTools toDate() should work with Day.js object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual((0, tools_1.toDate)((0, dayjs_1.default)(date)), date);",
                  "err": {},
                  "uuid": "4d714119-90ac-48bc-bfad-ec1ebd2ede6f",
                  "parentUUID": "551bc837-e300-489d-998b-7dbcc8201697",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with luxon DateTime object",
                  "fullTitle": "ICalTools toDate() should work with luxon DateTime object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual((0, tools_1.toDate)(luxon_1.DateTime.fromJSDate(date)), date);",
                  "err": {},
                  "uuid": "bbfd7fb7-2d62-49b1-a678-8758c8355f6e",
                  "parentUUID": "551bc837-e300-489d-998b-7dbcc8201697",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d405fde2-16b8-42fc-9cf4-4867424eb9cd",
                "03c077b6-4a15-4b96-aa43-c7140dd5f90a",
                "cba69183-cfd0-4617-a1fa-aa62c940761f",
                "4d714119-90ac-48bc-bfad-ec1ebd2ede6f",
                "bbfd7fb7-2d62-49b1-a678-8758c8355f6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.1"
    },
    "marge": {
      "options": null,
      "version": "6.1.1"
    }
  }
}