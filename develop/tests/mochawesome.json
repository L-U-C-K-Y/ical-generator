{
  "stats": {
    "suites": 126,
    "tests": 428,
    "passes": 428,
    "pending": 0,
    "failures": 0,
    "start": "2022-05-01T21:27:00.682Z",
    "end": "2022-05-01T21:27:00.949Z",
    "duration": 267,
    "testsRegistered": 428,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ab05f971-bece-4a02-94b6-c5bd10926898",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d7e60fcd-2e7d-4b68-92f6-45dccc71fe2e",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3308bc24-07f1-4e81-8d27-264f4fa17af9",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    // @ts-ignore\n    new alarm_1.default({ type: alarm_1.ICalAlarmType.display }, null);\n}, /`event`/);",
                  "err": {},
                  "uuid": "1ebb47d8-27ff-4b47-be2e-5122c69b4466",
                  "parentUUID": "3308bc24-07f1-4e81-8d27-264f4fa17af9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    // @ts-ignore\n    unknown: true,\n    type: alarm_1.ICalAlarmType.display\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.type(), 'display');",
                  "err": {},
                  "uuid": "0fc06f18-a4e3-4bf5-af6e-1f9610c0b67e",
                  "parentUUID": "3308bc24-07f1-4e81-8d27-264f4fa17af9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ebb47d8-27ff-4b47-be2e-5122c69b4466",
                "0fc06f18-a4e3-4bf5-af6e-1f9610c0b67e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "41802a7b-2c65-4725-ae45-ae28090e1a2b",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.type(null));\nassert_1.default.deepStrictEqual(a, a.type(alarm_1.ICalAlarmType.display));",
                  "err": {},
                  "uuid": "fca1d067-8363-4cba-a19e-f384a8f9479c",
                  "parentUUID": "41802a7b-2c65-4725-ae45-ae28090e1a2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.type(), null);\na.type(alarm_1.ICalAlarmType.display);\nassert_1.default.strictEqual(a.type(), 'display');\na.type(null);\nassert_1.default.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "37189131-3b81-43c8-afd9-7bf494f6d300",
                  "parentUUID": "41802a7b-2c65-4725-ae45-ae28090e1a2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.type('BANANA');\n}, /`type`/);",
                  "err": {},
                  "uuid": "6b951a7c-925d-49a1-8908-a8aab4438939",
                  "parentUUID": "41802a7b-2c65-4725-ae45-ae28090e1a2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 60 * 10\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('ACTION:DISPLAY') > -1);",
                  "err": {},
                  "uuid": "66e665aa-7dfa-410b-9f71-9516bd59dab9",
                  "parentUUID": "41802a7b-2c65-4725-ae45-ae28090e1a2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fca1d067-8363-4cba-a19e-f384a8f9479c",
                "37189131-3b81-43c8-afd9-7bf494f6d300",
                "6b951a7c-925d-49a1-8908-a8aab4438939",
                "66e665aa-7dfa-410b-9f71-9516bd59dab9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b0aa5067-9290-42ff-ba96-8673f66aa6ec",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.trigger(null));\nassert_1.default.deepStrictEqual(a, a.trigger(60 * 10));",
                  "err": {},
                  "uuid": "33791ff8-64ba-4623-a3ae-1d5bdf30c703",
                  "parentUUID": "b0aa5067-9290-42ff-ba96-8673f66aa6ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nconst now = new Date();\nassert_1.default.strictEqual(a.trigger(), null);\nassert_1.default.strictEqual(a.triggerAfter(), null);\na.trigger(300);\nassert_1.default.strictEqual(a.trigger(), 300);\nassert_1.default.strictEqual(a.triggerAfter(), -300);\n// Date\na.trigger(now);\nconst dateResult = a.trigger();\nassert_1.default.deepStrictEqual(dateResult, now);\n// Null\na.trigger(null);\nassert_1.default.strictEqual(a.trigger(), null);\nassert_1.default.strictEqual(a.triggerAfter(), null);",
                  "err": {},
                  "uuid": "f4441be1-ca09-4555-8ee5-eebac16fb9cf",
                  "parentUUID": "b0aa5067-9290-42ff-ba96-8673f66aa6ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.trigger(Infinity);\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.trigger('hi');\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.trigger(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "f0696ae4-c02f-402f-ac30-ed52ccfdf10b",
                  "parentUUID": "b0aa5067-9290-42ff-ba96-8673f66aa6ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(60 * 10);\na.trigger(null);\nassert_1.default.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "f63660d2-235d-450e-9d8f-9defb8adfb39",
                  "parentUUID": "b0aa5067-9290-42ff-ba96-8673f66aa6ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(new Date());\nassert_1.default.ok(a.trigger() instanceof Date);",
                  "err": {},
                  "uuid": "334cb83e-85c9-47e5-94c6-a316184765be",
                  "parentUUID": "b0aa5067-9290-42ff-ba96-8673f66aa6ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger((0, moment_timezone_1.default)());\nassert_1.default.ok(moment_timezone_1.default.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "6d06ed42-0fbc-476f-a7c3-a917dcadb726",
                  "parentUUID": "b0aa5067-9290-42ff-ba96-8673f66aa6ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(2 * 60);\nassert_1.default.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "40d81d5f-8e20-4642-9982-ce30f71ef88c",
                  "parentUUID": "b0aa5067-9290-42ff-ba96-8673f66aa6ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = (0, moment_timezone_1.default)('2015-02-01T13:38:45.000Z');\nconst a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, trigger: 60 * 10 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.trigger(trigger);\nassert_1.default.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "3927ed13-873f-429f-9da9-2b824ee8ec0c",
                  "parentUUID": "b0aa5067-9290-42ff-ba96-8673f66aa6ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33791ff8-64ba-4623-a3ae-1d5bdf30c703",
                "f4441be1-ca09-4555-8ee5-eebac16fb9cf",
                "f0696ae4-c02f-402f-ac30-ed52ccfdf10b",
                "f63660d2-235d-450e-9d8f-9defb8adfb39",
                "334cb83e-85c9-47e5-94c6-a316184765be",
                "6d06ed42-0fbc-476f-a7c3-a917dcadb726",
                "40d81d5f-8e20-4642-9982-ce30f71ef88c",
                "3927ed13-873f-429f-9da9-2b824ee8ec0c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3396f65-d157-4a50-bed3-9d39c16dfbab",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.triggerAfter(60 * 10));",
                  "err": {},
                  "uuid": "d696739a-b63f-411e-8947-50096a4659b4",
                  "parentUUID": "b3396f65-d157-4a50-bed3-9d39c16dfbab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default())).triggerAfter(300);\nassert_1.default.strictEqual(a.triggerAfter(), 300);\nassert_1.default.strictEqual(a.trigger(), -300);",
                  "err": {},
                  "uuid": "fe3027e2-0978-43fd-8baf-5005ee39a5ac",
                  "parentUUID": "b3396f65-d157-4a50-bed3-9d39c16dfbab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerAfter(120);\nassert_1.default.strictEqual(a.trigger(), -120);",
                  "err": {},
                  "uuid": "30da8ab3-38d3-433e-8796-325831a98819",
                  "parentUUID": "b3396f65-d157-4a50-bed3-9d39c16dfbab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.triggerAfter(Infinity);\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerAfter('hi');\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerAfter(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "d645bc6b-c842-48b9-8cc0-01e04e5d6742",
                  "parentUUID": "b3396f65-d157-4a50-bed3-9d39c16dfbab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = (0, moment_timezone_1.default)('20150201T133845Z');\nconst a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, triggerAfter: 60 * 10 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('TRIGGER;RELATED=END:PT10M') > -1);\na.triggerAfter(trigger);\nassert_1.default.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "3639ee58-57f6-4c91-8943-d2ca9c1fa0f4",
                  "parentUUID": "b3396f65-d157-4a50-bed3-9d39c16dfbab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d696739a-b63f-411e-8947-50096a4659b4",
                "fe3027e2-0978-43fd-8baf-5005ee39a5ac",
                "30da8ab3-38d3-433e-8796-325831a98819",
                "d645bc6b-c842-48b9-8cc0-01e04e5d6742",
                "3639ee58-57f6-4c91-8943-d2ca9c1fa0f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "243af321-a5f4-4735-a3f8-3a4139052339",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.triggerBefore(null));\nassert_1.default.deepStrictEqual(a, a.triggerBefore(60 * 10));",
                  "err": {},
                  "uuid": "78f5b495-04e4-484a-bd9f-17b9b12276dc",
                  "parentUUID": "243af321-a5f4-4735-a3f8-3a4139052339",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nconst now = new Date();\nassert_1.default.strictEqual(a.triggerBefore(), null);\na.trigger(300);\nassert_1.default.strictEqual(a.triggerBefore(), 300);\n// Date\na.trigger(now);\nconst dateResult = a.triggerBefore();\nassert_1.default.deepStrictEqual(dateResult, now);\n// Null\na.trigger(null);\nassert_1.default.strictEqual(a.triggerBefore(), null);",
                  "err": {},
                  "uuid": "07ba2d08-2747-4320-b7af-d5241ae6255e",
                  "parentUUID": "243af321-a5f4-4735-a3f8-3a4139052339",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.triggerBefore(Infinity);\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerBefore('hi');\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerBefore(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "b89dcfa1-f10d-4971-9a38-97a00177f8fd",
                  "parentUUID": "243af321-a5f4-4735-a3f8-3a4139052339",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore(60 * 10);\na.triggerBefore(null);\nassert_1.default.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "d6544a59-c7e7-469d-be80-8ba9611161b2",
                  "parentUUID": "243af321-a5f4-4735-a3f8-3a4139052339",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nconst now = new Date();\na.triggerBefore(now);\nassert_1.default.deepStrictEqual(a.trigger(), now);",
                  "err": {},
                  "uuid": "2b3a5464-517a-4487-8af3-fcb92f9cdbb2",
                  "parentUUID": "243af321-a5f4-4735-a3f8-3a4139052339",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore((0, moment_timezone_1.default)());\nassert_1.default.ok(moment_timezone_1.default.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "0920d0ab-ca33-471d-9c61-a43747cb4602",
                  "parentUUID": "243af321-a5f4-4735-a3f8-3a4139052339",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore(2 * 60);\nassert_1.default.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "ef4cec54-cb84-40ad-a26f-8f08114a841f",
                  "parentUUID": "243af321-a5f4-4735-a3f8-3a4139052339",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = (0, moment_timezone_1.default)('2015-02-01T13:38:45.000Z');\nconst a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, triggerBefore: 60 * 10 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.triggerBefore(trigger);\nassert_1.default.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "5edc458e-cc46-43ea-80e5-a4c1a6597c31",
                  "parentUUID": "243af321-a5f4-4735-a3f8-3a4139052339",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78f5b495-04e4-484a-bd9f-17b9b12276dc",
                "07ba2d08-2747-4320-b7af-d5241ae6255e",
                "b89dcfa1-f10d-4971-9a38-97a00177f8fd",
                "d6544a59-c7e7-469d-be80-8ba9611161b2",
                "2b3a5464-517a-4487-8af3-fcb92f9cdbb2",
                "0920d0ab-ca33-471d-9c61-a43747cb4602",
                "ef4cec54-cb84-40ad-a26f-8f08114a841f",
                "5edc458e-cc46-43ea-80e5-a4c1a6597c31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "906449ae-1963-4b41-a7e4-9e6a11901863",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.repeat(null));\nassert_1.default.deepStrictEqual(a, a.repeat(4));",
                  "err": {},
                  "uuid": "af8c29d8-b754-4ca9-b051-86098e900918",
                  "parentUUID": "906449ae-1963-4b41-a7e4-9e6a11901863",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.repeat(), null);\na.repeat(100);\nassert_1.default.strictEqual(a.repeat(), 100);\na.repeat(null);\nassert_1.default.strictEqual(a.repeat(), null);",
                  "err": {},
                  "uuid": "a69965c0-ac7b-4397-996e-d53d4d90f666",
                  "parentUUID": "906449ae-1963-4b41-a7e4-9e6a11901863",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.repeat(Infinity);\n}, /`repeat`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.repeat('hi');\n}, /`repeat`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.repeat(true);\n}, /`repeat`/);",
                  "err": {},
                  "uuid": "f3f1c2ea-6400-4110-90cf-4843418ff53b",
                  "parentUUID": "906449ae-1963-4b41-a7e4-9e6a11901863",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 60\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('REPEAT:42') > -1);",
                  "err": {},
                  "uuid": "ef64d346-64aa-4cc8-b09f-d32377d63d98",
                  "parentUUID": "906449ae-1963-4b41-a7e4-9e6a11901863",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af8c29d8-b754-4ca9-b051-86098e900918",
                "a69965c0-ac7b-4397-996e-d53d4d90f666",
                "f3f1c2ea-6400-4110-90cf-4843418ff53b",
                "ef64d346-64aa-4cc8-b09f-d32377d63d98"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b1dabcaa-9c82-4bcf-937c-fc652dd77c58",
              "title": "interval()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm interval() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.interval(null));\nassert_1.default.deepStrictEqual(a, a.interval(60));",
                  "err": {},
                  "uuid": "5f0ca227-f92d-469f-99a4-f3909bac6ff8",
                  "parentUUID": "b1dabcaa-9c82-4bcf-937c-fc652dd77c58",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm interval() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.interval(), null);\na.interval(30);\nassert_1.default.strictEqual(a.interval(), 30);\na.interval(null);\nassert_1.default.strictEqual(a.interval(), null);",
                  "err": {},
                  "uuid": "1c139bed-f60a-489e-8ae0-21ad1354e2b7",
                  "parentUUID": "b1dabcaa-9c82-4bcf-937c-fc652dd77c58",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm interval() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.interval(Infinity);\n}, /`interval`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.interval('hi');\n}, /`interval`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.interval(true);\n}, /`interval`/);",
                  "err": {},
                  "uuid": "3a722f4c-47af-46cc-a2d5-bbaa108f979b",
                  "parentUUID": "b1dabcaa-9c82-4bcf-937c-fc652dd77c58",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm interval() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 90\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('DURATION:PT1M30S') > -1);",
                  "err": {},
                  "uuid": "9580f4b4-a37b-4879-a7e6-a730ae00a53b",
                  "parentUUID": "b1dabcaa-9c82-4bcf-937c-fc652dd77c58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f0ca227-f92d-469f-99a4-f3909bac6ff8",
                "1c139bed-f60a-489e-8ae0-21ad1354e2b7",
                "3a722f4c-47af-46cc-a2d5-bbaa108f979b",
                "9580f4b4-a37b-4879-a7e6-a730ae00a53b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "387a3073-ea6f-4b91-a160-b1cd081356a5",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.attach(null));\nassert_1.default.deepStrictEqual(a, a.attach('https://sebbo.net/beep.aud'));",
                  "err": {},
                  "uuid": "fd888053-3ba0-4457-a530-92926d1d8bce",
                  "parentUUID": "387a3073-ea6f-4b91-a160-b1cd081356a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t = { uri: 'https://example.com/alarm.aud', mime: 'audio/basic' };\nconst a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.attach(), null);\na.attach(t);\nassert_1.default.deepStrictEqual(a.attach(), t);\na.attach('https://www.example.com/beep.aud');\nassert_1.default.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach({\n    uri: 'https://www.example.com/beep.aud'\n});\nassert_1.default.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach(null);\nassert_1.default.strictEqual(a.attach(), null);",
                  "err": {},
                  "uuid": "7c58ada2-a05d-4fc4-b535-7072ae8ed8f7",
                  "parentUUID": "387a3073-ea6f-4b91-a160-b1cd081356a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.attach({ mime: 'audio/basic' });\n}, /`attach.uri`/);",
                  "err": {},
                  "uuid": "9eba2643-2fd2-4acc-b1f4-13dc1a1f8db7",
                  "parentUUID": "387a3073-ea6f-4b91-a160-b1cd081356a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.attach(Infinity);\n}, /`attachment`/);",
                  "err": {},
                  "uuid": "2916498f-c179-448d-a34a-1ef8a9b3bbb0",
                  "parentUUID": "387a3073-ea6f-4b91-a160-b1cd081356a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.audio,\n    trigger: 300\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:Basso') > -1);\na.attach('https://example.com/beep.aud');\nassert_1.default.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud') > -1);\na.attach({\n    uri: 'https://example.com/beep.aud',\n    mime: 'audio/basic'\n});\nassert_1.default.ok(a.toString().indexOf('\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud') > -1);",
                  "err": {},
                  "uuid": "9b699ba5-6215-4a77-bf5c-47c762c941c7",
                  "parentUUID": "387a3073-ea6f-4b91-a160-b1cd081356a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd888053-3ba0-4457-a530-92926d1d8bce",
                "7c58ada2-a05d-4fc4-b535-7072ae8ed8f7",
                "9eba2643-2fd2-4acc-b1f4-13dc1a1f8db7",
                "2916498f-c179-448d-a34a-1ef8a9b3bbb0",
                "9b699ba5-6215-4a77-bf5c-47c762c941c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "88ec3d17-ad94-4f2d-b413-c4519e4c27e0",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.description(null));\nassert_1.default.deepStrictEqual(a, a.description('Hey Ho!'));",
                  "err": {},
                  "uuid": "cd3d2681-c505-4d8e-b11f-2480fdb55233",
                  "parentUUID": "88ec3d17-ad94-4f2d-b413-c4519e4c27e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a.description(), null);\na.description('blablabla');\nassert_1.default.deepStrictEqual(a.description(), 'blablabla');\na.description(null);\nassert_1.default.deepStrictEqual(a.description(), null);",
                  "err": {},
                  "uuid": "6150ab23-17b5-4de6-a186-c70214efa978",
                  "parentUUID": "88ec3d17-ad94-4f2d-b413-c4519e4c27e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    description: 'Huibuh!'\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Huibuh') > -1);",
                  "err": {},
                  "uuid": "f6f26ff3-c44b-4d2a-b2db-3f2c0bd80e0a",
                  "parentUUID": "88ec3d17-ad94-4f2d-b413-c4519e4c27e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300\n}, new event_1.default({\n    summary: 'Example Event'\n}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Example Event') > -1);",
                  "err": {},
                  "uuid": "0dcaf860-e306-4728-b26f-db5abfdc27d0",
                  "parentUUID": "88ec3d17-ad94-4f2d-b413-c4519e4c27e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd3d2681-c505-4d8e-b11f-2480fdb55233",
                "6150ab23-17b5-4de6-a186-c70214efa978",
                "f6f26ff3-c44b-4d2a-b2db-3f2c0bd80e0a",
                "0dcaf860-e306-4728-b26f-db5abfdc27d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1daa928c-4d71-4057-a99b-13fde3965571",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "045e749c-6598-486a-9760-0210289921f9",
                  "parentUUID": "1daa928c-4d71-4057-a99b-13fde3965571",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "045e749c-6598-486a-9760-0210289921f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "630366da-88b3-4eab-a0fd-521179ff7e4a",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.type(alarm_1.ICalAlarmType.display);\na.trigger(120);\nassert_1.default.deepStrictEqual(a.toJSON(), {\n    attach: null,\n    description: null,\n    interval: null,\n    repeat: null,\n    trigger: 120,\n    type: 'display',\n    x: []\n});",
                  "err": {},
                  "uuid": "9b45625b-6463-4239-aa88-d40504bff37a",
                  "parentUUID": "630366da-88b3-4eab-a0fd-521179ff7e4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Alarm toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nnew alarm_1.default(a.toJSON(), new event_1.default({}, new calendar_1.default()));",
                  "err": {},
                  "uuid": "8a45bff1-e022-4ed9-98ac-06015f6f2a09",
                  "parentUUID": "630366da-88b3-4eab-a0fd-521179ff7e4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b45625b-6463-4239-aa88-d40504bff37a",
                "8a45bff1-e022-4ed9-98ac-06015f6f2a09"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e8c441e-f24c-4406-8ae6-c6b96a6f8ac5",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without type",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({ trigger: 300 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /`type`/);",
                  "err": {},
                  "uuid": "c35b7f04-1649-43f4-9e15-06bfcf242c74",
                  "parentUUID": "3e8c441e-f24c-4406-8ae6-c6b96a6f8ac5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without trigger",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without trigger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "bb793333-6c7c-4191-8c61-18766e50bb2a",
                  "parentUUID": "3e8c441e-f24c-4406-8ae6-c6b96a6f8ac5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, trigger: 300, repeat: 4 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /for `interval`/);",
                  "err": {},
                  "uuid": "05cda97e-03fc-4547-93e2-bf618a331743",
                  "parentUUID": "3e8c441e-f24c-4406-8ae6-c6b96a6f8ac5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    interval: 60\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /for `repeat`/);",
                  "err": {},
                  "uuid": "1ac878b6-0109-4b75-880e-288694f2d9e3",
                  "parentUUID": "3e8c441e-f24c-4406-8ae6-c6b96a6f8ac5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c35b7f04-1649-43f4-9e15-06bfcf242c74",
                "bb793333-6c7c-4191-8c61-18766e50bb2a",
                "05cda97e-03fc-4547-93e2-bf618a331743",
                "1ac878b6-0109-4b75-880e-288694f2d9e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dee37b2d-958b-48cd-a9a1-a64ad962c822",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c9d66147-6275-4a30-a97a-e8900d93f5d5",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Attendee constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    name: 'John Doe',\n    email: 'john@example.org',\n    mailto: 'john+calendar@example.org',\n    sentBy: null,\n    status: attendee_1.ICalAttendeeStatus.ACCEPTED,\n    role: attendee_1.ICalAttendeeRole.REQ,\n    rsvp: false,\n    type: attendee_1.ICalAttendeeType.INDIVIDUAL,\n    delegatedTo: null,\n    delegatedFrom: null,\n    x: []\n};\nconst event = new attendee_1.default(data, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "dd3b2c60-9a0d-4064-821d-e814ffb5931e",
                  "parentUUID": "c9d66147-6275-4a30-a97a-e8900d93f5d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    // @ts-ignore\n    new attendee_1.default({ email: 'foo@bar.com' });\n}, /`event`/);",
                  "err": {},
                  "uuid": "2cae8a3c-3b95-495d-b2be-4389dae72073",
                  "parentUUID": "c9d66147-6275-4a30-a97a-e8900d93f5d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd3b2c60-9a0d-4064-821d-e814ffb5931e",
                "2cae8a3c-3b95-495d-b2be-4389dae72073"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca7cae18-7deb-4a6b-b67e-8cccafae94e0",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.name(), null);\na.name('Sebastian');\nassert_1.default.strictEqual(a.name(), 'Sebastian');",
                  "err": {},
                  "uuid": "2c347d9e-5ed1-4d85-81de-ceac5cf8c516",
                  "parentUUID": "ca7cae18-7deb-4a6b-b67e-8cccafae94e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.name(null));\nassert_1.default.deepStrictEqual(a, a.name('Sebastian'));",
                  "err": {},
                  "uuid": "a7a04306-3f45-4c1a-ab90-aedf2e2ea862",
                  "parentUUID": "ca7cae18-7deb-4a6b-b67e-8cccafae94e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\na.name('Sebastian');\nassert_1.default.strictEqual(a.name(), 'Sebastian');\na.name(null);\nassert_1.default.strictEqual(a.name(), null);",
                  "err": {},
                  "uuid": "454a9a29-6621-490e-a965-2da6221d4d3f",
                  "parentUUID": "ca7cae18-7deb-4a6b-b67e-8cccafae94e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c347d9e-5ed1-4d85-81de-ceac5cf8c516",
                "a7a04306-3f45-4c1a-ab90-aedf2e2ea862",
                "454a9a29-6621-490e-a965-2da6221d4d3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d9b39317-78ff-4dcd-bfab-25f3c72a0842",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default())).email('foo@example.com');\nassert_1.default.strictEqual(a.email(), 'foo@example.com');",
                  "err": {},
                  "uuid": "9b8fdc45-fe9e-4b42-90d6-1f2d61024531",
                  "parentUUID": "d9b39317-78ff-4dcd-bfab-25f3c72a0842",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.email('foo@example.com'));",
                  "err": {},
                  "uuid": "1795b395-ebd0-43d8-a626-3c9726cf7333",
                  "parentUUID": "d9b39317-78ff-4dcd-bfab-25f3c72a0842",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('mail@example.com') > -1);",
                  "err": {},
                  "uuid": "24628d23-6cc3-4c39-8ad9-5beefdeac7d5",
                  "parentUUID": "d9b39317-78ff-4dcd-bfab-25f3c72a0842",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b8fdc45-fe9e-4b42-90d6-1f2d61024531",
                "1795b395-ebd0-43d8-a626-3c9726cf7333",
                "24628d23-6cc3-4c39-8ad9-5beefdeac7d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a38763ec-7c16-42ed-8843-d676cb4e9e96",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.mailto(), null);\na.mailto('foo@example.com');\nassert_1.default.strictEqual(a.mailto(), 'foo@example.com');",
                  "err": {},
                  "uuid": "9a189c93-b4de-426a-9dc3-c170ccd3e76a",
                  "parentUUID": "a38763ec-7c16-42ed-8843-d676cb4e9e96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.mailto(null));\nassert_1.default.deepStrictEqual(a, a.mailto('foo@example.com'));",
                  "err": {},
                  "uuid": "3e683202-0abb-480b-8e62-52c06c9afce3",
                  "parentUUID": "a38763ec-7c16-42ed-8843-d676cb4e9e96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com' }, new event_1.default({}, new calendar_1.default()));\na.mailto('mail2@example2.com');\nassert_1.default.ok(a.toString().indexOf('EMAIL=mail@example.com') > -1 &&\n    a.toString().indexOf('MAILTO:mail2@example2.com') > -1);",
                  "err": {},
                  "uuid": "8278f076-957e-4eef-8399-fe5db77deaf0",
                  "parentUUID": "a38763ec-7c16-42ed-8843-d676cb4e9e96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a189c93-b4de-426a-9dc3-c170ccd3e76a",
                "3e683202-0abb-480b-8e62-52c06c9afce3",
                "8278f076-957e-4eef-8399-fe5db77deaf0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5cb64d03-a460-481c-9485-f95c0693faeb",
              "title": "sentBy()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee sentBy() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default())).sentBy('foo@example.com');\nassert_1.default.strictEqual(a.sentBy(), 'foo@example.com');",
                  "err": {},
                  "uuid": "69a6fb1b-abd6-40b8-ad60-af6ab4e7f559",
                  "parentUUID": "5cb64d03-a460-481c-9485-f95c0693faeb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee sentBy() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.sentBy('foo@example.com'));",
                  "err": {},
                  "uuid": "1284da85-ce22-473a-8d2e-7b464d4271e7",
                  "parentUUID": "5cb64d03-a460-481c-9485-f95c0693faeb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee sentBy() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'foo@example.com', sentBy: 'bar@example.com' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().includes('bar@example.com'));",
                  "err": {},
                  "uuid": "c3b90515-af0b-471d-9981-4b8a88f54b12",
                  "parentUUID": "5cb64d03-a460-481c-9485-f95c0693faeb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69a6fb1b-abd6-40b8-ad60-af6ab4e7f559",
                "1284da85-ce22-473a-8d2e-7b464d4271e7",
                "c3b90515-af0b-471d-9981-4b8a88f54b12"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a48cbebb-c08a-4e7b-982c-a85bdf737ce9",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.role(attendee_1.ICalAttendeeRole.REQ));",
                  "err": {},
                  "uuid": "c9f8a78f-731e-44b0-915b-e2c593a48bda",
                  "parentUUID": "a48cbebb-c08a-4e7b-982c-a85bdf737ce9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default())).role(attendee_1.ICalAttendeeRole.REQ);\nassert_1.default.strictEqual(a.role(), 'REQ-PARTICIPANT');",
                  "err": {},
                  "uuid": "2f31ca9f-eded-4a27-a731-a666d517d433",
                  "parentUUID": "a48cbebb-c08a-4e7b-982c-a85bdf737ce9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.role('');\n}, /Input must be one of the following: CHAIR, REQ-PARTICIPANT, OPT-PARTICIPANT, NON-PARTICIPANT/);",
                  "err": {},
                  "uuid": "e387a84b-d253-4d0a-85dc-39c1a1fe9b0d",
                  "parentUUID": "a48cbebb-c08a-4e7b-982c-a85bdf737ce9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.role('COOKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "d452cb96-3cf1-45bb-be93-714b590f58b4",
                  "parentUUID": "a48cbebb-c08a-4e7b-982c-a85bdf737ce9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mail@example.com',\n    role: attendee_1.ICalAttendeeRole.NON\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('NON-PARTICIPANT') > -1);",
                  "err": {},
                  "uuid": "bc2bb1f4-078a-4494-8f1b-4fe20605ab75",
                  "parentUUID": "a48cbebb-c08a-4e7b-982c-a85bdf737ce9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9f8a78f-731e-44b0-915b-e2c593a48bda",
                "2f31ca9f-eded-4a27-a731-a666d517d433",
                "e387a84b-d253-4d0a-85dc-39c1a1fe9b0d",
                "d452cb96-3cf1-45bb-be93-714b590f58b4",
                "bc2bb1f4-078a-4494-8f1b-4fe20605ab75"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4e713c87-0489-4e57-8add-824e4ca7cb31",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.rsvp(null));\nassert_1.default.deepStrictEqual(a, a.rsvp(true));",
                  "err": {},
                  "uuid": "73b06b03-c216-4dc2-a908-9573b7322564",
                  "parentUUID": "4e713c87-0489-4e57-8add-824e4ca7cb31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\na.rsvp(true);\nassert_1.default.strictEqual(a.rsvp(), true);\na.rsvp(false);\nassert_1.default.strictEqual(a.rsvp(), false);",
                  "err": {},
                  "uuid": "437f4799-0793-43f3-835e-2c36127f6335",
                  "parentUUID": "4e713c87-0489-4e57-8add-824e4ca7cb31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.rsvp(), null);\na.rsvp(false);\nassert_1.default.strictEqual(a.rsvp(), false);\na.rsvp(null);\nassert_1.default.strictEqual(a.rsvp(), null);",
                  "err": {},
                  "uuid": "cf1d91b6-23a8-4bbc-91a4-25d4ba46f569",
                  "parentUUID": "4e713c87-0489-4e57-8add-824e4ca7cb31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mail@example.com',\n    rsvp: true\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf(';RSVP=TRUE') > -1);",
                  "err": {},
                  "uuid": "3aec053c-af71-409b-ba0f-9723ec8c8bcd",
                  "parentUUID": "4e713c87-0489-4e57-8add-824e4ca7cb31",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73b06b03-c216-4dc2-a908-9573b7322564",
                "437f4799-0793-43f3-835e-2c36127f6335",
                "cf1d91b6-23a8-4bbc-91a4-25d4ba46f569",
                "3aec053c-af71-409b-ba0f-9723ec8c8bcd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "00e90fc2-350b-4e55-afcf-c2e5a1694549",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.status(null));\nassert_1.default.deepStrictEqual(a, a.status(attendee_1.ICalAttendeeStatus.ACCEPTED));",
                  "err": {},
                  "uuid": "40eeda25-e8fa-4811-bc18-44dd0dcd9f0e",
                  "parentUUID": "00e90fc2-350b-4e55-afcf-c2e5a1694549",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.status(), null);\na.status(attendee_1.ICalAttendeeStatus.ACCEPTED);\nassert_1.default.strictEqual(a.status(), 'ACCEPTED');\na.status(null);\nassert_1.default.strictEqual(a.status(), null);",
                  "err": {},
                  "uuid": "38f468ee-a64e-4b12-b0e6-bce50cf20ea5",
                  "parentUUID": "00e90fc2-350b-4e55-afcf-c2e5a1694549",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.status('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "b6ef6f2a-497b-49cc-a46d-db5fcbae208f",
                  "parentUUID": "00e90fc2-350b-4e55-afcf-c2e5a1694549",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com', status: attendee_1.ICalAttendeeStatus.DECLINED }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('DECLINED') > -1);",
                  "err": {},
                  "uuid": "570bfdec-bfde-4469-8722-6e514391c7e4",
                  "parentUUID": "00e90fc2-350b-4e55-afcf-c2e5a1694549",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com', status: attendee_1.ICalAttendeeStatus.NEEDSACTION }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('NEEDS-ACTION') > -1);",
                  "err": {},
                  "uuid": "b6fdfd2c-6e61-4388-8f0f-16c9b1d4a0a7",
                  "parentUUID": "00e90fc2-350b-4e55-afcf-c2e5a1694549",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40eeda25-e8fa-4811-bc18-44dd0dcd9f0e",
                "38f468ee-a64e-4b12-b0e6-bce50cf20ea5",
                "b6ef6f2a-497b-49cc-a46d-db5fcbae208f",
                "570bfdec-bfde-4469-8722-6e514391c7e4",
                "b6fdfd2c-6e61-4388-8f0f-16c9b1d4a0a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "65a6b0a2-119e-4f5b-ac0a-bad695cec714",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a.type(null), a);\nassert_1.default.deepStrictEqual(a.type(attendee_1.ICalAttendeeType.INDIVIDUAL), a);",
                  "err": {},
                  "uuid": "e1a1c83a-7be2-4c3b-a0ec-220b6801339c",
                  "parentUUID": "65a6b0a2-119e-4f5b-ac0a-bad695cec714",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.type(), null);\na.type(attendee_1.ICalAttendeeType.ROOM);\nassert_1.default.strictEqual(a.type(), 'ROOM');\na.type(null);\nassert_1.default.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "43dd7d6e-4966-45cd-95b8-ce1d65b995b7",
                  "parentUUID": "65a6b0a2-119e-4f5b-ac0a-bad695cec714",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.type('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "564ecf11-f722-4e2f-823f-d5db72034923",
                  "parentUUID": "65a6b0a2-119e-4f5b-ac0a-bad695cec714",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mailing-list@example.com',\n    type: attendee_1.ICalAttendeeType.GROUP\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('GROUP') > -1);",
                  "err": {},
                  "uuid": "30218233-0926-47cc-83ba-d6c4f27dcda5",
                  "parentUUID": "65a6b0a2-119e-4f5b-ac0a-bad695cec714",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1a1c83a-7be2-4c3b-a0ec-220b6801339c",
                "43dd7d6e-4966-45cd-95b8-ce1d65b995b7",
                "564ecf11-f722-4e2f-823f-d5db72034923",
                "30218233-0926-47cc-83ba-d6c4f27dcda5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e6c66a3d-4753-45cd-a035-25fae763275d",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.delegatedTo(null));\nassert_1.default.deepStrictEqual(a, a.delegatedTo('foo@example.com'));",
                  "err": {},
                  "uuid": "c1411cf3-ded6-4434-9de2-56346a17367f",
                  "parentUUID": "e6c66a3d-4753-45cd-a035-25fae763275d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.delegatedTo(), null);\na.delegatedTo('foo@example.com');\nconst result = a.delegatedTo();\nassert_1.default.ok(result);\nassert_1.default.strictEqual(result.email(), 'foo@example.com');\na.delegatedTo(null);\nassert_1.default.strictEqual(a.delegatedTo(), null);",
                  "err": {},
                  "uuid": "21d8861a-d131-4159-92f8-ef46cb798c00",
                  "parentUUID": "e6c66a3d-4753-45cd-a035-25fae763275d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mail@example.com',\n    delegatedTo: 'foo@example.com'\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('foo@example') > -1);",
                  "err": {},
                  "uuid": "77f26c57-7c67-400f-9f07-71334fe56e3e",
                  "parentUUID": "e6c66a3d-4753-45cd-a035-25fae763275d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1411cf3-ded6-4434-9de2-56346a17367f",
                "21d8861a-d131-4159-92f8-ef46cb798c00",
                "77f26c57-7c67-400f-9f07-71334fe56e3e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "426c0b9c-dedf-44ab-acc1-f7db73c78927",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.delegatedFrom(null));\nassert_1.default.deepStrictEqual(a, a.delegatedFrom('foo@example.com'));",
                  "err": {},
                  "uuid": "42d56fac-431a-48de-9ec3-442c626bcb69",
                  "parentUUID": "426c0b9c-dedf-44ab-acc1-f7db73c78927",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.delegatedFrom(), null);\na.delegatedFrom('foo@example.com');\nconst result = a.delegatedFrom();\nassert_1.default.ok(result);\nassert_1.default.strictEqual(result.email(), 'foo@example.com');\na.delegatedFrom(null);\nassert_1.default.strictEqual(a.delegatedFrom(), null);",
                  "err": {},
                  "uuid": "934e64f4-c844-493d-bcdf-3283b67b732e",
                  "parentUUID": "426c0b9c-dedf-44ab-acc1-f7db73c78927",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mail@example.com',\n    delegatedFrom: 'foo@example.com'\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('foo@example.com') > -1);",
                  "err": {},
                  "uuid": "c09b519b-ea22-4e17-8a8e-80cd4d70e964",
                  "parentUUID": "426c0b9c-dedf-44ab-acc1-f7db73c78927",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42d56fac-431a-48de-9ec3-442c626bcb69",
                "934e64f4-c844-493d-bcdf-3283b67b732e",
                "c09b519b-ea22-4e17-8a8e-80cd4d70e964"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fbb8ebcf-9850-45fb-9126-f8f0c995b763",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.delegatesTo({}) instanceof attendee_1.default);",
                  "err": {},
                  "uuid": "cd5a45ce-22ff-4e5e-82c8-876273beddc8",
                  "parentUUID": "fbb8ebcf-9850-45fb-9126-f8f0c995b763",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = new attendee_1.default({ name: 'Muh' }, event);\nassert_1.default.deepStrictEqual(new attendee_1.default({}, event).delegatesTo(attendee), attendee);",
                  "err": {},
                  "uuid": "f9738c01-3fc8-4b24-b896-ce0f3083770b",
                  "parentUUID": "fbb8ebcf-9850-45fb-9126-f8f0c995b763",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee = new attendee_1.default({ name: 'Zac' }, new event_1.default({}, new calendar_1.default()))\n    .delegatesTo({ name: 'Cody' });\nassert_1.default.strictEqual(attendee.name(), 'Cody');",
                  "err": {},
                  "uuid": "8ee94594-faa9-417e-ab04-aa665e0ca5bd",
                  "parentUUID": "fbb8ebcf-9850-45fb-9126-f8f0c995b763",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd5a45ce-22ff-4e5e-82c8-876273beddc8",
                "f9738c01-3fc8-4b24-b896-ce0f3083770b",
                "8ee94594-faa9-417e-ab04-aa665e0ca5bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47b68675-3ad9-4fe4-b932-6815bd7d2a02",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.delegatesFrom({}) instanceof attendee_1.default);",
                  "err": {},
                  "uuid": "27a8b1fa-6290-441d-b035-99506cc67e66",
                  "parentUUID": "47b68675-3ad9-4fe4-b932-6815bd7d2a02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = new attendee_1.default({ name: 'Muh' }, event);\nassert_1.default.deepStrictEqual(new attendee_1.default({}, event).delegatesFrom(attendee), attendee);",
                  "err": {},
                  "uuid": "78a69dd4-d1ee-4cbc-ab0a-ba2db6ecb66c",
                  "parentUUID": "47b68675-3ad9-4fe4-b932-6815bd7d2a02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ name: 'Zac' }, new event_1.default({}, new calendar_1.default())).delegatesFrom({ name: 'Cody' });\nassert_1.default.strictEqual(a.name(), 'Cody');",
                  "err": {},
                  "uuid": "b47e39f6-851c-4a80-a31e-82b544e36b3d",
                  "parentUUID": "47b68675-3ad9-4fe4-b932-6815bd7d2a02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27a8b1fa-6290-441d-b035-99506cc67e66",
                "78a69dd4-d1ee-4cbc-ab0a-ba2db6ecb66c",
                "b47e39f6-851c-4a80-a31e-82b544e36b3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58fc22ef-8d02-4e28-bdae-1d8e03b1953c",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works as expected",
                  "fullTitle": "ical-generator Attendee x() works as expected",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'foo@example.org' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.x('X-NUM-GUESTS', '5'));\nassert_1.default.ok(a.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;X-NUM-GUESTS=5:MAILTO:foo@example.org'));",
                  "err": {},
                  "uuid": "a4961e9f-5290-48bc-9e61-81e66dbd76dd",
                  "parentUUID": "58fc22ef-8d02-4e28-bdae-1d8e03b1953c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4961e9f-5290-48bc-9e61-81e66dbd76dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "06eef06e-921a-4a11-aded-fcf426c70f11",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\na.name('Max Mustermann');\na.delegatesTo('Moritz <moritz@example.com>');\nassert_1.default.deepStrictEqual(a.toJSON(), {\n    delegatedFrom: null,\n    delegatedTo: 'moritz@example.com',\n    email: null,\n    mailto: null,\n    sentBy: null,\n    name: 'Max Mustermann',\n    role: 'REQ-PARTICIPANT',\n    rsvp: null,\n    status: 'DELEGATED',\n    type: null,\n    x: []\n});",
                  "err": {},
                  "uuid": "44d12fd5-65f0-4887-b35e-e65149440b86",
                  "parentUUID": "06eef06e-921a-4a11-aded-fcf426c70f11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Attendee toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nnew attendee_1.default(a.toJSON(), new event_1.default({}, new calendar_1.default()));",
                  "err": {},
                  "uuid": "3154d3d3-e194-411e-b525-53fae35396c4",
                  "parentUUID": "06eef06e-921a-4a11-aded-fcf426c70f11",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44d12fd5-65f0-4887-b35e-e65149440b86",
                "3154d3d3-e194-411e-b525-53fae35396c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c1983a9a-2c4d-4200-8db3-5455dd7a382b",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee generate() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ name: 'Testuser' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /`email`/);",
                  "err": {},
                  "uuid": "cfe78171-c976-41f7-9fdb-b29429550935",
                  "parentUUID": "c1983a9a-2c4d-4200-8db3-5455dd7a382b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cfe78171-c976-41f7-9fdb-b29429550935"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d89ae94c-c9cd-4036-8088-223becb446c5",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9cae350b-47c6-4202-a84f-5837165a85f7",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    prodId: '//sebbo.net//ical-generator//EN',\n    method: calendar_1.ICalCalendarMethod.PUBLISH,\n    name: 'Test Calendar',\n    description: 'Hi, I am the description.',\n    timezone: null,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    source: 'http://example.com/my/original_source.ical',\n    scale: null,\n    ttl: null,\n    events: [],\n    x: []\n};\nconst cal = new calendar_1.default(data);\nassert_1.default.deepStrictEqual(cal.toJSON(), data);",
                  "err": {},
                  "uuid": "d2a07caf-11bf-4402-bc0d-628c38aa8f11",
                  "parentUUID": "9cae350b-47c6-4202-a84f-5837165a85f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2a07caf-11bf-4402-bc0d-628c38aa8f11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "67afea8a-64f9-497c-91f2-020528030b2a",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.prodId('//loremipsum.de//ical-tests//EN');\nassert_1.default.strictEqual(cal.prodId(), '//loremipsum.de//ical-tests//EN');",
                  "err": {},
                  "uuid": "38cfff5b-ce61-415b-8e36-41d2b972adc7",
                  "parentUUID": "67afea8a-64f9-497c-91f2-020528030b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.prodId('//loremipsum.de//ical-tests//EN'));",
                  "err": {},
                  "uuid": "4435f737-e574-4152-9933-1e0bcb000a8e",
                  "parentUUID": "67afea8a-64f9-497c-91f2-020528030b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformed",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when string misformed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    cal.prodId('enemenemuh!');\n}, /`prodId`/);",
                  "err": {},
                  "uuid": "abed92e9-d735-4e18-bbd5-b8f75a291c26",
                  "parentUUID": "67afea8a-64f9-497c-91f2-020528030b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    cal.prodId(256);\n}, /`prodid`/);",
                  "err": {},
                  "uuid": "3cdcc2eb-d4d0-4a53-8e62-5286984e0161",
                  "parentUUID": "67afea8a-64f9-497c-91f2-020528030b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        product: 'ical-tests'\n    });\n}, /`prodid\\.company`/);",
                  "err": {},
                  "uuid": "fab46723-a0a3-41d1-9e44-a59aa8f13a15",
                  "parentUUID": "67afea8a-64f9-497c-91f2-020528030b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        company: 'sebbo.net'\n    });\n}, /`prodid\\.product`/);",
                  "err": {},
                  "uuid": "be971106-49fd-483d-99ee-183b16a4b80a",
                  "parentUUID": "67afea8a-64f9-497c-91f2-020528030b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests'\n});\nassert_1.default.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//EN');",
                  "err": {},
                  "uuid": "08d132ef-2f8d-490f-9873-0c24a6bb413b",
                  "parentUUID": "67afea8a-64f9-497c-91f2-020528030b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests',\n    language: 'DE'\n});\nassert_1.default.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//DE');",
                  "err": {},
                  "uuid": "c7612f54-9aa4-4512-9f4d-eec18552f5b2",
                  "parentUUID": "67afea8a-64f9-497c-91f2-020528030b2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38cfff5b-ce61-415b-8e36-41d2b972adc7",
                "4435f737-e574-4152-9933-1e0bcb000a8e",
                "abed92e9-d735-4e18-bbd5-b8f75a291c26",
                "3cdcc2eb-d4d0-4a53-8e62-5286984e0161",
                "fab46723-a0a3-41d1-9e44-a59aa8f13a15",
                "be971106-49fd-483d-99ee-183b16a4b80a",
                "08d132ef-2f8d-490f-9873-0c24a6bb413b",
                "c7612f54-9aa4-4512-9f4d-eec18552f5b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0547f3a2-5404-4ce2-995c-064fa75ed338",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default();\nassert_1.default.deepStrictEqual(c, c.method(null), 'method(null)');\nassert_1.default.deepStrictEqual(c, c.method(calendar_1.ICalCalendarMethod.PUBLISH), 'method(enum)');",
                  "err": {},
                  "uuid": "4dc481b5-9357-484b-adf7-350e1826fddd",
                  "parentUUID": "0547f3a2-5404-4ce2-995c-064fa75ed338",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default();\nassert_1.default.strictEqual(c.method(), null);\nc.method(null);\nassert_1.default.strictEqual(c.method(), null);\nc.method(calendar_1.ICalCalendarMethod.PUBLISH);\nassert_1.default.strictEqual(c.method(), 'PUBLISH');\nc.method(null);\nassert_1.default.strictEqual(c.method(), null);",
                  "err": {},
                  "uuid": "c098af61-614f-4584-8b6f-70164d1094f0",
                  "parentUUID": "0547f3a2-5404-4ce2-995c-064fa75ed338",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    c.method('KICK ASS');\n}, /Input must be one of the following: PUBLISH, REQUEST, REPLY, ADD, CANCEL, REFRESH, COUNTER, DECLINECOUNTER/);",
                  "err": {},
                  "uuid": "2b51223a-3b6a-4094-aa90-0511dc841a18",
                  "parentUUID": "0547f3a2-5404-4ce2-995c-064fa75ed338",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default({ method: calendar_1.ICalCalendarMethod.PUBLISH });\nassert_1.default.strictEqual(c.method(), 'PUBLISH');\nc.method(calendar_1.ICalCalendarMethod.ADD);\nassert_1.default.strictEqual(c.method(), 'ADD');",
                  "err": {},
                  "uuid": "e0904024-9011-4867-a71c-8628124473f9",
                  "parentUUID": "0547f3a2-5404-4ce2-995c-064fa75ed338",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4dc481b5-9357-484b-adf7-350e1826fddd",
                "c098af61-614f-4584-8b6f-70164d1094f0",
                "2b51223a-3b6a-4094-aa90-0511dc841a18",
                "e0904024-9011-4867-a71c-8628124473f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "db3c5f65-d8f0-4b7f-abd0-8e1a97cc7e3f",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.name(null));\nassert_1.default.deepStrictEqual(cal, cal.name('Testevents'));",
                  "err": {},
                  "uuid": "3cbe8bcf-0038-4e27-831f-225b379fba30",
                  "parentUUID": "db3c5f65-d8f0-4b7f-abd0-8e1a97cc7e3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.name(), null);\ncal.name('Testevents');\nassert_1.default.strictEqual(cal.name(), 'Testevents');\ncal.name(null);\nassert_1.default.strictEqual(cal.name(), null);",
                  "err": {},
                  "uuid": "5aa522df-fc11-4255-8d11-73cc6057d0b6",
                  "parentUUID": "db3c5f65-d8f0-4b7f-abd0-8e1a97cc7e3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().name('Testevents');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert_1.default.strictEqual(cal.name(), 'Testevents');",
                  "err": {},
                  "uuid": "1d9b8b07-ff70-40c2-a8f2-a0b8b19c7d03",
                  "parentUUID": "db3c5f65-d8f0-4b7f-abd0-8e1a97cc7e3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3cbe8bcf-0038-4e27-831f-225b379fba30",
                "5aa522df-fc11-4255-8d11-73cc6057d0b6",
                "1d9b8b07-ff70-40c2-a8f2-a0b8b19c7d03"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4db2062a-6ae3-4d22-ae4e-58fe3bbcb038",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.description(null));\nassert_1.default.deepStrictEqual(cal, cal.description('Testbeschreibung'));",
                  "err": {},
                  "uuid": "03e27bb1-2a1d-445f-a0c3-d3a2b8a9e901",
                  "parentUUID": "4db2062a-6ae3-4d22-ae4e-58fe3bbcb038",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.description(), null);\ncal.description('Testbeschreibung');\nassert_1.default.strictEqual(cal.description(), 'Testbeschreibung');\ncal.description(null);\nassert_1.default.strictEqual(cal.description(), null);",
                  "err": {},
                  "uuid": "9b8b4032-f93e-4fd9-b448-7940ae5b335f",
                  "parentUUID": "4db2062a-6ae3-4d22-ae4e-58fe3bbcb038",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().description('Testbeschreibung');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.description(), 'Testbeschreibung');",
                  "err": {},
                  "uuid": "4c68d50c-390a-4187-9a23-11752554aff3",
                  "parentUUID": "4db2062a-6ae3-4d22-ae4e-58fe3bbcb038",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03e27bb1-2a1d-445f-a0c3-d3a2b8a9e901",
                "9b8b4032-f93e-4fd9-b448-7940ae5b335f",
                "4c68d50c-390a-4187-9a23-11752554aff3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a616fa72-7eda-4069-9dcc-6301e8d061bc",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.timezone('Europe/Berlin'));\nassert_1.default.deepStrictEqual(cal, cal.timezone(null));\nassert_1.default.deepStrictEqual(cal, cal.timezone({\n    name: 'Europe/Berlin',\n    generator: ical_timezones_1.getVtimezoneComponent\n}));",
                  "err": {},
                  "uuid": "6c8e8d94-ea01-4cb3-b9f5-150c949467c7",
                  "parentUUID": "a616fa72-7eda-4069-9dcc-6301e8d061bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().timezone('Europe/Berlin');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert_1.default.strictEqual(cal.timezone(), null);\ncal.timezone({ name: 'Europe/Berlin' });\nassert_1.default.strictEqual(cal.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "85ea7bc2-0449-426d-8f65-0c1e485ec053",
                  "parentUUID": "a616fa72-7eda-4069-9dcc-6301e8d061bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Calendar timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().timezone('Europe/Berlin');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone('UTC');\nassert_1.default.strictEqual(cal.timezone(), null);",
                  "err": {},
                  "uuid": "66d90af4-7491-4051-856e-ba6b6a2abe28",
                  "parentUUID": "a616fa72-7eda-4069-9dcc-6301e8d061bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c8e8d94-ea01-4cb3-b9f5-150c949467c7",
                "85ea7bc2-0449-426d-8f65-0c1e485ec053",
                "66d90af4-7491-4051-856e-ba6b6a2abe28"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "362ef59c-1cd6-4eaa-ba64-d517e6180686",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal.ttl(60 * 60 * 24), cal);\nassert_1.default.deepStrictEqual(cal.ttl(moment_1.default.duration(2, 'days')), cal);\nassert_1.default.deepStrictEqual(cal.ttl(null), cal);",
                  "err": {},
                  "uuid": "99220c44-7c2b-4890-aead-081238f21aba",
                  "parentUUID": "362ef59c-1cd6-4eaa-ba64-d517e6180686",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.ttl(), null);\ncal.ttl(86400);\nassert_1.default.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "91c5270a-04fa-4948-b8ed-33d54ea6e5dc",
                  "parentUUID": "362ef59c-1cd6-4eaa-ba64-d517e6180686",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().ttl(86400);\nassert_1.default.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "ccfa7055-d0e9-4e09-abed-39f0663b945a",
                  "parentUUID": "362ef59c-1cd6-4eaa-ba64-d517e6180686",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99220c44-7c2b-4890-aead-081238f21aba",
                "91c5270a-04fa-4948-b8ed-33d54ea6e5dc",
                "ccfa7055-d0e9-4e09-abed-39f0663b945a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f8f9c2e7-9d31-45bf-b7ef-2b55d97439c9",
              "title": "source()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar source() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.source('http://example.com/my/original_source.ical'));",
                  "err": {},
                  "uuid": "03403287-8536-4b1e-a28b-fcf7b0df61a5",
                  "parentUUID": "f8f9c2e7-9d31-45bf-b7ef-2b55d97439c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar source() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.source(), null);\ncal.source('http://example.com/my/original_source.ical');\nassert_1.default.strictEqual(cal.source(), 'http://example.com/my/original_source.ical');\ncal.url(null);\nassert_1.default.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "d1570874-8072-40ea-bbc0-e9480de6f8b6",
                  "parentUUID": "f8f9c2e7-9d31-45bf-b7ef-2b55d97439c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03403287-8536-4b1e-a28b-fcf7b0df61a5",
                "d1570874-8072-40ea-bbc0-e9480de6f8b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d2b166ab-7e8b-4f23-aa21-59ca77c5c57f",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.url('https://example.com/calendar.ical'));",
                  "err": {},
                  "uuid": "44820772-fb3e-4053-9671-999bc516f01d",
                  "parentUUID": "d2b166ab-7e8b-4f23-aa21-59ca77c5c57f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.url(), null);\ncal.url('https://example.com/calendar.ical');\nassert_1.default.strictEqual(cal.url(), 'https://example.com/calendar.ical');\ncal.url(null);\nassert_1.default.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "020ddbec-67d9-4c32-9f69-6b7447dc1146",
                  "parentUUID": "d2b166ab-7e8b-4f23-aa21-59ca77c5c57f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().url('https://example.com/calendar.ical');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.url(), 'https://example.com/calendar.ical');",
                  "err": {},
                  "uuid": "783baa8d-090f-405d-a08c-a43d92a5cc11",
                  "parentUUID": "d2b166ab-7e8b-4f23-aa21-59ca77c5c57f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44820772-fb3e-4053-9671-999bc516f01d",
                "020ddbec-67d9-4c32-9f69-6b7447dc1146",
                "783baa8d-090f-405d-a08c-a43d92a5cc11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1b775bd9-6294-4089-98c3-866fcbcb0029",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.scale('gregorian'));",
                  "err": {},
                  "uuid": "dc53cfe9-b981-487f-89da-d55955477aa6",
                  "parentUUID": "1b775bd9-6294-4089-98c3-866fcbcb0029",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.scale(), null);\ncal.scale('GREGORIAN');\nassert_1.default.strictEqual(cal.scale(), 'GREGORIAN');\ncal.scale(null);\nassert_1.default.strictEqual(cal.scale(), null);",
                  "err": {},
                  "uuid": "0306a28d-0082-42f0-a954-476286e4ba3e",
                  "parentUUID": "1b775bd9-6294-4089-98c3-866fcbcb0029",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().scale('gregorian');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.scale(), 'GREGORIAN');",
                  "err": {},
                  "uuid": "d88d9552-518e-4ae7-ac0b-86eb093b1b5c",
                  "parentUUID": "1b775bd9-6294-4089-98c3-866fcbcb0029",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc53cfe9-b981-487f-89da-d55955477aa6",
                "0306a28d-0082-42f0-a954-476286e4ba3e",
                "d88d9552-518e-4ae7-ac0b-86eb093b1b5c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0a5e461-52c9-4b88-ae90-bcd39804d3fa",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.ok(cal.createEvent({}) instanceof event_1.default);",
                  "err": {},
                  "uuid": "499da7ec-03da-4a5b-ae3f-0413e6ec3937",
                  "parentUUID": "f0a5e461-52c9-4b88-ae90-bcd39804d3fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nconst event = cal.createEvent({ summary: 'Patch-Day' });\nassert_1.default.strictEqual(event.summary(), 'Patch-Day');",
                  "err": {},
                  "uuid": "e6c8cf59-e4a7-4b33-8c5f-82c416da63c7",
                  "parentUUID": "f0a5e461-52c9-4b88-ae90-bcd39804d3fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.doesNotThrow(function () {\n    new calendar_1.default().createEvent({\n        start: new Date(),\n        summary: 'Patch-Day'\n    });\n}, Error);",
                  "err": {},
                  "uuid": "c96ef76a-624c-4745-a26f-7e3979dca5e8",
                  "parentUUID": "f0a5e461-52c9-4b88-ae90-bcd39804d3fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "499da7ec-03da-4a5b-ae3f-0413e6ec3937",
                "e6c8cf59-e4a7-4b33-8c5f-82c416da63c7",
                "c96ef76a-624c-4745-a26f-7e3979dca5e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48febce5-7fbf-411a-b320-e6a4a26b532f",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.events().length, 0);\nconst event = cal.createEvent({});\nassert_1.default.strictEqual(cal.events().length, 1);\nassert_1.default.deepStrictEqual(cal.events()[0], event);",
                  "err": {},
                  "uuid": "69813ad5-962d-4e5d-8b54-d310b1ba25e5",
                  "parentUUID": "48febce5-7fbf-411a-b320-e6a4a26b532f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.length(), 0);\nconst cal2 = cal.events([{ summary: 'Event A' }, { summary: 'Event B' }]);\nassert_1.default.strictEqual(cal.length(), 2);\nassert_1.default.deepStrictEqual(cal2, cal);",
                  "err": {},
                  "uuid": "84cca6e1-d55e-4c07-955e-ea83cc4821b5",
                  "parentUUID": "48febce5-7fbf-411a-b320-e6a4a26b532f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69813ad5-962d-4e5d-8b54-d310b1ba25e5",
                "84cca6e1-d55e-4c07-955e-ea83cc4821b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ab800df-3625-498a-99ed-bcedc3e4c8c0",
              "title": "clear()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do the job",
                  "fullTitle": "ical-generator Calendar clear() should do the job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.createEvent({});\nassert_1.default.strictEqual(cal.events().length, 1);\nassert_1.default.deepStrictEqual(cal.clear(), cal);\nassert_1.default.strictEqual(cal.events().length, 0);",
                  "err": {},
                  "uuid": "ebdb8a99-064d-47fc-ae45-7b7ea7efd321",
                  "parentUUID": "4ab800df-3625-498a-99ed-bcedc3e4c8c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ebdb8a99-064d-47fc-ae45-7b7ea7efd321"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "999d63e6-b5de-45fe-825d-2ebd1b940112",
              "title": "save()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all public methods and save it",
                  "fullTitle": "ical-generator Calendar save() should return all public methods and save it",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = (0, path_1.join)(__dirname, 'save.ical');\nconst cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.save(file, function () {\n    assert_1.default.ok((0, fs_1.existsSync)(file));\n    (0, fs_1.unlinkSync)(file);\n    assert_1.default.deepStrictEqual(cal, cal.save(file, function () {\n        assert_1.default.ok((0, fs_1.existsSync)(file));\n        (0, fs_1.unlinkSync)(file);\n        done();\n    }));\n}));",
                  "err": {},
                  "uuid": "ad5c8493-7e55-4ec0-9e03-f1898f0db2c3",
                  "parentUUID": "999d63e6-b5de-45fe-825d-2ebd1b940112",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be usable with promises",
                  "fullTitle": "ical-generator Calendar save() should be usable with promises",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const file = (0, path_1.join)(__dirname, 'save.ical');\n    const cal = new calendar_1.default();\n    yield cal.save(file);\n    assert_1.default.ok((0, fs_1.existsSync)(file));\n    (0, fs_1.unlinkSync)(file);\n});",
                  "err": {},
                  "uuid": "90fe648d-9963-44af-9b81-5ad1f4f22ed2",
                  "parentUUID": "999d63e6-b5de-45fe-825d-2ebd1b940112",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar save() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = (0, path_1.join)(__dirname, 'save.ical');\nconst cal = new calendar_1.default();\ncal.createEvent({});\nassert_1.default.throws(function () {\n    cal.save(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "0f1482e5-7530-40b6-8c84-44accf9da6c1",
                  "parentUUID": "999d63e6-b5de-45fe-825d-2ebd1b940112",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad5c8493-7e55-4ec0-9e03-f1898f0db2c3",
                "90fe648d-9963-44af-9b81-5ad1f4f22ed2",
                "0f1482e5-7530-40b6-8c84-44accf9da6c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f738b2c6-72b2-43e5-997a-dc890f45e8a2",
              "title": "saveSync()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should save it",
                  "fullTitle": "ical-generator Calendar saveSync() should save it",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = (0, path_1.join)(__dirname, 'save_sync.ical');\nconst cal = new calendar_1.default();\ncal.saveSync(file);\nassert_1.default.ok((0, fs_1.existsSync)(file));\n(0, fs_1.unlinkSync)(file);\ncal.saveSync(file);\nassert_1.default.ok((0, fs_1.existsSync)(file));\n(0, fs_1.unlinkSync)(file);",
                  "err": {},
                  "uuid": "78e5181d-f600-41df-a34e-82417d22bad1",
                  "parentUUID": "f738b2c6-72b2-43e5-997a-dc890f45e8a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar saveSync() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = (0, path_1.join)(__dirname, 'save_sync.ical');\nconst cal = new calendar_1.default();\ncal.createEvent({});\nassert_1.default.throws(function () {\n    cal.saveSync(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "dfd7e8fb-5fc3-4762-aeb1-1b684b5ff78f",
                  "parentUUID": "f738b2c6-72b2-43e5-997a-dc890f45e8a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78e5181d-f600-41df-a34e-82417d22bad1",
                "dfd7e8fb-5fc3-4762-aeb1-1b684b5ff78f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d396a4ed-70ba-43c4-9f51-d1bd98c451d3",
              "title": "serve()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar serve() should work",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = new calendar_1.default();\n    cal.createEvent({\n        start: new Date(),\n        end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n        summary: 'HTTP Calendar Event'\n    });\n    const port = yield (0, portfinder_1.getPortPromise)();\n    return new Promise(done => {\n        const server = http.createServer((req, res) => {\n            cal.serve(res);\n        }).listen(port, function () {\n            function request(cb) {\n                // make request\n                const req = http.request({ port }, function (res) {\n                    let file = '';\n                    assert_1.default.strictEqual(res.headers['content-type'], 'text/calendar; charset=utf-8', 'Header: text/calendar; charset=utf-8');\n                    assert_1.default.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"calendar.ics\"', 'Content-Disposition');\n                    res.setEncoding('utf8');\n                    res.on('data', function (chunk) {\n                        file += chunk;\n                    });\n                    res.on('end', function () {\n                        assert_1.default.strictEqual(file, cal.toString());\n                        cb();\n                    });\n                });\n                req.on('error', function (err) {\n                    assert_1.default.fail(err);\n                });\n                req.end();\n            }\n            request(() => {\n                request(() => {\n                    server.close(() => done());\n                });\n            });\n        });\n    });\n});",
                  "err": {},
                  "uuid": "ae7d00ee-a2bf-4bd6-ad75-2c2c876bc586",
                  "parentUUID": "d396a4ed-70ba-43c4-9f51-d1bd98c451d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae7d00ee-a2bf-4bd6-ad75-2c2c876bc586"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "841ccb4b-b984-4b76-b73d-bf22f751b172",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "ef683512-369b-489f-b0e8-cd978265a04a",
                  "parentUUID": "841ccb4b-b984-4b76-b73d-bf22f751b172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));\nassert_1.default.deepEqual(cal.x(), [{\n        key: 'X-FOO',\n        value: 'bar'\n    }]);\nassert_1.default.deepStrictEqual(cal, cal.x('X-LOREM', 'ipsum'));\nassert_1.default.deepEqual(cal.x(), [\n    { key: 'X-FOO', value: 'bar' },\n    { key: 'X-LOREM', value: 'ipsum' }\n]);\nassert_1.default.throws(() => {\n    cal.x('LOREM', 'ipsum');\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x('X-LOREM', 1337);\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x(5, 'ipsum');\n});",
                  "err": {},
                  "uuid": "8abeeabe-bbe8-42f4-b9b2-52298b3e8e4f",
                  "parentUUID": "841ccb4b-b984-4b76-b73d-bf22f751b172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x([{ key: 'X-FOO', value: 'bar' }]));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert_1.default.deepStrictEqual(cal, cal.x([{ key: 'X-LOREM', value: 'ipsum' }]));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert_1.default.throws(() => {\n    cal.x([{ key: 'LOREM', value: 'ipsum' }]);\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 'X-LOREM', value: 1337 }]);\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 5, value: 'ipsum' }]);\n});",
                  "err": {},
                  "uuid": "7c32dcf4-5a7f-4efe-a7ba-7ed695f11356",
                  "parentUUID": "841ccb4b-b984-4b76-b73d-bf22f751b172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x({ 'X-FOO': 'bar' }));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert_1.default.deepStrictEqual(cal, cal.x({ 'X-LOREM': 'ipsum' }));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert_1.default.throws(() => {\n    cal.x({ 'LOREM': 'ipsum' });\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x({ 'X-LOREM': 1337 });\n});\nassert_1.default.throws(() => {\n    cal.x({ 5: 'ipsum' });\n});",
                  "err": {},
                  "uuid": "a337bc82-b3b7-4fa3-85e0-3cccbb667033",
                  "parentUUID": "841ccb4b-b984-4b76-b73d-bf22f751b172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepEqual(cal.x(), []);\ncal.x('X-FOO', 'BAR');\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'BAR' }]);\ncal.x({});\nassert_1.default.deepEqual(cal.x().length, 0);",
                  "err": {},
                  "uuid": "6d8e4211-1623-4019-9f99-1029f2bca23b",
                  "parentUUID": "841ccb4b-b984-4b76-b73d-bf22f751b172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().x('X-FOO', 'BAR');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.toString().includes('X-FOO'));",
                  "err": {},
                  "uuid": "82596839-a1b7-4d57-98e7-09e29adfa210",
                  "parentUUID": "841ccb4b-b984-4b76-b73d-bf22f751b172",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef683512-369b-489f-b0e8-cd978265a04a",
                "8abeeabe-bbe8-42f4-b9b2-52298b3e8e4f",
                "7c32dcf4-5a7f-4efe-a7ba-7ed695f11356",
                "a337bc82-b3b7-4fa3-85e0-3cccbb667033",
                "6d8e4211-1623-4019-9f99-1029f2bca23b",
                "82596839-a1b7-4d57-98e7-09e29adfa210"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f72f4b06-8070-4b0e-88ad-655cd385df8e",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst cal = new calendar_1.default();\nconst prodId = cal.toJSON().prodId;\nassert_1.default.strictEqual(typeof prodId, 'string');\nassert_1.default.ok(prodId.length > 0);\nassert_1.default.strictEqual((_a = cal.toJSON().events) === null || _a === void 0 ? void 0 : _a.length, 0);",
                  "err": {},
                  "uuid": "38aac01c-7af0-48c0-90fc-4d12f3443af4",
                  "parentUUID": "f72f4b06-8070-4b0e-88ad-655cd385df8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n    summary: 'HTTP Calendar Event',\n    x: [\n        { key: 'X-FOO', value: 'bar' },\n        { key: 'X-LOREM', value: 'ipsum' }\n    ]\n});\nconst prodId = cal.toJSON().prodId;\nassert_1.default.strictEqual(typeof prodId, 'string');\nassert_1.default.ok(prodId.length > 0);\nconst events = cal.toJSON().events;\nassert_1.default.strictEqual(events === null || events === void 0 ? void 0 : events.length, 1);\nassert_1.default.deepEqual(events[0].x, [\n    { 'key': 'X-FOO', 'value': 'bar' },\n    { 'key': 'X-LOREM', 'value': 'ipsum' }\n]);",
                  "err": {},
                  "uuid": "c7f5b7ff-99d7-4f3e-aaf9-5118312ee1dc",
                  "parentUUID": "f72f4b06-8070-4b0e-88ad-655cd385df8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Calendar toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new calendar_1.default();\nnew calendar_1.default(a.toJSON());",
                  "err": {},
                  "uuid": "7b6ba44d-bf55-4901-8232-fb0e11305c2d",
                  "parentUUID": "f72f4b06-8070-4b0e-88ad-655cd385df8e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38aac01c-7af0-48c0-90fc-4d12f3443af4",
                "c7f5b7ff-99d7-4f3e-aaf9-5118312ee1dc",
                "7b6ba44d-bf55-4901-8232-fb0e11305c2d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "95ef972e-ea16-4066-842d-35ec9addd4f9",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.length(), 0);\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.strictEqual(cal.length(), 1);",
                  "err": {},
                  "uuid": "d46b7744-e93b-4256-a02e-4699444cf557",
                  "parentUUID": "95ef972e-ea16-4066-842d-35ec9addd4f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d46b7744-e93b-4256-a02e-4699444cf557"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ae2e180-430e-49df-8084-04709e32d135",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.url('https://sebbo.net/foo');\nassert_1.default.ok(cal.toString().indexOf('URL:https://sebbo.net/foo') > -1);",
                  "err": {},
                  "uuid": "5964a261-ce36-4e25-bc59-977868b9c4fd",
                  "parentUUID": "1ae2e180-430e-49df-8084-04709e32d135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.method(calendar_1.ICalCalendarMethod.REFRESH);\nassert_1.default.ok(cal.toString().indexOf('METHOD:REFRESH') > -1);",
                  "err": {},
                  "uuid": "8508f57b-a435-49e9-8d63-67e7bdae7f7d",
                  "parentUUID": "1ae2e180-430e-49df-8084-04709e32d135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.name('TEST');\nassert_1.default.ok(cal.toString().indexOf('NAME:TEST') > -1);\nassert_1.default.ok(cal.toString().indexOf('X-WR-CALNAME:TEST') > -1);",
                  "err": {},
                  "uuid": "2b6129cf-f3b0-4d22-9b50-4534a3297aab",
                  "parentUUID": "1ae2e180-430e-49df-8084-04709e32d135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.description('TEST');\nassert_1.default.ok(cal.toString().indexOf('X-WR-CALDESC:TEST') > -1);",
                  "err": {},
                  "uuid": "a26f96ba-00fa-4856-9277-fe7de57eb0f3",
                  "parentUUID": "1ae2e180-430e-49df-8084-04709e32d135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.timezone('TEST');\nassert_1.default.ok(cal.toString().indexOf('TIMEZONE-ID:TEST') > -1);\nassert_1.default.ok(cal.toString().indexOf('X-WR-TIMEZONE:TEST') > -1);",
                  "err": {},
                  "uuid": "92ae3cde-8cbc-4542-92e4-ae690069c9d7",
                  "parentUUID": "1ae2e180-430e-49df-8084-04709e32d135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the source",
                  "fullTitle": "ical-generator Calendar toString() should include the source",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.source('http://foo.bar.example.com/ical.cal');\nassert_1.default.ok(cal.toString().includes('http://foo.bar.example.com/ical.cal'));",
                  "err": {},
                  "uuid": "dd7a1e1b-a4a2-46bf-a237-f1c8013c8bbd",
                  "parentUUID": "1ae2e180-430e-49df-8084-04709e32d135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include VTimezone objects if generator was supplied",
                  "fullTitle": "ical-generator Calendar toString() should include VTimezone objects if generator was supplied",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.timezone({ name: 'Europe/Berlin', generator: ical_timezones_1.getVtimezoneComponent });\ncal.createEvent({\n    start: new Date(),\n    timezone: 'Europe/London'\n});\nassert_1.default.ok(cal.toString().includes('BEGIN:VTIMEZONE\\r\\n'), 'BEGIN:VTIMEZONE');\nassert_1.default.ok(cal.toString().includes('TZID:Europe/Berlin\\r\\n'), 'TZID:Europe/Berlin');\nassert_1.default.ok(cal.toString().includes('TZID:Europe/London\\r\\n'), 'TZID:Europe/London');",
                  "err": {},
                  "uuid": "cb1aeba6-07e2-4139-8ae7-bfcccdae4514",
                  "parentUUID": "1ae2e180-430e-49df-8084-04709e32d135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if VTimezone was not found",
                  "fullTitle": "ical-generator Calendar toString() should also work if VTimezone was not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.timezone({ name: 'FOO', generator: ical_timezones_1.getVtimezoneComponent });\nassert_1.default.ok(!cal.toString().includes('TZID:Foo\\r\\n'));",
                  "err": {},
                  "uuid": "a77af833-a61c-4ad4-9aee-374438ece8ce",
                  "parentUUID": "1ae2e180-430e-49df-8084-04709e32d135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore global timezone ids",
                  "fullTitle": "ical-generator Calendar toString() should ignore global timezone ids",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.timezone({ name: '/Europe/Berlin', generator: ical_timezones_1.getVtimezoneComponent });\nassert_1.default.ok(!cal.toString().includes('TZID:/Europe/Berlin\\r\\n'));",
                  "err": {},
                  "uuid": "fc9fce03-e3cb-49d5-9005-03440cd20a83",
                  "parentUUID": "1ae2e180-430e-49df-8084-04709e32d135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the ttl",
                  "fullTitle": "ical-generator Calendar toString() should include the ttl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.ttl(moment_1.default.duration(3, 'days'));\nassert_1.default.ok(cal.toString().indexOf('REFRESH-INTERVAL;VALUE=DURATION:P3D') > -1);\nassert_1.default.ok(cal.toString().indexOf('X-PUBLISHED-TTL:P3D') > -1);",
                  "err": {},
                  "uuid": "fbcf5a5e-95ce-4ea9-8fc0-798cfbda44f4",
                  "parentUUID": "1ae2e180-430e-49df-8084-04709e32d135",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5964a261-ce36-4e25-bc59-977868b9c4fd",
                "8508f57b-a435-49e9-8d63-67e7bdae7f7d",
                "2b6129cf-f3b0-4d22-9b50-4534a3297aab",
                "a26f96ba-00fa-4856-9277-fe7de57eb0f3",
                "92ae3cde-8cbc-4542-92e4-ae690069c9d7",
                "dd7a1e1b-a4a2-46bf-a237-f1c8013c8bbd",
                "cb1aeba6-07e2-4139-8ae7-bfcccdae4514",
                "a77af833-a61c-4ad4-9aee-374438ece8ce",
                "fc9fce03-e3cb-49d5-9005-03440cd20a83",
                "fbcf5a5e-95ce-4ea9-8fc0-798cfbda44f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "365bb1e8-0333-47bc-847e-14d6774f6a81",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event'\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_01.ics', 'utf8'));\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "47153036-3ce7-4fc8-bf4c-ba7a808bb225",
              "parentUUID": "365bb1e8-0333-47bc-847e-14d6774f6a81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: 'localhost',\n        transparency: src_1.ICalEventTransparency.OPAQUE,\n        description: {\n            plain: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop',\n            html: '<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>'\n        }\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_02.ics', 'utf8'));\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "e831fee2-7794-4609-8fb9-517fcfa5ac03",
              "parentUUID": "365bb1e8-0333-47bc-847e-14d6774f6a81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({\n        method: calendar_1.ICalCalendarMethod.ADD,\n        prodId: '//sebbo.net//ical-generator.tests//EN'\n    });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: {\n            title: 'Apple Store Kurfürstendamm',\n            address: 'Kurfürstendamm 26, 10719 Berlin, Deutschland',\n            radius: 141.1751386318387,\n            geo: { lat: 52.503630, lon: 13.328650 }\n        },\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        status: event_1.ICalEventStatus.CONFIRMED,\n        categories: [{ name: 'WORK' }],\n        url: 'http://sebbo.net/',\n        attachments: [\n            'https://files.sebbo.net/calendar/attachments/foo'\n        ]\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_03.ics', 'utf8'), 'toString');\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "aff18d6c-2a98-4ea7-8fa3-e0b71b6a9b03",
              "parentUUID": "365bb1e8-0333-47bc-847e-14d6774f6a81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.timezone({ name: null, generator: ical_timezones_1.getVtimezoneComponent });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                exclude: new Date('Fr Oct 06 2013 23:15:00 UTC')\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30'),\n            end: new Date('Fr Oct 06 2013 23:15:00'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            timezone: 'Europe/Berlin',\n            summary: 'repeating by day, twice',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.DAILY,\n                count: 2\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by 3 weeks, until 2014',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.WEEKLY,\n                interval: 3,\n                until: new Date('We Jan 01 2014 00:00:00 UTC')\n            }\n        }\n    ]);\n    assert_1.default.strictEqual(cal.toString(), yield fs_1.promises.readFile(__dirname + '/results/generate_04.ics', 'utf8'), 'first check');\n    // Wount be same, as reference to VTimezone generator is not exported\n    // assert.strictEqual(ical(cal.toJSON()).toString(), string);\n    cal.timezone(null);\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), cal.toString(), 'second check');\n});",
              "err": {},
              "uuid": "f3e08cd9-3575-404e-b144-584eb882df4d",
              "parentUUID": "365bb1e8-0333-47bc-847e-14d6774f6a81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '1',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'floating',\n        floating: true\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_05.ics', 'utf8'));\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "fefc9208-4b7a-4bf8-8430-29cdc562732c",
              "parentUUID": "365bb1e8-0333-47bc-847e-14d6774f6a81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN', method: calendar_1.ICalCalendarMethod.PUBLISH });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        attendees: [\n            {\n                name: 'Matt',\n                email: 'matt@example.com',\n                delegatesTo: {\n                    name: 'John',\n                    email: 'john@example.com',\n                    status: attendee_1.ICalAttendeeStatus.ACCEPTED\n                }\n            }\n        ],\n        alarms: [\n            {\n                type: alarm_1.ICalAlarmType.display,\n                trigger: 60 * 10,\n                repeat: 2,\n                interval: 60\n            },\n            {\n                type: alarm_1.ICalAlarmType.display,\n                trigger: 60 * 60,\n                description: 'I\\'m a reminder :)'\n            }\n        ],\n        status: event_1.ICalEventStatus.CONFIRMED,\n        url: 'http://sebbo.net/'\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_06.ics', 'utf8'));\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "fa5aa2f0-b18b-402d-b0f0-9b15756c1f71",
              "parentUUID": "365bb1e8-0333-47bc-847e-14d6774f6a81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                byMonth: [1, 4, 7, 10]\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on Mo/We/Fr, twice',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.DAILY,\n                count: 2,\n                byDay: [types_1.ICalWeekday.MO, types_1.ICalWeekday.WE, types_1.ICalWeekday.FR]\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on 1st and 15th',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.DAILY,\n                interval: 1,\n                byMonthDay: [1, 15]\n            }\n        }\n    ]);\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_07.ics', 'utf8'));\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "bb079eef-16ce-4b1d-a0de-ed12bc4fa7d1",
              "parentUUID": "365bb1e8-0333-47bc-847e-14d6774f6a81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event',\n        attendees: [{\n                type: attendee_1.ICalAttendeeType.INDIVIDUAL,\n                role: attendee_1.ICalAttendeeRole.REQ,\n                status: attendee_1.ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_08.ics', 'utf8'));\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "cabc44e9-cfb5-4259-8bb6-6f4de6971314",
              "parentUUID": "365bb1e8-0333-47bc-847e-14d6774f6a81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = (0, src_1.default)({ method: calendar_1.ICalCalendarMethod.REQUEST, prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: {\n            name: 'Sebastian Pekarek',\n            email: 'mail@sebbo.net',\n            mailto: 'mail2@example2.com'\n        },\n        attendees: [{\n                type: attendee_1.ICalAttendeeType.INDIVIDUAL,\n                role: attendee_1.ICalAttendeeRole.REQ,\n                status: attendee_1.ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_09.ics', 'utf8'), 'toString');\n    assert_1.default.strictEqual((0, src_1.default)(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "2cd5f64d-ab3c-45e8-a1b7-bc8aab275093",
              "parentUUID": "365bb1e8-0333-47bc-847e-14d6774f6a81",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "47153036-3ce7-4fc8-bf4c-ba7a808bb225",
            "e831fee2-7794-4609-8fb9-517fcfa5ac03",
            "aff18d6c-2a98-4ea7-8fa3-e0b71b6a9b03",
            "f3e08cd9-3575-404e-b144-584eb882df4d",
            "fefc9208-4b7a-4bf8-8430-29cdc562732c",
            "fa5aa2f0-b18b-402d-b0f0-9b15756c1f71",
            "bb079eef-16ce-4b1d-a0de-ed12bc4fa7d1",
            "cabc44e9-cfb5-4259-8bb6-6f4de6971314",
            "2cd5f64d-ab3c-45e8-a1b7-bc8aab275093"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ca86b6e5-cd0e-4b8c-94b0-2ab9fc9c6e7c",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "307cf32b-f425-4ccc-95bb-95d483872815",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new category_1.default({\n    // @ts-ignore\n    unknown: true,\n    name: 'FOO'\n});\nassert_1.default.strictEqual(a.name(), 'FOO');",
                  "err": {},
                  "uuid": "9338004e-a229-474e-ad14-62f7c686a089",
                  "parentUUID": "307cf32b-f425-4ccc-95bb-95d483872815",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9338004e-a229-474e-ad14-62f7c686a089"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7301bbca-802c-45f3-bf3e-dd2fa59059b1",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({});\nassert_1.default.deepStrictEqual(c, c.name('FOO'));\nassert_1.default.deepStrictEqual(c, c.name(null));",
                  "err": {},
                  "uuid": "155b97b3-3f92-46b2-b942-9a89a874f775",
                  "parentUUID": "7301bbca-802c-45f3-bf3e-dd2fa59059b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({});\nassert_1.default.strictEqual(c.name(), null);\nc.name('HELLO-WORLD');\nassert_1.default.strictEqual(c.name(), 'HELLO-WORLD');",
                  "err": {},
                  "uuid": "c8abe578-8a59-4cf1-8ab8-5a04a72b4f84",
                  "parentUUID": "7301bbca-802c-45f3-bf3e-dd2fa59059b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({ name: 'BANANA' });\nassert_1.default.ok(c.toString().indexOf('BANANA') > -1);",
                  "err": {},
                  "uuid": "784b6f99-e9e6-48fe-be44-f3dc285f5834",
                  "parentUUID": "7301bbca-802c-45f3-bf3e-dd2fa59059b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "155b97b3-3f92-46b2-b942-9a89a874f775",
                "c8abe578-8a59-4cf1-8ab8-5a04a72b4f84",
                "784b6f99-e9e6-48fe-be44-f3dc285f5834"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af9399e0-f20c-4ec8-98f1-29ba6010898c",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({ name: 'FOOBAR' });\nassert_1.default.deepStrictEqual(c.toJSON(), { name: 'FOOBAR' });",
                  "err": {},
                  "uuid": "08b6504b-48c2-42d3-a88b-9a15b9372584",
                  "parentUUID": "af9399e0-f20c-4ec8-98f1-29ba6010898c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08b6504b-48c2-42d3-a88b-9a15b9372584"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f8e98c30-0156-4d45-80cf-a9c32b9163fc",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category toString() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({});\nassert_1.default.throws(function () {\n    c.toString();\n}, /`name`/);",
                  "err": {},
                  "uuid": "e5e9669f-6f63-40a9-a3b8-7bc32014de49",
                  "parentUUID": "f8e98c30-0156-4d45-80cf-a9c32b9163fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5e9669f-6f63-40a9-a3b8-7bc32014de49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "543ee693-6e8c-4820-b87b-880905fb9575",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "68a512fd-057a-4a0a-9d82-0fcbb7123fb3",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Event constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    id: 'FOO',\n    sequence: 1,\n    start: new Date().toJSON(),\n    end: new Date().toJSON(),\n    recurrenceId: new Date().toJSON(),\n    timezone: 'Europe/Berlin',\n    stamp: new Date().toJSON(),\n    allDay: true,\n    floating: false,\n    repeating: null,\n    summary: 'Hello.',\n    location: null,\n    description: null,\n    organizer: null,\n    attendees: [],\n    alarms: [],\n    categories: [],\n    status: null,\n    busystatus: event_1.ICalEventBusyStatus.BUSY,\n    priority: 5,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    attachments: [\n        'https://files.sebbo.net/calendar/attachments/foo'\n    ],\n    transparency: event_1.ICalEventTransparency.TRANSPARENT,\n    created: new Date().toJSON(),\n    lastModified: new Date().toJSON(),\n    class: null,\n    x: []\n};\nconst event = new event_1.default(data, new calendar_1.default());\nassert_1.default.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "12f3920d-52b4-46c6-8740-d2db30385734",
                  "parentUUID": "68a512fd-057a-4a0a-9d82-0fcbb7123fb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    // @ts-ignore\n    new event_1.default({ summary: 'Testevent' }, null);\n}, /`calendar`/);",
                  "err": {},
                  "uuid": "f57ac0eb-36d5-498c-8c12-3c50f95782e6",
                  "parentUUID": "68a512fd-057a-4a0a-9d82-0fcbb7123fb3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12f3920d-52b4-46c6-8740-d2db30385734",
                "f57ac0eb-36d5-498c-8c12-3c50f95782e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa2547a8-a299-40f1-aac5-c561a755f27a",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.id(1048));",
                  "err": {},
                  "uuid": "ab951fbb-c5e3-4f29-b56c-0db1f617281b",
                  "parentUUID": "fa2547a8-a299-40f1-aac5-c561a755f27a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).id(512);\nassert_1.default.strictEqual(event.id(), '512');\nevent.id('xyz');\nassert_1.default.strictEqual(event.id(), 'xyz');",
                  "err": {},
                  "uuid": "cae40c45-5a33-4780-8033-c71130ce6346",
                  "parentUUID": "fa2547a8-a299-40f1-aac5-c561a755f27a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab951fbb-c5e3-4f29-b56c-0db1f617281b",
                "cae40c45-5a33-4780-8033-c71130ce6346"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3bedd960-0754-42be-95b7-daf4dfe1e78e",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.uid(1048));",
                  "err": {},
                  "uuid": "39bbce15-41d7-41a8-9c32-cbb77b385394",
                  "parentUUID": "3bedd960-0754-42be-95b7-daf4dfe1e78e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).uid(512);\nassert_1.default.strictEqual(event.uid(), '512');\nevent.id('xyz');\nassert_1.default.strictEqual(event.uid(), 'xyz');",
                  "err": {},
                  "uuid": "548eaee0-84da-4464-b8d4-204a9b388745",
                  "parentUUID": "3bedd960-0754-42be-95b7-daf4dfe1e78e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39bbce15-41d7-41a8-9c32-cbb77b385394",
                "548eaee0-84da-4464-b8d4-204a9b388745"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aadba64d-6d89-4925-8ac2-d25f52dc32ca",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.sequence(1));",
                  "err": {},
                  "uuid": "9874b2e0-5d75-414d-a4b1-dbebd01ee94d",
                  "parentUUID": "aadba64d-6d89-4925-8ac2-d25f52dc32ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).sequence(1048);\nassert_1.default.strictEqual(event.sequence(), 1048);",
                  "err": {},
                  "uuid": "fdb28952-1ef6-4958-bdda-d7460baa288c",
                  "parentUUID": "aadba64d-6d89-4925-8ac2-d25f52dc32ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.sequence('hello');\n}, /`sequence`/);",
                  "err": {},
                  "uuid": "5b9f25fc-593c-4d5f-b6f0-fb5ee35df72b",
                  "parentUUID": "aadba64d-6d89-4925-8ac2-d25f52dc32ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).sequence(12);\nassert_1.default.strictEqual(event.sequence(), 12);\nevent.sequence(0);\nassert_1.default.strictEqual(event.sequence(), 0);",
                  "err": {},
                  "uuid": "1546b467-0c02-4e6d-8361-6fb33c2c538f",
                  "parentUUID": "aadba64d-6d89-4925-8ac2-d25f52dc32ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9874b2e0-5d75-414d-a4b1-dbebd01ee94d",
                "fdb28952-1ef6-4958-bdda-d7460baa288c",
                "5b9f25fc-593c-4d5f-b6f0-fb5ee35df72b",
                "1546b467-0c02-4e6d-8361-6fb33c2c538f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1380b6f-d4b7-4a95-a553-ba0857ec5e8e",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = (0, moment_timezone_1.default)();\nconst event = new event_1.default({}, new calendar_1.default());\nevent.start(now);\nassert_1.default.strictEqual(event.start(), now);",
                  "err": {},
                  "uuid": "8b3c0c58-7e2b-459d-8a43-9bfcb70df662",
                  "parentUUID": "a1380b6f-d4b7-4a95-a553-ba0857ec5e8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.start(date));\nassert_1.default.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "a8d12c32-9712-428d-8afa-d1fa0f787299",
                  "parentUUID": "a1380b6f-d4b7-4a95-a553-ba0857ec5e8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.start(date));\nassert_1.default.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "be9924d7-7c41-46f8-b694-b5dbf72913dd",
                  "parentUUID": "a1380b6f-d4b7-4a95-a553-ba0857ec5e8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.start(3);\n}, /`start`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.start(null);\n}, /`start`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.start(NaN);\n}, /`start`/, 'NaN');\nassert_1.default.throws(function () {\n    event.start(new Date('hallo'));\n}, /`start`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "d5586b70-e04f-4a80-a24e-495f683d1d2a",
                  "parentUUID": "a1380b6f-d4b7-4a95-a553-ba0857ec5e8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = (0, moment_timezone_1.default)().add(5, 'minutes');\nconst end = (0, moment_timezone_1.default)();\nconst event = new event_1.default({}, new calendar_1.default())\n    .end(end)\n    .start(start);\nassert_1.default.deepStrictEqual(event.start(), end);\nassert_1.default.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "b4418cac-dda9-4f41-bc7d-b70bf785324b",
                  "parentUUID": "a1380b6f-d4b7-4a95-a553-ba0857ec5e8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.start((0, moment_timezone_1.default)()));\nassert_1.default.deepStrictEqual(event, event.start(new Date()));",
                  "err": {},
                  "uuid": "6b16f83a-19f6-4c8d-86e8-417f139abdbf",
                  "parentUUID": "a1380b6f-d4b7-4a95-a553-ba0857ec5e8e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b3c0c58-7e2b-459d-8a43-9bfcb70df662",
                "a8d12c32-9712-428d-8afa-d1fa0f787299",
                "be9924d7-7c41-46f8-b694-b5dbf72913dd",
                "d5586b70-e04f-4a80-a24e-495f683d1d2a",
                "b4418cac-dda9-4f41-bc7d-b70bf785324b",
                "6b16f83a-19f6-4c8d-86e8-417f139abdbf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "812d0168-3e36-44b8-8044-34c29f9af67a",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = (0, moment_timezone_1.default)();\nconst event = new event_1.default({}, new calendar_1.default());\nevent.end(now);\nassert_1.default.deepStrictEqual(event.end(), now);",
                  "err": {},
                  "uuid": "5df93848-431e-458c-8659-90b3eeb7bad2",
                  "parentUUID": "812d0168-3e36-44b8-8044-34c29f9af67a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.end(date));\nassert_1.default.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "351bcb12-ac7e-4db8-a0eb-79858688c387",
                  "parentUUID": "812d0168-3e36-44b8-8044-34c29f9af67a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.end(date));\nassert_1.default.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "2033d921-78c9-4cee-bf30-26feb1fca095",
                  "parentUUID": "812d0168-3e36-44b8-8044-34c29f9af67a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.end(3);\n}, /`end`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.end(NaN);\n}, /`end`/, 'NaN');\nassert_1.default.throws(function () {\n    event.end(new Date('hallo'));\n}, /`end`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "898ddcbc-9986-4620-8fa4-bdad27f38a40",
                  "parentUUID": "812d0168-3e36-44b8-8044-34c29f9af67a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = (0, moment_timezone_1.default)().add(5, 'minutes');\nconst end = (0, moment_timezone_1.default)();\nconst event = new event_1.default({}, new calendar_1.default())\n    .start(start)\n    .end(end);\nassert_1.default.deepStrictEqual(event.start(), end);\nassert_1.default.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "19eaca60-f87d-49a5-be9f-6af7a952de5b",
                  "parentUUID": "812d0168-3e36-44b8-8044-34c29f9af67a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.end((0, moment_timezone_1.default)()));\nassert_1.default.deepStrictEqual(event, event.end(new Date()));",
                  "err": {},
                  "uuid": "1ff612a7-5216-4cbf-936a-a3d6af9b9282",
                  "parentUUID": "812d0168-3e36-44b8-8044-34c29f9af67a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5df93848-431e-458c-8659-90b3eeb7bad2",
                "351bcb12-ac7e-4db8-a0eb-79858688c387",
                "2033d921-78c9-4cee-bf30-26feb1fca095",
                "898ddcbc-9986-4620-8fa4-bdad27f38a40",
                "19eaca60-f87d-49a5-be9f-6af7a952de5b",
                "1ff612a7-5216-4cbf-936a-a3d6af9b9282"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "90d19fa7-3031-4fb8-bdd4-bd2bf5919d37",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = (0, moment_timezone_1.default)();\nconst event = new event_1.default({}, new calendar_1.default());\nevent.recurrenceId(now);\nassert_1.default.deepStrictEqual(event.recurrenceId(), now);",
                  "err": {},
                  "uuid": "1c23ca4e-3e67-4344-a675-75f23c4a2ff9",
                  "parentUUID": "90d19fa7-3031-4fb8-bdd4-bd2bf5919d37",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.recurrenceId(date));\nassert_1.default.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "9c9cd381-3aa8-4e8c-ae24-ba26a0c04b68",
                  "parentUUID": "90d19fa7-3031-4fb8-bdd4-bd2bf5919d37",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.recurrenceId(date));\nassert_1.default.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "965d3a63-2315-4550-8cd1-52078b0937ad",
                  "parentUUID": "90d19fa7-3031-4fb8-bdd4-bd2bf5919d37",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(3);\n}, /`recurrenceId`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(NaN);\n}, /`recurrenceId`/, 'NaN');\nassert_1.default.throws(function () {\n    event.recurrenceId(new Date('hallo'));\n}, /`recurrenceId`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "0150c6e6-87f4-4de6-9df2-1b01e8fdf8b9",
                  "parentUUID": "90d19fa7-3031-4fb8-bdd4-bd2bf5919d37",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.recurrenceId((0, moment_timezone_1.default)()));\nassert_1.default.deepStrictEqual(event, event.recurrenceId(new Date()));",
                  "err": {},
                  "uuid": "b5eae5d3-04bc-47a9-98bb-c6759b417894",
                  "parentUUID": "90d19fa7-3031-4fb8-bdd4-bd2bf5919d37",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c23ca4e-3e67-4344-a675-75f23c4a2ff9",
                "9c9cd381-3aa8-4e8c-ae24-ba26a0c04b68",
                "965d3a63-2315-4550-8cd1-52078b0937ad",
                "0150c6e6-87f4-4de6-9df2-1b01e8fdf8b9",
                "b5eae5d3-04bc-47a9-98bb-c6759b417894"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "db69648b-c43a-4f71-85e7-f2118b84be60",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default()).timezone('Europe/Berlin');\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "25965651-703a-4ccd-84ab-0b9bb7e5a8f7",
                  "parentUUID": "db69648b-c43a-4f71-85e7-f2118b84be60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nconst e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, cal);\nassert_1.default.strictEqual(cal.timezone(), null);\nassert_1.default.strictEqual(e.timezone(), null);\ncal.timezone('Europe/London');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/London');\nassert_1.default.strictEqual(e.timezone(), 'Europe/London');\ne.timezone('Europe/Berlin');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/London');\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert_1.default.strictEqual(cal.timezone(), null);\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone(null);\nassert_1.default.strictEqual(cal.timezone(), null);\nassert_1.default.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "32d90cfb-50cf-4e1e-890f-86395dc64b61",
                  "parentUUID": "db69648b-c43a-4f71-85e7-f2118b84be60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.timezone('Europe/Berlin'));",
                  "err": {},
                  "uuid": "c0e233a2-ca98-40e7-abe6-b9ffc7b88faf",
                  "parentUUID": "db69648b-c43a-4f71-85e7-f2118b84be60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.timezone('Europe/London');\nassert_1.default.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "eb06e5cd-6767-4eb2-aaec-4a1b1409d347",
                  "parentUUID": "db69648b-c43a-4f71-85e7-f2118b84be60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.floating(true);\ne.timezone('Europe/London');\nassert_1.default.strictEqual(e.floating(), false);",
                  "err": {},
                  "uuid": "1f997221-4d8d-48c6-a5fc-ab733d218d04",
                  "parentUUID": "db69648b-c43a-4f71-85e7-f2118b84be60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.floating(true);\ne.timezone(null);\nassert_1.default.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "062650f2-3bf4-4a1f-babd-b9c744830593",
                  "parentUUID": "db69648b-c43a-4f71-85e7-f2118b84be60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Event timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    timezone: 'Europe/Berlin',\n    summary: 'Example Event'\n}, new calendar_1.default());\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone('UTC');\nassert_1.default.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "5e36cf1a-4c1c-4d0d-a953-eeeb0e421a2a",
                  "parentUUID": "db69648b-c43a-4f71-85e7-f2118b84be60",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25965651-703a-4ccd-84ab-0b9bb7e5a8f7",
                "32d90cfb-50cf-4e1e-890f-86395dc64b61",
                "c0e233a2-ca98-40e7-abe6-b9ffc7b88faf",
                "eb06e5cd-6767-4eb2-aaec-4a1b1409d347",
                "1f997221-4d8d-48c6-a5fc-ab733d218d04",
                "062650f2-3bf4-4a1f-babd-b9c744830593",
                "5e36cf1a-4c1c-4d0d-a953-eeeb0e421a2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "784b228e-1edb-4541-a3c4-fbf8f971aee2",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = (0, moment_timezone_1.default)().add(1, 'day');\nconst e = new event_1.default({}, new calendar_1.default()).stamp(now);\nassert_1.default.deepStrictEqual(e.stamp(), now);",
                  "err": {},
                  "uuid": "58df307c-a65e-41f5-872b-5f744e1bde42",
                  "parentUUID": "784b228e-1edb-4541-a3c4-fbf8f971aee2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.stamp(date));\nassert_1.default.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "e6b0f2c5-5c6d-4318-bcc3-cfb5ca77e60b",
                  "parentUUID": "784b228e-1edb-4541-a3c4-fbf8f971aee2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.stamp(date));\nassert_1.default.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "17929187-1477-44bc-b203-204d00732db2",
                  "parentUUID": "784b228e-1edb-4541-a3c4-fbf8f971aee2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.stamp(3);\n}, /`stamp`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.stamp(null);\n}, /`stamp`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.stamp(NaN);\n}, /`stamp`/, 'NaN');\nassert_1.default.throws(function () {\n    event.stamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "f3433d09-8f1c-48c2-bb84-bfde9049d727",
                  "parentUUID": "784b228e-1edb-4541-a3c4-fbf8f971aee2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.stamp(new Date()));",
                  "err": {},
                  "uuid": "2d75a37b-2818-402d-98cb-7b06f9ebda5b",
                  "parentUUID": "784b228e-1edb-4541-a3c4-fbf8f971aee2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58df307c-a65e-41f5-872b-5f744e1bde42",
                "e6b0f2c5-5c6d-4318-bcc3-cfb5ca77e60b",
                "17929187-1477-44bc-b203-204d00732db2",
                "f3433d09-8f1c-48c2-bb84-bfde9049d727",
                "2d75a37b-2818-402d-98cb-7b06f9ebda5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8990a899-563c-457e-9da4-563e91daeed1",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = (0, moment_timezone_1.default)().add(1, 'day');\nconst e = new event_1.default({}, new calendar_1.default()).timestamp(now);\nassert_1.default.deepStrictEqual(e.timestamp(), now);",
                  "err": {},
                  "uuid": "105088aa-77e8-4d76-983d-b47834cacf9e",
                  "parentUUID": "8990a899-563c-457e-9da4-563e91daeed1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.timestamp(date));\nassert_1.default.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "552aeefc-e3cc-44ec-bc4a-88d048be4005",
                  "parentUUID": "8990a899-563c-457e-9da4-563e91daeed1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.timestamp(date));\nassert_1.default.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "ba067770-43e2-419e-8169-da55f9b0e1ae",
                  "parentUUID": "8990a899-563c-457e-9da4-563e91daeed1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.timestamp(3);\n}, /`stamp`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.timestamp(null);\n}, /`stamp`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.timestamp(NaN);\n}, /`stamp`/, 'NaN');\nassert_1.default.throws(function () {\n    event.timestamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "a2d81308-b51b-4854-9334-cf3f40573db5",
                  "parentUUID": "8990a899-563c-457e-9da4-563e91daeed1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.timestamp(new Date()));",
                  "err": {},
                  "uuid": "e24bf5a9-64bb-4bd1-b7a7-a7924081a786",
                  "parentUUID": "8990a899-563c-457e-9da4-563e91daeed1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "105088aa-77e8-4d76-983d-b47834cacf9e",
                "552aeefc-e3cc-44ec-bc4a-88d048be4005",
                "ba067770-43e2-419e-8169-da55f9b0e1ae",
                "a2d81308-b51b-4854-9334-cf3f40573db5",
                "e24bf5a9-64bb-4bd1-b7a7-a7924081a786"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "76217400-2267-4a87-976e-a8613864efd0",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.allDay(true);\nassert_1.default.strictEqual(e.allDay(), true);",
                  "err": {},
                  "uuid": "13734295-19ae-4b47-bd4f-94dc5c308226",
                  "parentUUID": "76217400-2267-4a87-976e-a8613864efd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.allDay(true));",
                  "err": {},
                  "uuid": "9f3bdf6c-7d60-4ea2-9baf-008a480a57b5",
                  "parentUUID": "76217400-2267-4a87-976e-a8613864efd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.allDay(true);\nassert_1.default.strictEqual(event.allDay(), true);",
                  "err": {},
                  "uuid": "400d3165-2e39-4b3d-bef9-a7f73c1090d6",
                  "parentUUID": "76217400-2267-4a87-976e-a8613864efd0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13734295-19ae-4b47-bd4f-94dc5c308226",
                "9f3bdf6c-7d60-4ea2-9baf-008a480a57b5",
                "400d3165-2e39-4b3d-bef9-a7f73c1090d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "10072647-be2c-4575-998e-6d557bf65145",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default()).floating(true);\nassert_1.default.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "1899cfa2-8629-4054-8f50-bdf413867c80",
                  "parentUUID": "10072647-be2c-4575-998e-6d557bf65145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.floating(false));\nassert_1.default.deepStrictEqual(e, e.floating(true));",
                  "err": {},
                  "uuid": "9f571f8c-e05a-4f64-9abb-3cac4f40c468",
                  "parentUUID": "10072647-be2c-4575-998e-6d557bf65145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.floating(true);\nassert_1.default.strictEqual(event.floating(), true);",
                  "err": {},
                  "uuid": "28077d5b-c4ed-40d2-94d3-95ab5ca27a06",
                  "parentUUID": "10072647-be2c-4575-998e-6d557bf65145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.timezone('Europe/London');\ne.floating(true);\nassert_1.default.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "0341fbf3-cba9-4984-9b13-533be61d28d1",
                  "parentUUID": "10072647-be2c-4575-998e-6d557bf65145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.timezone('Europe/London');\ne.floating(false);\nassert_1.default.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "6ba099f0-cbe8-4450-9ba4-1f0869a34d90",
                  "parentUUID": "10072647-be2c-4575-998e-6d557bf65145",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1899cfa2-8629-4054-8f50-bdf413867c80",
                "9f571f8c-e05a-4f64-9abb-3cac4f40c468",
                "28077d5b-c4ed-40d2-94d3-95ab5ca27a06",
                "0341fbf3-cba9-4984-9b13-533be61d28d1",
                "6ba099f0-cbe8-4450-9ba4-1f0869a34d90"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f318d0f6-229a-49df-81ce-c800e51555aa",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options = {\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    count: 5,\n    interval: 2,\n    until: (0, moment_timezone_1.default)(),\n    exclude: [(0, moment_timezone_1.default)()]\n};\nconst e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e.repeating(), null);\ne.repeating(options);\nassert_1.default.strictEqual(JSON.stringify(e.repeating(), null, '  '), JSON.stringify(options, null, '  '));\ne.repeating(null);\nassert_1.default.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "6c59218b-4ea6-4c8c-b364-9f813ed76d55",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.repeating(null));\nassert_1.default.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "117c88c2-9508-4717-938c-1f9aec497941",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.repeating(null), 'repeating(null)');\nassert_1.default.deepStrictEqual(e, e.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY\n}), 'repeating({freq: \\'MONTHLY\\'})');",
                  "err": {},
                  "uuid": "42df0417-757f-454f-bfde-e7a23466e36f",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        // @ts-ignore\n        repeating: {}\n    }, new calendar_1.default());\n}, /Input must be one of the following: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY/);",
                  "err": {},
                  "uuid": "04342b8c-6997-485f-b76b-bc9ac18687c0",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            // @ts-ignore\n            freq: 'hello'\n        }\n    }, new calendar_1.default());\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "7c76c3f7-9462-48e0-8771-b56d0ca83881",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY });\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.strictEqual(result.freq, 'MONTHLY');",
                  "err": {},
                  "uuid": "a1255247-613a-4de6-b8c0-18700a76e00c",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            count: Infinity\n        }\n    }, new calendar_1.default());\n}, /`repeating.count` must be a finite number!/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            count: 'abc'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.count` must be a finite number!/);",
                  "err": {},
                  "uuid": "a5927206-42d5-401e-8107-b50b7a14fba6",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, count: 5 });\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.strictEqual(result.count, 5);",
                  "err": {},
                  "uuid": "a9d74cfe-a812-45c7-ace4-bc06680530e4",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: Infinity\n        }\n    }, new calendar_1.default());\n}, /`repeating.interval` must be a finite number!/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            interval: 'abc'\n        }\n    }, new calendar_1.default());\n}, /`repeating.interval` must be a finite number!/);",
                  "err": {},
                  "uuid": "51aad003-adee-46ab-b96b-eddb7120321b",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, interval: 5 });\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.strictEqual(result.interval, 5);",
                  "err": {},
                  "uuid": "2c241548-858a-43f7-bd44-e8b90a6494da",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            until: null\n        }\n    }, new calendar_1.default());\n}, /Error: `repeating\\.until` has to be a valid date!/);",
                  "err": {},
                  "uuid": "5156ac42-622a-4900-8068-f9fd3890134c",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toJSON();\nevent.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "929fa086-f5b3-4c01-a8c4-122e295120d1",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week').toDate();\nevent.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "02de28b9-55a1-457f-ae54-85b637d7a9d5",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week');\nevent.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "47a43975-2633-404f-9bad-0251a6fad312",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: 3 });\n}, /`repeating.until`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: null });\n}, /`repeating.until`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: NaN });\n}, /`repeating.until`/, 'NaN');\nassert_1.default.throws(function () {\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: new Date('foo') });\n}, /`repeating.until`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "f63ce2bf-6c5b-4083-bc0c-98164e00b625",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', 'BAR', 'th']\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', Infinity, 'th']\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "18800712-3d0a-4428-81c8-95a03a4a1164",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    byDay: [types_1.ICalWeekday.SU, types_1.ICalWeekday.WE, types_1.ICalWeekday.TH]\n});\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.byDay, ['SU', 'WE', 'TH']);",
                  "err": {},
                  "uuid": "ab1bc1c2-c037-4d10-8e91-4bf53dba590d",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonth: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonth` contains invalid value `FOO`/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonth: [1, 14, 7]\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonth` contains invalid value `14`/);",
                  "err": {},
                  "uuid": "b8488479-0c30-4bdd-a0fc-e18ef176aa7e",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, byMonth: [1, 12, 7] });\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.byMonth, [1, 12, 7]);",
                  "err": {},
                  "uuid": "68b983b2-6911-44f3-9e43-321c8a836979",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonthDay: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonthDay` contains invalid value `FOO`/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 32, 15]\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonthDay` contains invalid value `32`/);",
                  "err": {},
                  "uuid": "f8b1822e-3b82-4f3c-bda7-8ff1d9e5021e",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, byMonthDay: [1, 15] });\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.byMonthDay, [1, 15]);",
                  "err": {},
                  "uuid": "75eca022-adb2-423e-b23f-fa8fd69d0eca",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            bySetPos: 6\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.bySetPos` contains invalid value `6`/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            // @ts-ignore\n            bySetPos: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.bySetPos` contains invalid value `FOO`/);",
                  "err": {},
                  "uuid": "10bfa29d-24ea-4e0c-93d3-f720b2c4613e",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            bySetPos: 6\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/);",
                  "err": {},
                  "uuid": "3b6d23a3-0010-41dc-bbfa-e37a8888ffb7",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst e = new event_1.default({}, new calendar_1.default());\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    byDay: [types_1.ICalWeekday.SU],\n    bySetPos: 2\n});\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.strictEqual((_a = result.byDay) === null || _a === void 0 ? void 0 : _a.length, 1);\nassert_1.default.strictEqual(result.bySetPos, 2);",
                  "err": {},
                  "uuid": "e74d81fc-24a6-499d-be6f-e9bd2ac6d278",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            exclude: new Date('FOO')\n        }\n    }, new calendar_1.default());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "32bc10da-dd21-4710-922f-eb5f7a0cf95e",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            exclude: [(0, moment_timezone_1.default)(), new Date('BAR'), 'FOO']\n        }\n    }, new calendar_1.default());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "c7185241-78ab-4b06-9524-ee899cc30558",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        end: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            // @ts-ignore\n            exclude: 42\n        }\n    }, new calendar_1.default());\n}, /`repeating.exclude\\[0\\]` has to be a valid date!/);",
                  "err": {},
                  "uuid": "88d471ab-be58-4176-b228-8d22fe4617c3",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().add(1, 'week');\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    exclude: [\n        date.toJSON(),\n        date.toDate(),\n        date\n    ]\n});\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.ok(Array.isArray(result.exclude));\nassert_1.default.strictEqual(result.exclude.length, 3);\nassert_1.default.deepStrictEqual(result.exclude[0], date.toJSON(), 'String');\nassert_1.default.deepStrictEqual(result.exclude[1], date.toDate(), 'Date');\nassert_1.default.deepStrictEqual(result.exclude[2], date, 'Moment');",
                  "err": {},
                  "uuid": "61007679-32b0-450d-b631-e4f5be66af89",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: (0, moment_timezone_1.default)(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            startOfWeek: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "40e06455-91df-40af-909b-c1fc1ef13178",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    startOfWeek: types_1.ICalWeekday.SU\n});\nconst result = e.repeating();\nassert_1.default.ok(result && !(0, tools_1.isRRule)(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.startOfWeek, 'SU');",
                  "err": {},
                  "uuid": "1de2a47f-cb16-4fdb-bf3a-5024daefb530",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support RRules",
                  "fullTitle": "ical-generator Event repeating() should support RRules",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = new Date(Date.UTC(2012, 1, 1, 10, 30));\nconst e = new event_1.default({ start }, new calendar_1.default());\nconst rule = new rrule_1.RRule({\n    freq: rrule_1.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule_1.RRule.MO, rrule_1.RRule.FR],\n    dtstart: start,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\ne.repeating(rule);\nconst result = e.repeating();\nassert_1.default.ok((0, tools_1.isRRule)(result));\nassert_1.default.deepStrictEqual(result, rule);\nassert_1.default.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "0b8f2a24-af04-4fbe-bddd-3db4f35f8db9",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support strings",
                  "fullTitle": "ical-generator Event repeating() should support strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({ start: new Date() }, new calendar_1.default());\nconst rule = 'RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z';\ne.repeating(rule);\nconst result = e.repeating();\nassert_1.default.deepStrictEqual(result, rule);\nassert_1.default.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "7221f0c4-b047-4989-a835-be1db1e27bd8",
                  "parentUUID": "f318d0f6-229a-49df-81ce-c800e51555aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c59218b-4ea6-4c8c-b364-9f813ed76d55",
                "117c88c2-9508-4717-938c-1f9aec497941",
                "42df0417-757f-454f-bfde-e7a23466e36f",
                "04342b8c-6997-485f-b76b-bc9ac18687c0",
                "7c76c3f7-9462-48e0-8771-b56d0ca83881",
                "a1255247-613a-4de6-b8c0-18700a76e00c",
                "a5927206-42d5-401e-8107-b50b7a14fba6",
                "a9d74cfe-a812-45c7-ace4-bc06680530e4",
                "51aad003-adee-46ab-b96b-eddb7120321b",
                "2c241548-858a-43f7-bd44-e8b90a6494da",
                "5156ac42-622a-4900-8068-f9fd3890134c",
                "929fa086-f5b3-4c01-a8c4-122e295120d1",
                "02de28b9-55a1-457f-ae54-85b637d7a9d5",
                "47a43975-2633-404f-9bad-0251a6fad312",
                "f63ce2bf-6c5b-4083-bc0c-98164e00b625",
                "18800712-3d0a-4428-81c8-95a03a4a1164",
                "ab1bc1c2-c037-4d10-8e91-4bf53dba590d",
                "b8488479-0c30-4bdd-a0fc-e18ef176aa7e",
                "68b983b2-6911-44f3-9e43-321c8a836979",
                "f8b1822e-3b82-4f3c-bda7-8ff1d9e5021e",
                "75eca022-adb2-423e-b23f-fa8fd69d0eca",
                "10bfa29d-24ea-4e0c-93d3-f720b2c4613e",
                "3b6d23a3-0010-41dc-bbfa-e37a8888ffb7",
                "e74d81fc-24a6-499d-be6f-e9bd2ac6d278",
                "32bc10da-dd21-4710-922f-eb5f7a0cf95e",
                "c7185241-78ab-4b06-9524-ee899cc30558",
                "88d471ab-be58-4176-b228-8d22fe4617c3",
                "61007679-32b0-450d-b631-e4f5be66af89",
                "40e06455-91df-40af-909b-c1fc1ef13178",
                "1de2a47f-cb16-4fdb-bf3a-5024daefb530",
                "0b8f2a24-af04-4fbe-bddd-3db4f35f8db9",
                "7221f0c4-b047-4989-a835-be1db1e27bd8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "63c8940e-ab4c-42f3-a3aa-17077ae567e3",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.summary(), '');\ne.summary('Testevent');\nassert_1.default.strictEqual(e.summary(), 'Testevent');",
                  "err": {},
                  "uuid": "b0cfa086-4c0d-46cf-8e2a-b6ef9a5aa362",
                  "parentUUID": "63c8940e-ab4c-42f3-a3aa-17077ae567e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.summary(''));\nassert_1.default.deepStrictEqual(e, e.summary('Testevent'));",
                  "err": {},
                  "uuid": "cc8067b0-4cd7-4af1-b44c-d172bf747608",
                  "parentUUID": "63c8940e-ab4c-42f3-a3aa-17077ae567e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.summary('Example Event II');\nassert_1.default.strictEqual(event.summary(), 'Example Event II');\nevent.summary('');\nassert_1.default.strictEqual(event.summary(), '');",
                  "err": {},
                  "uuid": "5c749ef6-45ab-4448-a6bb-4e8a4cf4146a",
                  "parentUUID": "63c8940e-ab4c-42f3-a3aa-17077ae567e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0cfa086-4c0d-46cf-8e2a-b6ef9a5aa362",
                "cc8067b0-4cd7-4af1-b44c-d172bf747608",
                "5c749ef6-45ab-4448-a6bb-4e8a4cf4146a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "677e8406-99ec-4ee4-aeb4-6aeb08ec168e",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value (string)",
                  "fullTitle": "ical-generator Event location() getter should return value (string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.location(), null);\ne.location('Test Location');\nassert_1.default.deepStrictEqual(e.location(), { title: 'Test Location' });\ne.location(null);\nassert_1.default.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "f053c4e2-c133-4e9c-ab13-0aefd74ab50c",
                  "parentUUID": "677e8406-99ec-4ee4-aeb4-6aeb08ec168e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value (obj)",
                  "fullTitle": "ical-generator Event location() getter should return value (obj)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.location(), null);\ne.location({\n    title: 'Foo',\n    geo: { lat: 44.5, lon: -3.4 }\n});\nassert_1.default.deepStrictEqual((_a = e.location()) === null || _a === void 0 ? void 0 : _a.title, 'Foo');\nassert_1.default.deepStrictEqual((_b = e.location()) === null || _b === void 0 ? void 0 : _b.geo, { lat: 44.5, lon: -3.4 });\ne.location(null);\nassert_1.default.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "67290792-178f-4fa4-9dd8-474613ef8b51",
                  "parentUUID": "677e8406-99ec-4ee4-aeb4-6aeb08ec168e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.location(null));\nassert_1.default.deepStrictEqual(e, e.location('Test Location'));",
                  "err": {},
                  "uuid": "b94c05b8-37b7-4da2-9eff-dafec95ff28e",
                  "parentUUID": "677e8406-99ec-4ee4-aeb4-6aeb08ec168e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.location('Europa-Park');\nassert_1.default.strictEqual((_a = event.location()) === null || _a === void 0 ? void 0 : _a.title, 'Europa-Park');",
                  "err": {},
                  "uuid": "7a9b297f-a7e5-49b5-b8ef-11a14ffd143b",
                  "parentUUID": "677e8406-99ec-4ee4-aeb4-6aeb08ec168e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when location is not valid",
                  "fullTitle": "ical-generator Event location() should throw error when location is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\n// @ts-ignore\nassert_1.default.throws(() => event.location({ geo: 3 }), /`location` isn't formatted correctly/i);\n// @ts-ignore\nassert_1.default.throws(() => event.location({}), /`location` isn't formatted correctly/i);",
                  "err": {},
                  "uuid": "be0ccffc-eed7-4b99-88da-e05124f0b024",
                  "parentUUID": "677e8406-99ec-4ee4-aeb4-6aeb08ec168e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f053c4e2-c133-4e9c-ab13-0aefd74ab50c",
                "67290792-178f-4fa4-9dd8-474613ef8b51",
                "b94c05b8-37b7-4da2-9eff-dafec95ff28e",
                "7a9b297f-a7e5-49b5-b8ef-11a14ffd143b",
                "be0ccffc-eed7-4b99-88da-e05124f0b024"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9444d4b6-484d-4679-83c4-c998d9078f28",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.description(), null);\ne.description('I don\\'t need a description. I\\'m far to awesome for descriptions…');\nassert_1.default.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…'\n});\ne.description({\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\nassert_1.default.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\ne.description(null);\nassert_1.default.strictEqual(e.description(), null);",
                  "err": {},
                  "uuid": "49d33dd9-3596-442f-bdfe-fa7e3cf2c6ff",
                  "parentUUID": "9444d4b6-484d-4679-83c4-c998d9078f28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.description(null));\nassert_1.default.deepStrictEqual(e, e.description('I don\\'t need a description. I\\'m far to awesome for descriptions…'));",
                  "err": {},
                  "uuid": "60359bb9-8fb1-43e5-ae6f-d800e79146ce",
                  "parentUUID": "9444d4b6-484d-4679-83c4-c998d9078f28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.description('Well. But other people need descriptions… :/');\nassert_1.default.deepStrictEqual(event.description(), {\n    plain: 'Well. But other people need descriptions… :/'\n});\nevent.description({\n    plain: 'I am uncool text.',\n    html: '<marquee>I\\'m the best HTML tag in this universe!</marquee>'\n});\nassert_1.default.ok(event.toString().includes('<marquee>I\\'m the best HTML tag in this universe!</marquee>'));",
                  "err": {},
                  "uuid": "97cc1504-c194-4f9a-8990-eb7009689c3c",
                  "parentUUID": "9444d4b6-484d-4679-83c4-c998d9078f28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49d33dd9-3596-442f-bdfe-fa7e3cf2c6ff",
                "60359bb9-8fb1-43e5-ae6f-d800e79146ce",
                "97cc1504-c194-4f9a-8990-eb7009689c3c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72788634-bb36-44a2-9c25-af8e593ae958",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b, _c, _d, _e;\nconst e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.organizer(), null);\ne.organizer(null);\nassert_1.default.strictEqual(e.organizer(), null);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert_1.default.strictEqual('Sebastian Pekarek', (_a = e.organizer()) === null || _a === void 0 ? void 0 : _a.name);\nassert_1.default.strictEqual('mail@example.com', (_b = e.organizer()) === null || _b === void 0 ? void 0 : _b.email);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert_1.default.strictEqual('Sebastian Pekarek', (_c = e.organizer()) === null || _c === void 0 ? void 0 : _c.name);\nassert_1.default.strictEqual('mail@example.com', (_d = e.organizer()) === null || _d === void 0 ? void 0 : _d.email);\nassert_1.default.strictEqual('mail2@example2.com', (_e = e.organizer()) === null || _e === void 0 ? void 0 : _e.mailto);",
                  "err": {},
                  "uuid": "38119d55-5f15-411e-89c8-56e0beb2772a",
                  "parentUUID": "72788634-bb36-44a2-9c25-af8e593ae958",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.organizer(null));\nassert_1.default.deepStrictEqual(e, e.organizer('Sebastian Pekarek <mail@example.com>'));",
                  "err": {},
                  "uuid": "4893ddaf-d9b8-42ee-a994-5b67b6d7040e",
                  "parentUUID": "72788634-bb36-44a2-9c25-af8e593ae958",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert_1.default.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: undefined\n});\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert_1.default.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: 'mail2@example2.com',\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "03f9c568-934d-4f4a-adb3-63e335fcc35e",
                  "parentUUID": "72788634-bb36-44a2-9c25-af8e593ae958",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support sent by when using object",
                  "fullTitle": "ical-generator Event organizer() should support sent by when using object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', sentBy: 'bot@example.com' });\nassert_1.default.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: 'bot@example.com'\n});",
                  "err": {},
                  "uuid": "9fdf72ce-01a1-4e04-ab1b-d04be581cc61",
                  "parentUUID": "72788634-bb36-44a2-9c25-af8e593ae958",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.organizer('Sebastian Pekarek <mail@example.com>');\nassert_1.default.deepStrictEqual(event.organizer(), { name: 'Sebastian Pekarek', email: 'mail@example.com' });",
                  "err": {},
                  "uuid": "08c6186a-f67f-479d-9c9a-e9880f29d26b",
                  "parentUUID": "72788634-bb36-44a2-9c25-af8e593ae958",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.organizer('foo bar');\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "d6aefd15-151b-4db4-b61a-a83ce91af127",
                  "parentUUID": "72788634-bb36-44a2-9c25-af8e593ae958",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.organizer({ email: 'foo' });\n}, /`organizer\\.name`/);",
                  "err": {},
                  "uuid": "6c7561a1-d197-481e-a4f6-b7a4a9f18a3c",
                  "parentUUID": "72788634-bb36-44a2-9c25-af8e593ae958",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.organizer(Infinity);\n}, /`organizer`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.organizer(NaN);\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "b9378b31-bf62-4207-86b8-6b7e2b210157",
                  "parentUUID": "72788634-bb36-44a2-9c25-af8e593ae958",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without an email",
                  "fullTitle": "ical-generator Event organizer() should work without an email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.organizer({ name: 'Sebastian Pekarek' });\nassert_1.default.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: undefined,\n    mailto: undefined,\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "69cfe1a8-7c46-4bc4-b323-4ff0fca57929",
                  "parentUUID": "72788634-bb36-44a2-9c25-af8e593ae958",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38119d55-5f15-411e-89c8-56e0beb2772a",
                "4893ddaf-d9b8-42ee-a994-5b67b6d7040e",
                "03f9c568-934d-4f4a-adb3-63e335fcc35e",
                "9fdf72ce-01a1-4e04-ab1b-d04be581cc61",
                "08c6186a-f67f-479d-9c9a-e9880f29d26b",
                "d6aefd15-151b-4db4-b61a-a83ce91af127",
                "6c7561a1-d197-481e-a4f6-b7a4a9f18a3c",
                "b9378b31-bf62-4207-86b8-6b7e2b210157",
                "69cfe1a8-7c46-4bc4-b323-4ff0fca57929"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "41db060d-2c89-4478-b56b-1d4f2f82cc31",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = new attendee_1.default({}, event);\nassert_1.default.strictEqual(event.createAttendee(attendee), attendee, 'createAttendee returns attendee');\nassert_1.default.deepStrictEqual(event.attendees()[0], attendee, 'attendee pushed');",
                  "err": {},
                  "uuid": "86158041-1c67-4c01-9390-1f9eb2830de1",
                  "parentUUID": "41db060d-2c89-4478-b56b-1d4f2f82cc31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.ok(event.createAttendee({}) instanceof attendee_1.default);\nassert_1.default.strictEqual(event.attendees.length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "75a9f242-3bcb-4dbe-9e82-20762112d44a",
                  "parentUUID": "41db060d-2c89-4478-b56b-1d4f2f82cc31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = event.createAttendee('Zac <zac@example.com>');\nassert_1.default.strictEqual(attendee.name(), 'Zac');\nassert_1.default.strictEqual(attendee.email(), 'zac@example.com');\nassert_1.default.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "c7ddeed9-fb23-47ef-b9fe-96bc22021bf8",
                  "parentUUID": "41db060d-2c89-4478-b56b-1d4f2f82cc31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.createAttendee('foo bar');\n}, /isn't formated correctly/);",
                  "err": {},
                  "uuid": "18ed730e-7f59-4a29-afd9-cad69ca0630c",
                  "parentUUID": "41db060d-2c89-4478-b56b-1d4f2f82cc31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = event.createAttendee({ name: 'Zac', email: 'zac@example.com' });\nassert_1.default.strictEqual(attendee.name(), 'Zac');\nassert_1.default.strictEqual(attendee.email(), 'zac@example.com');\nassert_1.default.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "d8565f06-fc65-4d31-8c19-b698c781e381",
                  "parentUUID": "41db060d-2c89-4478-b56b-1d4f2f82cc31",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86158041-1c67-4c01-9390-1f9eb2830de1",
                "75a9f242-3bcb-4dbe-9e82-20762112d44a",
                "c7ddeed9-fb23-47ef-b9fe-96bc22021bf8",
                "18ed730e-7f59-4a29-afd9-cad69ca0630c",
                "d8565f06-fc65-4d31-8c19-b698c781e381"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cdc59feb-2149-47c1-ac0b-c9df0f0f5e7f",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.attendees().length, 0);\nconst attendee = event.createAttendee();\nassert_1.default.strictEqual(event.attendees().length, 1);\nassert_1.default.deepStrictEqual(event.attendees()[0], attendee);",
                  "err": {},
                  "uuid": "fc02f76a-d8c8-4c12-96db-3e0dfb38cac6",
                  "parentUUID": "cdc59feb-2149-47c1-ac0b-c9df0f0f5e7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.attendees([{ name: 'Person A' }, { name: 'Person B' }]);\nassert_1.default.strictEqual(event.attendees().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "12fc503b-4747-479a-87e3-8206e95b91f5",
                  "parentUUID": "cdc59feb-2149-47c1-ac0b-c9df0f0f5e7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc02f76a-d8c8-4c12-96db-3e0dfb38cac6",
                "12fc503b-4747-479a-87e3-8206e95b91f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d96cef79-4e7f-4b2d-a3de-710ef6f564ec",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.ok(event.createAlarm() instanceof alarm_1.default);",
                  "err": {},
                  "uuid": "40a54c73-1614-4188-8fff-5185c9328d91",
                  "parentUUID": "d96cef79-4e7f-4b2d-a3de-710ef6f564ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst alarm = event.createAlarm({ type: alarm_1.ICalAlarmType.audio });\nassert_1.default.strictEqual(alarm.type(), 'audio');",
                  "err": {},
                  "uuid": "61434136-1e77-475e-88c4-d6cb7d322c0f",
                  "parentUUID": "d96cef79-4e7f-4b2d-a3de-710ef6f564ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40a54c73-1614-4188-8fff-5185c9328d91",
                "61434136-1e77-475e-88c4-d6cb7d322c0f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2edec2fe-8f86-43c0-84bc-6fb741569c30",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.alarms().length, 0);\nconst alarm = event.createAlarm();\nassert_1.default.strictEqual(event.alarms().length, 1);\nassert_1.default.deepStrictEqual(event.alarms()[0], alarm);",
                  "err": {},
                  "uuid": "0bb8ccbb-6a4c-44f5-9b20-5a1145d405f5",
                  "parentUUID": "2edec2fe-8f86-43c0-84bc-6fb741569c30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.alarms([\n    { type: alarm_1.ICalAlarmType.audio },\n    { type: alarm_1.ICalAlarmType.display }\n]);\nassert_1.default.strictEqual(event.alarms().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "4b64f736-4cf8-48d3-81db-7f76f591ad0b",
                  "parentUUID": "2edec2fe-8f86-43c0-84bc-6fb741569c30",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0bb8ccbb-6a4c-44f5-9b20-5a1145d405f5",
                "4b64f736-4cf8-48d3-81db-7f76f591ad0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bd052c60-a635-47a5-94f7-61df5f822d6d",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.ok(event.createCategory() instanceof category_1.default);",
                  "err": {},
                  "uuid": "9a22182c-4dbf-4bf0-9eca-d93649792b36",
                  "parentUUID": "bd052c60-a635-47a5-94f7-61df5f822d6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst category = event.createCategory({ name: 'foo' });\nassert_1.default.strictEqual(category.name(), 'foo');",
                  "err": {},
                  "uuid": "113570d3-62f1-4698-85ab-ff888ef0acc6",
                  "parentUUID": "bd052c60-a635-47a5-94f7-61df5f822d6d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a22182c-4dbf-4bf0-9eca-d93649792b36",
                "113570d3-62f1-4698-85ab-ff888ef0acc6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "70135cf4-dc9f-4af6-aa00-ef47b6deeb12",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.categories().length, 0);\nconst category = event.createCategory();\nassert_1.default.strictEqual(event.categories().length, 1);\nassert_1.default.deepStrictEqual(event.categories()[0], category);",
                  "err": {},
                  "uuid": "2dfb2ba5-b711-4923-bfdb-72c6947d2f59",
                  "parentUUID": "70135cf4-dc9f-4af6-aa00-ef47b6deeb12",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.categories([\n    { name: 'foo' },\n    { name: 'bar' }\n]);\nassert_1.default.strictEqual(event.categories().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "9a987439-8119-4924-9197-e4da54310c51",
                  "parentUUID": "70135cf4-dc9f-4af6-aa00-ef47b6deeb12",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2dfb2ba5-b711-4923-bfdb-72c6947d2f59",
                "9a987439-8119-4924-9197-e4da54310c51"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "adf48701-cb51-44d3-89e7-52cd95d33574",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.status(), null);\nevent.status(event_1.ICalEventStatus.CONFIRMED);\nassert_1.default.strictEqual(event.status(), 'CONFIRMED');\nevent.status(null);\nassert_1.default.strictEqual(event.status(), null);",
                  "err": {},
                  "uuid": "ab4cd4e2-7004-4d08-9a12-45bab4e091eb",
                  "parentUUID": "adf48701-cb51-44d3-89e7-52cd95d33574",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.status(null));\nassert_1.default.deepStrictEqual(e, e.status(event_1.ICalEventStatus.CONFIRMED));",
                  "err": {},
                  "uuid": "7f728d85-440e-45da-9f2d-5996ea426acb",
                  "parentUUID": "adf48701-cb51-44d3-89e7-52cd95d33574",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.status(event_1.ICalEventStatus.CONFIRMED);\ne.status(null);\nassert_1.default.strictEqual(e.status(), null);",
                  "err": {},
                  "uuid": "325f36ea-19ae-4c56-9647-fe9205ba1c09",
                  "parentUUID": "adf48701-cb51-44d3-89e7-52cd95d33574",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.status(event_1.ICalEventStatus.CONFIRMED);\nassert_1.default.strictEqual(e.status(), 'CONFIRMED');\nassert_1.default.strictEqual(e.status(), event_1.ICalEventStatus.CONFIRMED);",
                  "err": {},
                  "uuid": "e6bfa06d-9c9b-447e-9b3f-bd571faa1021",
                  "parentUUID": "adf48701-cb51-44d3-89e7-52cd95d33574",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status('COOKING');\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status(Infinity);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status(NaN);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status(-1);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);",
                  "err": {},
                  "uuid": "8bcb8d76-3ccf-44f5-923d-afea249c7ecf",
                  "parentUUID": "adf48701-cb51-44d3-89e7-52cd95d33574",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab4cd4e2-7004-4d08-9a12-45bab4e091eb",
                "7f728d85-440e-45da-9f2d-5996ea426acb",
                "325f36ea-19ae-4c56-9647-fe9205ba1c09",
                "e6bfa06d-9c9b-447e-9b3f-bd571faa1021",
                "8bcb8d76-3ccf-44f5-923d-afea249c7ecf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "456dffb1-f6ab-42d0-be1c-22dc8f62cb06",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.busystatus(), null);\nevent.busystatus(event_1.ICalEventBusyStatus.BUSY);\nassert_1.default.strictEqual(event.busystatus(), 'BUSY');\nevent.busystatus(null);\nassert_1.default.strictEqual(event.busystatus(), null);",
                  "err": {},
                  "uuid": "a717707f-9db6-42c3-9943-151816c45bc7",
                  "parentUUID": "456dffb1-f6ab-42d0-be1c-22dc8f62cb06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.busystatus(null));\nassert_1.default.deepStrictEqual(e, e.busystatus(event_1.ICalEventBusyStatus.BUSY));",
                  "err": {},
                  "uuid": "fa5eb8e4-df56-47b7-a553-1ebcbd138822",
                  "parentUUID": "456dffb1-f6ab-42d0-be1c-22dc8f62cb06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.busystatus(event_1.ICalEventBusyStatus.BUSY);\ne.busystatus(null);\nassert_1.default.strictEqual(e.busystatus(), null);",
                  "err": {},
                  "uuid": "e6094fa1-43f4-4c70-ac32-084f64b5a201",
                  "parentUUID": "456dffb1-f6ab-42d0-be1c-22dc8f62cb06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.busystatus(event_1.ICalEventBusyStatus.BUSY);\nassert_1.default.strictEqual(e.busystatus(), 'BUSY');",
                  "err": {},
                  "uuid": "1bc984b0-43c7-4ef1-b0aa-df69d3f6674c",
                  "parentUUID": "456dffb1-f6ab-42d0-be1c-22dc8f62cb06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus('COOKING');\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus(Infinity);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus(NaN);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus(-1);\n}, /FREE, TENTATIVE, BUSY, OOF/);",
                  "err": {},
                  "uuid": "302ba395-2158-46dc-9a60-33b6845832d2",
                  "parentUUID": "456dffb1-f6ab-42d0-be1c-22dc8f62cb06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a717707f-9db6-42c3-9943-151816c45bc7",
                "fa5eb8e4-df56-47b7-a553-1ebcbd138822",
                "e6094fa1-43f4-4c70-ac32-084f64b5a201",
                "1bc984b0-43c7-4ef1-b0aa-df69d3f6674c",
                "302ba395-2158-46dc-9a60-33b6845832d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53eb9671-88dc-4fef-a6dd-cb539aa83080",
              "title": "priority()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event priority() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.priority(), null);\ne.priority(5);\nassert_1.default.strictEqual(e.priority(), 5);",
                  "err": {},
                  "uuid": "d4da74c8-db97-4782-8899-763bc7eaeae2",
                  "parentUUID": "53eb9671-88dc-4fef-a6dd-cb539aa83080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event priority() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.priority(null));\nassert_1.default.deepStrictEqual(e, e.priority(5));",
                  "err": {},
                  "uuid": "1b1d0d2e-94c6-4c92-8d52-8d933f81e13c",
                  "parentUUID": "53eb9671-88dc-4fef-a6dd-cb539aa83080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event priority() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.priority(5);\nassert_1.default.strictEqual(event.priority(), 5);\nassert_1.default.ok(event.toString().includes('PRIORITY:5'));",
                  "err": {},
                  "uuid": "c41fac64-42ed-4486-a8d4-e8d8f5c9a373",
                  "parentUUID": "53eb9671-88dc-4fef-a6dd-cb539aa83080",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d4da74c8-db97-4782-8899-763bc7eaeae2",
                "1b1d0d2e-94c6-4c92-8d52-8d933f81e13c",
                "c41fac64-42ed-4486-a8d4-e8d8f5c9a373"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d400ca57-d016-4845-ab6a-e7deae5edc4d",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.url(), null);\ne.url('http://sebbo.net/');\nassert_1.default.strictEqual(e.url(), 'http://sebbo.net/');",
                  "err": {},
                  "uuid": "7eedd0c5-1657-4322-98b9-9b6fa3865dc9",
                  "parentUUID": "d400ca57-d016-4845-ab6a-e7deae5edc4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.url(null));\nassert_1.default.deepStrictEqual(e, e.url('http://sebbo.net/'));",
                  "err": {},
                  "uuid": "8a56ee21-af42-47d3-aec1-e92ca74a62a3",
                  "parentUUID": "d400ca57-d016-4845-ab6a-e7deae5edc4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.url('http://github.com/sebbo2002/ical-generator');\nassert_1.default.strictEqual(event.url(), 'http://github.com/sebbo2002/ical-generator');",
                  "err": {},
                  "uuid": "f195d543-4280-4959-9114-4c7c9ed0244b",
                  "parentUUID": "d400ca57-d016-4845-ab6a-e7deae5edc4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7eedd0c5-1657-4322-98b9-9b6fa3865dc9",
                "8a56ee21-af42-47d3-aec1-e92ca74a62a3",
                "f195d543-4280-4959-9114-4c7c9ed0244b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0932ef3d-8326-4667-87ef-7b22d7b1e7e6",
              "title": "createAttachment()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return this",
                  "fullTitle": "ical-generator Event createAttachment() should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event.createAttachment('https://files.sebbo.net/calendar/attachments/foo'), event);",
                  "err": {},
                  "uuid": "a55c3fb5-019f-473a-be9e-60b6952f12a6",
                  "parentUUID": "0932ef3d-8326-4667-87ef-7b22d7b1e7e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a55c3fb5-019f-473a-be9e-60b6952f12a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "932400d9-9ddf-41ee-b619-52b246b68991",
              "title": "attachments()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of strings…",
                  "fullTitle": "ical-generator Event attachments() getter should return an array of strings…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.attachments().length, 0);\nevent.createAttachment('https://files.sebbo.net/calendar/attachments/foo');\nassert_1.default.strictEqual(event.attachments().length, 1);\nassert_1.default.deepStrictEqual(typeof event.attachments()[0], 'string');",
                  "err": {},
                  "uuid": "40da8311-9083-40f9-84bd-9edd50d34348",
                  "parentUUID": "932400d9-9ddf-41ee-b619-52b246b68991",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add url and return this",
                  "fullTitle": "ical-generator Event attachments() setter should add url and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.attachments([\n    'https://files.sebbo.net/calendar/attachments/foo',\n    'https://files.sebbo.net/calendar/attachments/bar'\n]);\nassert_1.default.strictEqual(event.attachments().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "4594231e-a5ca-445e-9f27-5c4d82c3cddd",
                  "parentUUID": "932400d9-9ddf-41ee-b619-52b246b68991",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40da8311-9083-40f9-84bd-9edd50d34348",
                "4594231e-a5ca-445e-9f27-5c4d82c3cddd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1882c0ce-5523-4e37-a51a-413209a55ba9",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.created(new Date()));",
                  "err": {},
                  "uuid": "0e9c30a6-48b4-4024-9e37-027a57332b16",
                  "parentUUID": "1882c0ce-5523-4e37-a51a-413209a55ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created((0, moment_timezone_1.default)());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.created()));",
                  "err": {},
                  "uuid": "7e152c2e-3ab1-4500-a212-06229afbffe6",
                  "parentUUID": "1882c0ce-5523-4e37-a51a-413209a55ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created(new Date());\nassert_1.default.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "98c7c4de-cf56-47d2-8831-b05ce97a1edb",
                  "parentUUID": "1882c0ce-5523-4e37-a51a-413209a55ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created((0, moment_timezone_1.default)().toJSON());\nassert_1.default.strictEqual(typeof e.created(), 'string');",
                  "err": {},
                  "uuid": "b765180b-003f-410e-8cba-abee682fa816",
                  "parentUUID": "1882c0ce-5523-4e37-a51a-413209a55ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created(new Date());\nassert_1.default.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "0d4c93cc-da83-49aa-8b90-8ef75774b618",
                  "parentUUID": "1882c0ce-5523-4e37-a51a-413209a55ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new event_1.default({}, new calendar_1.default()).created(now);\nassert_1.default.deepStrictEqual((_a = e.created()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "1835d635-1150-48aa-b618-0147f366ee97",
                  "parentUUID": "1882c0ce-5523-4e37-a51a-413209a55ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.created('hallo'); // this will produce a \"Deprecation warning\", sorry 😇\n}, /`created`/);",
                  "err": {},
                  "uuid": "ee58f3b0-8a8b-4c47-8e7b-ff56ea144133",
                  "parentUUID": "1882c0ce-5523-4e37-a51a-413209a55ba9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e9c30a6-48b4-4024-9e37-027a57332b16",
                "7e152c2e-3ab1-4500-a212-06229afbffe6",
                "98c7c4de-cf56-47d2-8831-b05ce97a1edb",
                "b765180b-003f-410e-8cba-abee682fa816",
                "0d4c93cc-da83-49aa-8b90-8ef75774b618",
                "1835d635-1150-48aa-b618-0147f366ee97",
                "ee58f3b0-8a8b-4c47-8e7b-ff56ea144133"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5e770e0-a3a2-42b9-83b0-42331734a5d9",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.lastModified(new Date()));",
                  "err": {},
                  "uuid": "4db46d81-d6d3-4f6c-bf7b-5e6b6a603193",
                  "parentUUID": "f5e770e0-a3a2-42b9-83b0-42331734a5d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.lastModified((0, moment_timezone_1.default)());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.lastModified()));",
                  "err": {},
                  "uuid": "b5ef8243-d2ff-4daa-b056-1ba7a734e670",
                  "parentUUID": "f5e770e0-a3a2-42b9-83b0-42331734a5d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.lastModified(new Date());\nassert_1.default.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "7936437e-292a-4ceb-9b9b-77fb178a76bb",
                  "parentUUID": "f5e770e0-a3a2-42b9-83b0-42331734a5d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nconst date = (0, moment_timezone_1.default)().toJSON();\ne.lastModified(date);\nassert_1.default.strictEqual(e.lastModified(), date);",
                  "err": {},
                  "uuid": "67aa9905-eb1d-4dcb-8372-97f7d7462273",
                  "parentUUID": "f5e770e0-a3a2-42b9-83b0-42331734a5d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.lastModified(new Date());\nassert_1.default.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "211bebd1-d0bf-42c8-bb92-ba3e4ee43544",
                  "parentUUID": "f5e770e0-a3a2-42b9-83b0-42331734a5d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new event_1.default({}, new calendar_1.default()).lastModified(now);\nassert_1.default.deepStrictEqual((_a = e.lastModified()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "36ec4b72-8f75-4a11-b1fa-b12ddf83e4dd",
                  "parentUUID": "f5e770e0-a3a2-42b9-83b0-42331734a5d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.lastModified('hallo');\n}, /`lastModified`/);",
                  "err": {},
                  "uuid": "0efea5f3-622f-4e3f-be41-1e65ceabc043",
                  "parentUUID": "f5e770e0-a3a2-42b9-83b0-42331734a5d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4db46d81-d6d3-4f6c-bf7b-5e6b6a603193",
                "b5ef8243-d2ff-4daa-b056-1ba7a734e670",
                "7936437e-292a-4ceb-9b9b-77fb178a76bb",
                "67aa9905-eb1d-4dcb-8372-97f7d7462273",
                "211bebd1-d0bf-42c8-bb92-ba3e4ee43544",
                "36ec4b72-8f75-4a11-b1fa-b12ddf83e4dd",
                "0efea5f3-622f-4e3f-be41-1e65ceabc043"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb0342a7-878e-48c0-bd4c-05e091689c2a",
              "title": "class()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event class() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.class(), null);\nevent.class(event_1.ICalEventClass.PRIVATE);\nassert_1.default.strictEqual(event.class(), 'PRIVATE');\nevent.class(null);\nassert_1.default.strictEqual(event.class(), null);",
                  "err": {},
                  "uuid": "f28f76ea-b445-41c2-a3d8-39f5bd796b63",
                  "parentUUID": "fb0342a7-878e-48c0-bd4c-05e091689c2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event class() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.class(null));\nassert_1.default.deepStrictEqual(e, e.class(event_1.ICalEventClass.PRIVATE));",
                  "err": {},
                  "uuid": "ebd17587-fb19-487c-932a-c18a21f5127b",
                  "parentUUID": "fb0342a7-878e-48c0-bd4c-05e091689c2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event class() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.class(event_1.ICalEventClass.PRIVATE);\ne.class(null);\nassert_1.default.strictEqual(e.class(), null);",
                  "err": {},
                  "uuid": "366b460c-3459-4336-8316-efc853e4a644",
                  "parentUUID": "fb0342a7-878e-48c0-bd4c-05e091689c2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event class() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.class(event_1.ICalEventClass.PRIVATE);\nassert_1.default.strictEqual(e.class(), 'PRIVATE');\nassert_1.default.strictEqual(e.class(), event_1.ICalEventClass.PRIVATE);",
                  "err": {},
                  "uuid": "321be8bd-6d38-47c7-aeac-59ecfa26b269",
                  "parentUUID": "fb0342a7-878e-48c0-bd4c-05e091689c2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event class() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.class('COOKING');\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.class(Infinity);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.class(NaN);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.class(-1);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);",
                  "err": {},
                  "uuid": "ebb7493e-8b92-471a-8f93-81895987d1c8",
                  "parentUUID": "fb0342a7-878e-48c0-bd4c-05e091689c2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f28f76ea-b445-41c2-a3d8-39f5bd796b63",
                "ebd17587-fb19-487c-932a-c18a21f5127b",
                "366b460c-3459-4336-8316-efc853e4a644",
                "321be8bd-6d38-47c7-aeac-59ecfa26b269",
                "ebb7493e-8b92-471a-8f93-81895987d1c8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb73b1b2-4c2d-4cda-a1de-d9e5fd67ee10",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "9da96514-994c-4d9a-921f-5f99dc365987",
                  "parentUUID": "bb73b1b2-4c2d-4cda-a1de-d9e5fd67ee10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9da96514-994c-4d9a-921f-5f99dc365987"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc6e0815-c3ef-4f62-b101-46ea53cf11c1",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = (0, moment_timezone_1.default)().add(1, 'month');\nconst event = new event_1.default({}, new calendar_1.default()).summary('foo').start(date);\nassert_1.default.strictEqual(event.toJSON().summary, 'foo', 'summary is okay');\nassert_1.default.deepStrictEqual(event.toJSON().start, date.toJSON(), 'start is okay');\nassert_1.default.strictEqual(typeof event.toJSON().start, 'string', 'start is string');",
                  "err": {},
                  "uuid": "f37092a7-831e-4993-83b3-8869cdba298a",
                  "parentUUID": "dc6e0815-c3ef-4f62-b101-46ea53cf11c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should stringify RRule objects",
                  "fullTitle": "ical-generator Event toJSON() should stringify RRule objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nconst rule = new rrule_1.RRule({\n    freq: rrule_1.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule_1.RRule.MO, rrule_1.RRule.FR],\n    dtstart: date,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\nconst event = new event_1.default({}, new calendar_1.default()).summary('foo').start(date).repeating(rule);\nconst json = event.toJSON();\nconst before = event.toString();\nassert_1.default.ok(typeof json.repeating === 'string');\nconst event2 = new event_1.default(event.toJSON(), new calendar_1.default());\nconst after = event2.toString();\nassert_1.default.strictEqual(after, before);",
                  "err": {},
                  "uuid": "0f708939-8104-4a09-8510-6e49324b4d8e",
                  "parentUUID": "dc6e0815-c3ef-4f62-b101-46ea53cf11c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Event toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new event_1.default({}, new calendar_1.default());\nnew event_1.default(a.toJSON(), new calendar_1.default());",
                  "err": {},
                  "uuid": "6420cee4-9571-4f62-ba15-fdb70d09048e",
                  "parentUUID": "dc6e0815-c3ef-4f62-b101-46ea53cf11c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f37092a7-831e-4993-83b3-8869cdba298a",
                "0f708939-8104-4a09-8510-6e49324b4d8e",
                "6420cee4-9571-4f62-ba15-fdb70d09048e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73dc7444-eafd-4076-8ef6-8ef1c5644160",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.transparency(), null);\nevent.transparency(event_1.ICalEventTransparency.OPAQUE);\nassert_1.default.strictEqual(event.transparency(), 'OPAQUE');\nevent.transparency(null);\nassert_1.default.strictEqual(event.transparency(), null);",
                  "err": {},
                  "uuid": "e17dda13-f6e4-4daf-a6e6-07198a70ab91",
                  "parentUUID": "73dc7444-eafd-4076-8ef6-8ef1c5644160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.transparency(null));\nassert_1.default.deepStrictEqual(e, e.transparency(event_1.ICalEventTransparency.TRANSPARENT));",
                  "err": {},
                  "uuid": "befb7751-4aec-46a1-ab3b-068f3fd9803e",
                  "parentUUID": "73dc7444-eafd-4076-8ef6-8ef1c5644160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.transparency(event_1.ICalEventTransparency.OPAQUE);\ne.transparency(null);\nassert_1.default.strictEqual(e.transparency(), null);",
                  "err": {},
                  "uuid": "78b0c23d-fdbc-4176-b746-18a8df4fb23c",
                  "parentUUID": "73dc7444-eafd-4076-8ef6-8ef1c5644160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.transparency(event_1.ICalEventTransparency.OPAQUE);\nassert_1.default.strictEqual(e.transparency(), 'OPAQUE');",
                  "err": {},
                  "uuid": "a6a3e00b-d9a3-4a39-805f-00ca5c7b5d37",
                  "parentUUID": "73dc7444-eafd-4076-8ef6-8ef1c5644160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.transparency('COOKING');\n}, /TRANSPARENT, OPAQUE/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.transparency(Infinity);\n}, /TRANSPARENT, OPAQUE/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.transparency(-1);\n}, /TRANSPARENT, OPAQUE/);",
                  "err": {},
                  "uuid": "e4c6bb13-b4a2-4728-a6b9-7bae6d50f32b",
                  "parentUUID": "73dc7444-eafd-4076-8ef6-8ef1c5644160",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e17dda13-f6e4-4daf-a6e6-07198a70ab91",
                "befb7751-4aec-46a1-ab3b-068f3fd9803e",
                "78b0c23d-fdbc-4176-b746-18a8df4fb23c",
                "a6a3e00b-d9a3-4a39-805f-00ca5c7b5d37",
                "e4c6bb13-b4a2-4728-a6b9-7bae6d50f32b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ca63da9-9168-44f7-b1f3-6de62d9d938c",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without start",
                  "fullTitle": "ical-generator Event toString() shoult throw an error without start",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    summary: 'Example Event'\n}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.toString();\n}, /`start`/);",
                  "err": {},
                  "uuid": "a007ecc3-dbdd-4608-8c57-a8c7beebfc8c",
                  "parentUUID": "7ca63da9-9168-44f7-b1f3-6de62d9d938c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event toString() should make use of escaping",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Hel\\\\\\\\lo\\nW;orl,d'\n}, new calendar_1.default());\nassert_1.default.ok(e.toString().indexOf('Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d') > -1);",
                  "err": {},
                  "uuid": "452b2bb3-248b-49c1-8ebb-faf153276d23",
                  "parentUUID": "7ca63da9-9168-44f7-b1f3-6de62d9d938c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event toString() should render correct UIDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nconst event = new event_1.default({\n    id: 42,\n    start: (0, moment_timezone_1.default)(),\n    summary: ':)'\n}, cal);\nassert_1.default.ok(event.toString().indexOf('UID:42\\r') > -1);",
                  "err": {},
                  "uuid": "773b40ac-7a64-4300-842f-f9817ac004d0",
                  "parentUUID": "7ca63da9-9168-44f7-b1f3-6de62d9d938c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event toString() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nlet event = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    end: (0, moment_timezone_1.default)(),\n    repeating: {\n        freq: types_1.ICalEventRepeatingFreq.WEEKLY\n    }\n}, cal);\nassert_1.default.ok(!event.toString().includes('WKST'), 'without WKST');\nevent = new event_1.default({\n    start: (0, moment_timezone_1.default)(),\n    end: (0, moment_timezone_1.default)(),\n    repeating: {\n        freq: types_1.ICalEventRepeatingFreq.WEEKLY,\n        startOfWeek: types_1.ICalWeekday.SU\n    }\n}, cal);\nassert_1.default.ok(event.toString().includes('WKST'), 'with WKST');",
                  "err": {},
                  "uuid": "52643327-98ca-401e-b225-0fa80a2493e4",
                  "parentUUID": "7ca63da9-9168-44f7-b1f3-6de62d9d938c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a007ecc3-dbdd-4608-8c57-a8c7beebfc8c",
                "452b2bb3-248b-49c1-8ebb-faf153276d23",
                "773b40ac-7a64-4300-842f-f9817ac004d0",
                "52643327-98ca-401e-b225-0fa80a2493e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1d73fc3a-7fc1-4da0-b2cb-4d086420a4f1",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8ca561eb-1594-44c1-92d1-dcc899e8c869",
              "title": "default",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be a function",
                  "fullTitle": "ical-generator Index default should be a function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(typeof src_1.default, 'function');",
                  "err": {},
                  "uuid": "02ccfd1c-502a-46e8-b38e-e2506853456f",
                  "parentUUID": "8ca561eb-1594-44c1-92d1-dcc899e8c869",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalCalendar",
                  "fullTitle": "ical-generator Index default should return a ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok((0, src_1.default)() instanceof src_1.ICalCalendar);",
                  "err": {},
                  "uuid": "a5f9fe7f-f973-4561-afb0-17128b780f33",
                  "parentUUID": "8ca561eb-1594-44c1-92d1-dcc899e8c869",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02ccfd1c-502a-46e8-b38e-e2506853456f",
                "a5f9fe7f-f973-4561-afb0-17128b780f33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eb2ff844-3985-466d-99a1-7e781e2f800b",
              "title": "Alarm",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAlarm",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarm",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAlarm);",
                  "err": {},
                  "uuid": "860fd234-50ca-43a8-9c71-b88133de800e",
                  "parentUUID": "eb2ff844-3985-466d-99a1-7e781e2f800b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAlarmType",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarmType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAlarmType);",
                  "err": {},
                  "uuid": "f91af0cc-1264-4e35-864d-1281d22c8143",
                  "parentUUID": "eb2ff844-3985-466d-99a1-7e781e2f800b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "860fd234-50ca-43a8-9c71-b88133de800e",
                "f91af0cc-1264-4e35-864d-1281d22c8143"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca1e1594-866a-41bd-bcdc-ca00b1dd0c5c",
              "title": "Attendee",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAttendee",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendee",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAttendee);",
                  "err": {},
                  "uuid": "55112df1-0227-4ddd-ab14-dc3dbaad0281",
                  "parentUUID": "ca1e1594-866a-41bd-bcdc-ca00b1dd0c5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeType",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAttendeeType);",
                  "err": {},
                  "uuid": "ee8634ea-7e3a-4fb5-8b3e-43e99bd5480d",
                  "parentUUID": "ca1e1594-866a-41bd-bcdc-ca00b1dd0c5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeRole",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeRole",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAttendeeRole);",
                  "err": {},
                  "uuid": "486c2639-555c-4f93-9d83-2b128f78d76f",
                  "parentUUID": "ca1e1594-866a-41bd-bcdc-ca00b1dd0c5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeStatus",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAttendeeStatus);",
                  "err": {},
                  "uuid": "d545aea0-f93c-4684-a627-fe42da789e7b",
                  "parentUUID": "ca1e1594-866a-41bd-bcdc-ca00b1dd0c5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55112df1-0227-4ddd-ab14-dc3dbaad0281",
                "ee8634ea-7e3a-4fb5-8b3e-43e99bd5480d",
                "486c2639-555c-4f93-9d83-2b128f78d76f",
                "d545aea0-f93c-4684-a627-fe42da789e7b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8908e01e-ae17-4854-a4c5-8c7237ba76a9",
              "title": "Calendar",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCalendar",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalCalendar);",
                  "err": {},
                  "uuid": "76ce221f-ecca-44f5-bdf8-48fd3c6f41fa",
                  "parentUUID": "8908e01e-ae17-4854-a4c5-8c7237ba76a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalCalendarMethod",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendarMethod",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalCalendarMethod);",
                  "err": {},
                  "uuid": "8928f52a-d8ec-43b4-bd9c-d5633993c1cb",
                  "parentUUID": "8908e01e-ae17-4854-a4c5-8c7237ba76a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76ce221f-ecca-44f5-bdf8-48fd3c6f41fa",
                "8928f52a-d8ec-43b4-bd9c-d5633993c1cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d38e7164-d693-4cbe-a8d0-2fc23695548e",
              "title": "Category",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCategory",
                  "fullTitle": "ical-generator Index Category should export ICalCategory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalCategory);",
                  "err": {},
                  "uuid": "90742d98-f700-4c07-84b8-2dcd44339a7d",
                  "parentUUID": "d38e7164-d693-4cbe-a8d0-2fc23695548e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90742d98-f700-4c07-84b8-2dcd44339a7d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0ab318f0-deaf-475d-9064-d1fcf21ba467",
              "title": "Event",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEvent",
                  "fullTitle": "ical-generator Index Event should export ICalEvent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEvent);",
                  "err": {},
                  "uuid": "365dd1df-af90-4fab-ba9e-863954ead240",
                  "parentUUID": "0ab318f0-deaf-475d-9064-d1fcf21ba467",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEventStatus);",
                  "err": {},
                  "uuid": "ff7295ed-deb5-42bf-b727-1c801e6bc256",
                  "parentUUID": "0ab318f0-deaf-475d-9064-d1fcf21ba467",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventBusyStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventBusyStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEventBusyStatus);",
                  "err": {},
                  "uuid": "9d86d659-c2ca-40de-9f68-ae27a3e94a1e",
                  "parentUUID": "0ab318f0-deaf-475d-9064-d1fcf21ba467",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventTransparency",
                  "fullTitle": "ical-generator Index Event should export ICalEventTransparency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEventTransparency);",
                  "err": {},
                  "uuid": "e94f0345-32a9-47ac-8ad2-d2721621efd8",
                  "parentUUID": "0ab318f0-deaf-475d-9064-d1fcf21ba467",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "365dd1df-af90-4fab-ba9e-863954ead240",
                "ff7295ed-deb5-42bf-b727-1c801e6bc256",
                "9d86d659-c2ca-40de-9f68-ae27a3e94a1e",
                "e94f0345-32a9-47ac-8ad2-d2721621efd8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7f34c8cc-edc1-48dc-aedb-ba171406cef2",
              "title": "Type",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEventRepeatingFreq",
                  "fullTitle": "ical-generator Index Type should export ICalEventRepeatingFreq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEventRepeatingFreq);",
                  "err": {},
                  "uuid": "c72e8ac2-69d6-43e6-884d-92f417c9dd2f",
                  "parentUUID": "7f34c8cc-edc1-48dc-aedb-ba171406cef2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalWeekday",
                  "fullTitle": "ical-generator Index Type should export ICalWeekday",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalWeekday);",
                  "err": {},
                  "uuid": "0ac051e9-2f3b-4548-a091-f3e452a1aac3",
                  "parentUUID": "7f34c8cc-edc1-48dc-aedb-ba171406cef2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c72e8ac2-69d6-43e6-884d-92f417c9dd2f",
                "0ac051e9-2f3b-4548-a091-f3e452a1aac3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "878afb78-24bb-43ce-98f5-f54b2ae808be",
              "title": "Tools",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export formatDate",
                  "fullTitle": "ical-generator Index Tools should export formatDate",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(typeof src_1.formatDate === 'function');",
                  "err": {},
                  "uuid": "7f7357da-af16-428c-9cf8-2a370fe1750e",
                  "parentUUID": "878afb78-24bb-43ce-98f5-f54b2ae808be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export formatDateTZ",
                  "fullTitle": "ical-generator Index Tools should export formatDateTZ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(typeof src_1.formatDateTZ === 'function');",
                  "err": {},
                  "uuid": "813a930f-9af9-49d4-84f6-7edb47d7cf77",
                  "parentUUID": "878afb78-24bb-43ce-98f5-f54b2ae808be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export escape",
                  "fullTitle": "ical-generator Index Tools should export escape",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(typeof src_1.escape === 'function');",
                  "err": {},
                  "uuid": "d7209231-e080-4607-bf07-a76d987a3655",
                  "parentUUID": "878afb78-24bb-43ce-98f5-f54b2ae808be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export foldLines",
                  "fullTitle": "ical-generator Index Tools should export foldLines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(typeof src_1.foldLines === 'function');",
                  "err": {},
                  "uuid": "3940f362-baeb-4644-b1fb-d3b5b6b826e8",
                  "parentUUID": "878afb78-24bb-43ce-98f5-f54b2ae808be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f7357da-af16-428c-9cf8-2a370fe1750e",
                "813a930f-9af9-49d4-84f6-7edb47d7cf77",
                "d7209231-e080-4607-bf07-a76d987a3655",
                "3940f362-baeb-4644-b1fb-d3b5b6b826e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1d970bf4-0eb4-4f8d-bfa3-40f03f292ae4",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "44315986-c2d9-4ed0-a447-8d7467bf2336",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: (0, moment_timezone_1.default)('2016-04-30T22:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "2717250e-9fef-4f27-bc12-3e47d4cd00be",
                  "parentUUID": "44315986-c2d9-4ed0-a447-8d7467bf2336",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Brazil/East',\n    events: [{\n            start: (0, moment_timezone_1.default)('Sun May 01 2016 00:00:00 GMT-3'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "ccc27ee7-888d-4b57-97f3-bf72ab670258",
                  "parentUUID": "44315986-c2d9-4ed0-a447-8d7467bf2336",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2717250e-9fef-4f27-bc12-3e47d4cd00be",
                "ccc27ee7-888d-4b57-97f3-bf72ab670258"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 34,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5fc94361-c922-4f8e-b1e5-e368ea26c89d",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: (0, moment_timezone_1.default)('Sun May 01 2016 00:00:00 GMT+0200 (CEST)'),\n            end: (0, moment_timezone_1.default)('Sun May 01 2016 02:00:00 GMT+0200 (CEST)'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [types_1.ICalWeekday.SU],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "9e635fd7-78fc-4e1b-9ebd-1d619a7edf60",
                  "parentUUID": "5fc94361-c922-4f8e-b1e5-e368ea26c89d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking the first elemnt of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking the first elemnt of the byDay array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: (0, moment_timezone_1.default)('Sun May 01 2016 00:00:00 GMT+0200 (CEST)'),\n            end: (0, moment_timezone_1.default)('Sun May 01 2016 02:00:00 GMT+0200 (CEST)'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [types_1.ICalWeekday.MO, types_1.ICalWeekday.FR],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "2a924461-24ec-495d-9dad-19d4d6abebf2",
                  "parentUUID": "5fc94361-c922-4f8e-b1e5-e368ea26c89d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e635fd7-78fc-4e1b-9ebd-1d619a7edf60",
                "2a924461-24ec-495d-9dad-19d4d6abebf2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f78fe307-37a3-4001-9b86-f396b0dd4bb5",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: (0, moment_timezone_1.default)(1553219772000),\n            end: (0, moment_timezone_1.default)(1553219772000),\n            recurrenceId: (0, moment_timezone_1.default)(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "0f57dd98-f6d3-41c6-bd45-789646af84bb",
                  "parentUUID": "f78fe307-37a3-4001-9b86-f396b0dd4bb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: (0, moment_timezone_1.default)(1553219772000),\n            end: (0, moment_timezone_1.default)(1553219772000),\n            recurrenceId: (0, moment_timezone_1.default)(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "ee3f3a92-43be-40eb-a2de-05ba74e51b53",
                  "parentUUID": "f78fe307-37a3-4001-9b86-f396b0dd4bb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: (0, moment_timezone_1.default)(1553219772000),\n            end: (0, moment_timezone_1.default)(1553219772000),\n            recurrenceId: (0, moment_timezone_1.default)(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "003e9d19-56ac-4f2b-8784-26a6a8ecae48",
                  "parentUUID": "f78fe307-37a3-4001-9b86-f396b0dd4bb5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f57dd98-f6d3-41c6-bd45-789646af84bb",
                "ee3f3a92-43be-40eb-a2de-05ba74e51b53",
                "003e9d19-56ac-4f2b-8784-26a6a8ecae48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37e2bcd8-9a74-4648-859a-a1e73295c702",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: (0, moment_timezone_1.default)('2020-08-13T00:00:00+01:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: (0, moment_timezone_1.default)('2020-12-13T00:00:00+01:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('EXDATE;TZID=Europe/Berlin:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "625e29eb-01f4-42df-becb-11f9eccf684f",
                  "parentUUID": "37e2bcd8-9a74-4648-859a-a1e73295c702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'America/New_York',\n    events: [{\n            start: (0, moment_timezone_1.default)('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: (0, moment_timezone_1.default)('2020-12-13T00:00:00-05:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('EXDATE;TZID=America/New_York:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "1e3af464-8767-4c23-813b-1c929cf4db69",
                  "parentUUID": "37e2bcd8-9a74-4648-859a-a1e73295c702",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "625e29eb-01f4-42df-becb-11f9eccf684f",
                "1e3af464-8767-4c23-813b-1c929cf4db69"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f38d80e5-9f06-4667-af8d-1e4a1a89edd1",
              "title": "Issue #236",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should look like in the example",
                  "fullTitle": "Issues Issue #236 should look like in the example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            location: {\n                title: 'Los Angeles, California, United States',\n                geo: {\n                    lon: -118.24368,\n                    lat: 34.05223,\n                },\n                radius: 400\n            }\n        }]\n});\nassert_1.default.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:Example Event',\n    'LOCATION:Los Angeles\\\\, California\\\\, United States',\n    'X-APPLE-STRUCTURED-LOCATION;VALUE=URI;X-APPLE-RADIUS=400;X-TITLE=Los Angel',\n    ' es\\\\, California\\\\, United States:geo:34.05223,-118.24368',\n    'GEO:34.05223;-118.24368',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "54eaa3e4-56e9-47d7-8180-0a3f9e70ced9",
                  "parentUUID": "f38d80e5-9f06-4667-af8d-1e4a1a89edd1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54eaa3e4-56e9-47d7-8180-0a3f9e70ced9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "335924c7-f3b8-45ed-ac94-13dc0f216dbe",
              "title": "Issue #377",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not escape quotes in summary",
                  "fullTitle": "Issues Issue #377 should not escape quotes in summary",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = (0, src_1.default)({\n    events: [\n        {\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'My \"quoted\" string'\n        }\n    ]\n});\nassert_1.default.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:My \"quoted\" string',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "617e1ff0-d764-4eb9-a398-77e2834ae20c",
                  "parentUUID": "335924c7-f3b8-45ed-ac94-13dc0f216dbe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "617e1ff0-d764-4eb9-a398-77e2834ae20c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f72dd9cc-4b4f-46b6-8420-89386b8f14f2",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "30f0abd1-d517-41fe-a51e-3d81d7af56c3",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "f55365b2-edfa-49ff-9e02-2074b58f97d0",
                  "title": "Date / String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, '2018-07-05T18:24:00.052Z', false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "9eccb857-ad04-4832-a308-d0964ce1f950",
                      "parentUUID": "f55365b2-edfa-49ff-9e02-2074b58f97d0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, '2018-07-05T18:24:00.052Z', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "d8994948-c846-4432-a194-880a1da2ef54",
                      "parentUUID": "f55365b2-edfa-49ff-9e02-2074b58f97d0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, '2018-07-05T18:24:00.052Z', true, false), '20180705');",
                      "err": {},
                      "uuid": "f8e81d2e-579a-4b25-8c48-c91ca92e2968",
                      "parentUUID": "f55365b2-edfa-49ff-9e02-2074b58f97d0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, '2018-07-05T18:24:00.052Z', true, true), '20180705');",
                      "err": {},
                      "uuid": "c61565b6-a141-420a-b3b9-c6b5c58bcce1",
                      "parentUUID": "f55365b2-edfa-49ff-9e02-2074b58f97d0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Europe/Berlin', '2018-07-05T18:24:00.052', false, false), '20180705T182400');",
                      "err": {},
                      "uuid": "73ed407f-16ab-456f-962c-2ddd015e6541",
                      "parentUUID": "f55365b2-edfa-49ff-9e02-2074b58f97d0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Europe/Berlin', '2018-07-05T18:24:00.052', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "e1920055-5e8f-4a27-b71e-4cbc6ad81e34",
                      "parentUUID": "f55365b2-edfa-49ff-9e02-2074b58f97d0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Europe/Berlin', '2018-07-05T18:24:00.052', true, false), '20180705');",
                      "err": {},
                      "uuid": "d9242e5c-c9e8-4cba-a1f3-065dfd065600",
                      "parentUUID": "f55365b2-edfa-49ff-9e02-2074b58f97d0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Europe/Berlin', '2018-07-05T18:24:00.052', true, true), '20180705');",
                      "err": {},
                      "uuid": "4424bf44-5e56-4260-9812-7ed5cfe1b00c",
                      "parentUUID": "f55365b2-edfa-49ff-9e02-2074b58f97d0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9eccb857-ad04-4832-a308-d0964ce1f950",
                    "d8994948-c846-4432-a194-880a1da2ef54",
                    "f8e81d2e-579a-4b25-8c48-c91ca92e2968",
                    "c61565b6-a141-420a-b3b9-c6b5c58bcce1",
                    "73ed407f-16ab-456f-962c-2ddd015e6541",
                    "e1920055-5e8f-4a27-b71e-4cbc6ad81e34",
                    "d9242e5c-c9e8-4cba-a1f3-065dfd065600",
                    "4424bf44-5e56-4260-9812-7ed5cfe1b00c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "cbcd7861-2683-48eb-8be5-c33fbcc8c4d6",
                  "title": "moment.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, (0, moment_timezone_1.default)('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "da3457c3-f00d-40ba-a9d5-5f09d042c394",
                      "parentUUID": "cbcd7861-2683-48eb-8be5-c33fbcc8c4d6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Canada/Saskatchewan', (0, moment_timezone_1.default)('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "06fa374a-e20d-48a1-af1d-a87fac55b9e5",
                      "parentUUID": "cbcd7861-2683-48eb-8be5-c33fbcc8c4d6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, (0, moment_timezone_1.default)('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "eb81312c-9db8-4663-b56a-e5dcf1dd3bf2",
                      "parentUUID": "cbcd7861-2683-48eb-8be5-c33fbcc8c4d6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "da3457c3-f00d-40ba-a9d5-5f09d042c394",
                    "06fa374a-e20d-48a1-af1d-a87fac55b9e5",
                    "eb81312c-9db8-4663-b56a-e5dcf1dd3bf2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "e388a832-d0f2-482d-ae53-cdeafbd0ad56",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work without setting a timezone",
                      "timedOut": false,
                      "duration": 17,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, luxon_1.DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "0f4beb31-d146-43bc-9e9a-6696080e4763",
                      "parentUUID": "e388a832-d0f2-482d-ae53-cdeafbd0ad56",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Luxon should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Canada/Saskatchewan', luxon_1.DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "4c34fde6-7420-42c2-b7d6-c3108123f242",
                      "parentUUID": "e388a832-d0f2-482d-ae53-cdeafbd0ad56",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, luxon_1.DateTime.fromISO('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "2c891c92-bd41-4a91-8014-c9b5f711a9b9",
                      "parentUUID": "e388a832-d0f2-482d-ae53-cdeafbd0ad56",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, luxon_1.DateTime.fromISO('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "6cfa5ec0-b7de-4317-b15f-663826f1fcb8",
                      "parentUUID": "e388a832-d0f2-482d-ae53-cdeafbd0ad56",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0f4beb31-d146-43bc-9e9a-6696080e4763",
                    "4c34fde6-7420-42c2-b7d6-c3108123f242",
                    "2c891c92-bd41-4a91-8014-c9b5f711a9b9",
                    "6cfa5ec0-b7de-4317-b15f-663826f1fcb8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 19,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "9f940163-c07f-4230-94ab-771d9e0c3e2c",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Day.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, (0, dayjs_1.default)('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "76db18d9-7770-4bb5-bbae-95f1c0f0f76f",
                      "parentUUID": "9f940163-c07f-4230-94ab-771d9e0c3e2c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Day.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)('Canada/Saskatchewan', (0, dayjs_1.default)('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "f3b9c702-7357-45e7-bb12-6a6647ef7dd2",
                      "parentUUID": "9f940163-c07f-4230-94ab-771d9e0c3e2c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, (0, dayjs_1.default)('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "a99b50b4-2bb5-4863-92b8-dd593c40f2f2",
                      "parentUUID": "9f940163-c07f-4230-94ab-771d9e0c3e2c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual((0, tools_1.formatDate)(null, (0, dayjs_1.default)('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "ed3801ac-3729-4bf2-902a-17fd0f4397c6",
                      "parentUUID": "9f940163-c07f-4230-94ab-771d9e0c3e2c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "76db18d9-7770-4bb5-bbae-95f1c0f0f76f",
                    "f3b9c702-7357-45e7-bb12-6a6647ef7dd2",
                    "a99b50b4-2bb5-4863-92b8-dd593c40f2f2",
                    "ed3801ac-3729-4bf2-902a-17fd0f4397c6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8a9fb8cd-2a00-4cf6-8d9e-bac68f9a2ea4",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed = { timezone: 'Europe/Berlin' };\nassert_1.default.strictEqual((0, tools_1.formatDateTZ)('Europe/Berlin', 'DSTART', (0, moment_timezone_1.default)('2018-07-02T15:48:05.000Z'), ed), 'DSTART;TZID=Europe/Berlin:20180702T174805');",
                  "err": {},
                  "uuid": "aa0449d5-ec15-449d-9360-aebc5d0506a4",
                  "parentUUID": "8a9fb8cd-2a00-4cf6-8d9e-bac68f9a2ea4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.formatDateTZ)(null, 'DSTART', '2018-07-02T15:48:05.000Z', {}), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "5fbcca1c-508f-4799-b39e-b80b4c8cb0b1",
                  "parentUUID": "8a9fb8cd-2a00-4cf6-8d9e-bac68f9a2ea4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without eventdata parameter",
                  "fullTitle": "ICalTools formatDateTZ() should work without eventdata parameter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.formatDateTZ)(null, 'DSTART', '2018-07-02T15:48:05.000Z'), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "e0fcf445-b21c-46b6-8bd2-3de75a3817da",
                  "parentUUID": "8a9fb8cd-2a00-4cf6-8d9e-bac68f9a2ea4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa0449d5-ec15-449d-9360-aebc5d0506a4",
                "5fbcca1c-508f-4799-b39e-b80b4c8cb0b1",
                "e0fcf445-b21c-46b6-8bd2-3de75a3817da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6ed8229-5eaa-4196-b80f-8ce3498baf26",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem \\\\ipsum', false), 'Lorem \\\\\\\\ipsum');",
                  "err": {},
                  "uuid": "e07bc3ed-7708-40dc-968f-4ae23b77adf4",
                  "parentUUID": "f6ed8229-5eaa-4196-b80f-8ce3498baf26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem ;ipsum', false), 'Lorem \\\\;ipsum');",
                  "err": {},
                  "uuid": "81e06e2f-275d-4d77-bfb0-9a3f0b48bf75",
                  "parentUUID": "f6ed8229-5eaa-4196-b80f-8ce3498baf26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem, ipsum', false), 'Lorem\\\\, ipsum');",
                  "err": {},
                  "uuid": "366aaddc-9270-4e8f-80e9-e50fb70d046c",
                  "parentUUID": "f6ed8229-5eaa-4196-b80f-8ce3498baf26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem \\ripsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "6e1c4a4b-77e6-439d-9240-fd0720559361",
                  "parentUUID": "f6ed8229-5eaa-4196-b80f-8ce3498baf26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem \\nipsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "b5dd02c1-1067-4b3f-8537-577dc4285130",
                  "parentUUID": "f6ed8229-5eaa-4196-b80f-8ce3498baf26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem \\r\\nipsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "9b913f67-6ac6-4701-aa0d-5f22ba9865a8",
                  "parentUUID": "f6ed8229-5eaa-4196-b80f-8ce3498baf26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \" in text when inQuotes = true",
                  "fullTitle": "ICalTools escape() should escape \" in text when inQuotes = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem \"ipsum', true), 'Lorem \\\\\"ipsum');",
                  "err": {},
                  "uuid": "a0c9bda1-3630-4713-9996-9ed0c2ced2cd",
                  "parentUUID": "f6ed8229-5eaa-4196-b80f-8ce3498baf26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not escape \" in text when inQuotes = false",
                  "fullTitle": "ICalTools escape() should not escape \" in text when inQuotes = false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.escape)('Lorem \"ipsum', false), 'Lorem \"ipsum');",
                  "err": {},
                  "uuid": "adb5ae87-a86a-4404-8c31-751d1cd9d240",
                  "parentUUID": "f6ed8229-5eaa-4196-b80f-8ce3498baf26",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e07bc3ed-7708-40dc-968f-4ae23b77adf4",
                "81e06e2f-275d-4d77-bfb0-9a3f0b48bf75",
                "366aaddc-9270-4e8f-80e9-e50fb70d046c",
                "6e1c4a4b-77e6-439d-9240-fd0720559361",
                "b5dd02c1-1067-4b3f-8537-577dc4285130",
                "9b913f67-6ac6-4701-aa0d-5f22ba9865a8",
                "a0c9bda1-3630-4713-9996-9ed0c2ced2cd",
                "adb5ae87-a86a-4404-8c31-751d1cd9d240"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d234c510-f62c-49ef-a8c9-bda6eaebe16d",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.foldLines)('12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981'), '12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "93b97a42-210e-4ca8-930f-901951da9e32",
                  "parentUUID": "d234c510-f62c-49ef-a8c9-bda6eaebe16d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual((0, tools_1.foldLines)('👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981'), '👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "4dcb05fd-5f0a-4bfd-9e38-81b07957b950",
                  "parentUUID": "d234c510-f62c-49ef-a8c9-bda6eaebe16d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93b97a42-210e-4ca8-930f-901951da9e32",
                "4dcb05fd-5f0a-4bfd-9e38-81b07957b950"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8248edcd-c852-4129-b027-6eed03de0c4e",
              "title": "checkDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "b17f1afc-b6da-4578-9bb7-6836ed00a017",
                  "title": "Date",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Date",
                      "fullTitle": "ICalTools checkDate() Date should work with valid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date();\nassert_1.default.equal((0, tools_1.checkDate)(date, 'foo'), date);",
                      "err": {},
                      "uuid": "bb8e148d-f201-430f-9ec9-cf16a9973541",
                      "parentUUID": "b17f1afc-b6da-4578-9bb7-6836ed00a017",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Date",
                      "fullTitle": "ICalTools checkDate() Date should throw error for invalid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date('foo');\nassert_1.default.throws(() => {\n    (0, tools_1.checkDate)(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "675ec49e-dd32-48a8-88a6-316f30911445",
                      "parentUUID": "b17f1afc-b6da-4578-9bb7-6836ed00a017",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bb8e148d-f201-430f-9ec9-cf16a9973541",
                    "675ec49e-dd32-48a8-88a6-316f30911445"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a843b95a-f662-43a3-ba1f-61e7a3634dc7",
                  "title": "String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid String",
                      "fullTitle": "ICalTools checkDate() String should work with valid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = '2021-03-28T13:15:23.587Z';\nassert_1.default.equal((0, tools_1.checkDate)(date, 'foo'), date);",
                      "err": {},
                      "uuid": "0444019c-35c8-441a-909c-ae733f961bd8",
                      "parentUUID": "a843b95a-f662-43a3-ba1f-61e7a3634dc7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid String",
                      "fullTitle": "ICalTools checkDate() String should throw error for invalid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = 'foo';\nassert_1.default.throws(() => {\n    (0, tools_1.checkDate)(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "20c9acfe-2d01-4f27-9937-48bf41482b60",
                      "parentUUID": "a843b95a-f662-43a3-ba1f-61e7a3634dc7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0444019c-35c8-441a-909c-ae733f961bd8",
                    "20c9acfe-2d01-4f27-9937-48bf41482b60"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "af2f2dc1-a780-4350-815f-ce47462fbed4",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should work with valid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = luxon_1.DateTime.now();\nassert_1.default.equal((0, tools_1.checkDate)(date, 'foo'), date);",
                      "err": {},
                      "uuid": "5d1efc6a-ecb9-4494-858e-bae020303c17",
                      "parentUUID": "af2f2dc1-a780-4350-815f-ce47462fbed4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should throw error for invalid Luxon",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = luxon_1.DateTime.fromISO('foo');\nassert_1.default.throws(() => {\n    (0, tools_1.checkDate)(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "45e7262f-a6c0-4d37-9e13-90c3e5cf0928",
                      "parentUUID": "af2f2dc1-a780-4350-815f-ce47462fbed4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5d1efc6a-ecb9-4494-858e-bae020303c17",
                    "45e7262f-a6c0-4d37-9e13-90c3e5cf0928"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "ecfc8dae-4961-4323-8bb2-9962de49c228",
                  "title": "Moment",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should work with valid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = (0, moment_timezone_1.default)();\nassert_1.default.equal((0, tools_1.checkDate)(date, 'foo'), date);",
                      "err": {},
                      "uuid": "98ab70ba-89cf-4a87-8032-0efa7f2f6ad5",
                      "parentUUID": "ecfc8dae-4961-4323-8bb2-9962de49c228",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should throw error for invalid Moment",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = (0, moment_timezone_1.default)('foo');\nassert_1.default.throws(() => {\n    (0, tools_1.checkDate)(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "3a12dded-f6df-4fd0-8ca0-727e5ade110a",
                      "parentUUID": "ecfc8dae-4961-4323-8bb2-9962de49c228",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "98ab70ba-89cf-4a87-8032-0efa7f2f6ad5",
                    "3a12dded-f6df-4fd0-8ca0-727e5ade110a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "beee1be7-52fb-4830-be4a-44bbebc483c6",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should work with valid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = (0, dayjs_1.default)();\nassert_1.default.equal((0, tools_1.checkDate)(date, 'foo'), date);",
                      "err": {},
                      "uuid": "40c775d2-fdf3-4a18-b8f1-ade51427496b",
                      "parentUUID": "beee1be7-52fb-4830-be4a-44bbebc483c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should throw error for invalid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = (0, dayjs_1.default)('foo');\nassert_1.default.throws(() => {\n    (0, tools_1.checkDate)(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "47bd5569-0c80-4e57-b3bb-371562854f57",
                      "parentUUID": "beee1be7-52fb-4830-be4a-44bbebc483c6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "40c775d2-fdf3-4a18-b8f1-ade51427496b",
                    "47bd5569-0c80-4e57-b3bb-371562854f57"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af2cbab8-a2e4-43c6-b7ea-16cf74fbeffd",
              "title": "toDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with strings",
                  "fullTitle": "ICalTools toDate() should work with strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual((0, tools_1.toDate)(date.toJSON()), date);",
                  "err": {},
                  "uuid": "0f5930f0-860e-44c5-b683-e102bdee1619",
                  "parentUUID": "af2cbab8-a2e4-43c6-b7ea-16cf74fbeffd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with native Date",
                  "fullTitle": "ICalTools toDate() should work with native Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual((0, tools_1.toDate)(date), date);",
                  "err": {},
                  "uuid": "3d8fa7f1-8503-409f-80a2-b718978d198f",
                  "parentUUID": "af2cbab8-a2e4-43c6-b7ea-16cf74fbeffd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment object",
                  "fullTitle": "ICalTools toDate() should work with moment object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual((0, tools_1.toDate)((0, moment_timezone_1.default)(date)), date);",
                  "err": {},
                  "uuid": "a20b29ae-d128-4509-a30e-7d28d679ba22",
                  "parentUUID": "af2cbab8-a2e4-43c6-b7ea-16cf74fbeffd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Day.js object",
                  "fullTitle": "ICalTools toDate() should work with Day.js object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual((0, tools_1.toDate)((0, dayjs_1.default)(date)), date);",
                  "err": {},
                  "uuid": "9a445cf0-74f3-4eec-bc20-65b2654f532f",
                  "parentUUID": "af2cbab8-a2e4-43c6-b7ea-16cf74fbeffd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with luxon DateTime object",
                  "fullTitle": "ICalTools toDate() should work with luxon DateTime object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual((0, tools_1.toDate)(luxon_1.DateTime.fromJSDate(date)), date);",
                  "err": {},
                  "uuid": "ea773907-862a-4ed0-bb61-997807c3cbee",
                  "parentUUID": "af2cbab8-a2e4-43c6-b7ea-16cf74fbeffd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f5930f0-860e-44c5-b683-e102bdee1619",
                "3d8fa7f1-8503-409f-80a2-b718978d198f",
                "a20b29ae-d128-4509-a30e-7d28d679ba22",
                "9a445cf0-74f3-4eec-bc20-65b2654f532f",
                "ea773907-862a-4ed0-bb61-997807c3cbee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}